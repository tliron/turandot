// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tliron/turandot/resources/turandot.puccini.cloud/v1alpha1"
)

// ServiceStatusApplyConfiguration represents an declarative configuration of the ServiceStatus type for use
// with apply.
type ServiceStatusApplyConfiguration struct {
	CloutPath          *string                                           `json:"cloutPath,omitempty"`
	CloutHash          *string                                           `json:"cloutHash,omitempty"`
	ServiceTemplateURL *string                                           `json:"serviceTemplateUrl,omitempty"`
	Inputs             map[string]string                                 `json:"inputs,omitempty"`
	Outputs            map[string]string                                 `json:"outputs,omitempty"`
	InstantiationState *v1alpha1.ServiceInstantiationState               `json:"instantiationState,omitempty"`
	Mode               *string                                           `json:"mode,omitempty"`
	NodeStates         map[string]ServiceNodeModeStateApplyConfiguration `json:"nodeStates,omitempty"`
}

// ServiceStatusApplyConfiguration constructs an declarative configuration of the ServiceStatus type for use with
// apply.
func ServiceStatus() *ServiceStatusApplyConfiguration {
	return &ServiceStatusApplyConfiguration{}
}

// WithCloutPath sets the CloutPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloutPath field is set to the value of the last call.
func (b *ServiceStatusApplyConfiguration) WithCloutPath(value string) *ServiceStatusApplyConfiguration {
	b.CloutPath = &value
	return b
}

// WithCloutHash sets the CloutHash field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloutHash field is set to the value of the last call.
func (b *ServiceStatusApplyConfiguration) WithCloutHash(value string) *ServiceStatusApplyConfiguration {
	b.CloutHash = &value
	return b
}

// WithServiceTemplateURL sets the ServiceTemplateURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceTemplateURL field is set to the value of the last call.
func (b *ServiceStatusApplyConfiguration) WithServiceTemplateURL(value string) *ServiceStatusApplyConfiguration {
	b.ServiceTemplateURL = &value
	return b
}

// WithInputs puts the entries into the Inputs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Inputs field,
// overwriting an existing map entries in Inputs field with the same key.
func (b *ServiceStatusApplyConfiguration) WithInputs(entries map[string]string) *ServiceStatusApplyConfiguration {
	if b.Inputs == nil && len(entries) > 0 {
		b.Inputs = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Inputs[k] = v
	}
	return b
}

// WithOutputs puts the entries into the Outputs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Outputs field,
// overwriting an existing map entries in Outputs field with the same key.
func (b *ServiceStatusApplyConfiguration) WithOutputs(entries map[string]string) *ServiceStatusApplyConfiguration {
	if b.Outputs == nil && len(entries) > 0 {
		b.Outputs = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Outputs[k] = v
	}
	return b
}

// WithInstantiationState sets the InstantiationState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstantiationState field is set to the value of the last call.
func (b *ServiceStatusApplyConfiguration) WithInstantiationState(value v1alpha1.ServiceInstantiationState) *ServiceStatusApplyConfiguration {
	b.InstantiationState = &value
	return b
}

// WithMode sets the Mode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mode field is set to the value of the last call.
func (b *ServiceStatusApplyConfiguration) WithMode(value string) *ServiceStatusApplyConfiguration {
	b.Mode = &value
	return b
}

// WithNodeStates puts the entries into the NodeStates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeStates field,
// overwriting an existing map entries in NodeStates field with the same key.
func (b *ServiceStatusApplyConfiguration) WithNodeStates(entries map[string]ServiceNodeModeStateApplyConfiguration) *ServiceStatusApplyConfiguration {
	if b.NodeStates == nil && len(entries) > 0 {
		b.NodeStates = make(map[string]ServiceNodeModeStateApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.NodeStates[k] = v
	}
	return b
}
