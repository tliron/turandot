tosca_definitions_version: tosca_simple_yaml_1_3

metadata:

  # This scriptlet is used by the "configure" interface
  puccini.scriptlet.import:hello-world.set-output: artifacts/scriptlets/set-output.js

imports:

- namespace_prefix: k8s
  file: profiles/kubernetes/1.0/profile.yaml
- namespace_prefix: o11n
  file: profiles/orchestration/1.0/profile.yaml

node_types:

  # The Kubernetes profile comprises capability types, not node types
  # You need to create your own node type that is an assemblage of capabilities
  # In other words, the node is where we logically relate Kubernetes resources together
  Application:
    capabilities:
      # The Metadata capability will be shared with all resources
      # Only one should be used per node type
      metadata: k8s:Metadata
      # Other capabilities can be added to represent Kubernetes resources
      # (The same capability type can be used multiple times, e.g. two LoadBalancers)
      deployment: k8s:Deployment
      web: k8s:LoadBalancer
    interfaces:
      # Interfaces are used to achieve service modes
      # The name of the interface is used by default as the name of the mode
      # (Anything after "." in the name is ignored for this purpose)
      normal.1:
        type: k8s:ContainerCommand
      normal.2:
        type: o11n:Scriptlet

topology_template:

  inputs:

    namespace:
      type: string
      default: workspace

  node_templates:

    self-contained:
      type: Application
      capabilities:
        metadata:
          properties:
            # If "name" is not specified, the TOSCA node template name will be used
            # If "namespace" is not set, resources will be created in the same namespace as
            # the Turandot operator 
            namespace: { get_input: namespace }
            labels:
              app.kubernetes.io/name: self-contained
        deployment:
          properties:
            metadataNamePostfix: ''
            template:
              containers:
              - name: hello-world
                # You can, of course, specify any container image URL
                # (from the Docker Hub default or some other container image registry)
                # In this case, because the "image" is a ContainerImage, get_artifact will return
                # a URL for the Turandot inventory *after* the container image is pushed to it
                image: { get_artifact: [ SELF, image ] }
                imagePullPolicy: Always
              #imagePullSecrets:
              #- name: turandot-inventory 
        web:
          properties:
            ports:
            - { name: http, protocol: TCP, port: 80, targetPort: 8080 }
          attributes:
            # We're initializing this attribute to make sure the call to get_attribute in the ouput
            # won't fail before a real value arrives
            ingress:
            - ip: <unknown>
      interfaces:
        # The interfaces are executed in alphabetical order
        # The previous execution must succeed before moving on to the next
        normal.1:
          inputs:
            # The command is executed with the contents of the Clout in stdin
            # If the command has a non-empty stdout, it will be used to replace the current Clout
            # This combination allows the command to manipulate the Clout if desired
            command:
            - /tmp/configure.sh
            - $$nodeTemplate # arguments beginning with "$$" will be replaced with local values
            # Artifacts are copied to the target container before execution
            artifacts:
            - configure # See below
        normal.2:
          inputs:
            scriptlet: hello-world.set-output
            arguments:
              name: initialized
              value: 'true'
      artifacts:
        # In this case all our artifacts are in the CSAR
        # But we can also use URLs to other locations
        image:
          # Container images will be published on the inventory before deployment 
          type: k8s:ContainerImage
          # Note that the container image tarball must be "portable"
          # (You can use the included "save-portable-container-image" script to create it)
          file: artifacts/images/hello-world.tar.gz
          properties:
            # The name is required for publishing the artifact
            name: hello-world
        configure:
          # The Executable type will set executable permissions on the file
          type: o11n:Executable
          file: artifacts/scripts/configure.sh
          deploy_path: /tmp/configure.sh

  outputs:

    url:
      # Before a real attribute value arrives this will evaluate to "http://<unknown>:80"
      type: string
      value: { concat: [ http://, { get_attribute: [ self-contained, web, ingress, 0, ip ] }, ':80' ] }

    initialized:
      type: boolean
      value: false
