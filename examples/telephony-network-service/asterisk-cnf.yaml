tosca_definitions_version: tosca_simple_yaml_1_3

metadata:

  template_name: Asterisk CNF
  template_author: Turandot

imports:

- namespace_prefix: ns
  file: profiles/network-service/profile.yaml
- namespace_prefix: telephony
  file: profiles/telephony/profile.yaml
- namespace_prefix: k8s
  file: profiles/kubernetes/1.0/profile.yaml
- namespace_prefix: o11n
  file: profiles/orchestration/1.0/profile.yaml

node_types:

  Asterisk:
    capabilities:
      metadata: k8s:Metadata
      deployment: k8s:Deployment
      udp: k8s:LoadBalancer
      trunks: telephony:Trunks
    requirements:
    - data-plane:
        capability: ns:Connectable
        node: ns:NetworkPlane
    interfaces:
      normal:
        type: k8s:ContainerCommand

topology_template:

  inputs:

    namespace:
      type: string
      default: workspace

  node_templates:

    asterisk:
      type: Asterisk
      capabilities:
        metadata:
          properties:
            name: asterisk-cnf
            namespace: { get_input: namespace }
            labels:
              app.kubernetes.io/name: asterisk-cnf
            annotations:
              k8s.v1.cni.cncf.io/networks: { get_property: [ data-plane, annotations, name ] }
        deployment:
          properties:
            spec:
              template:
                spec:
                  containers:
                  - name: all-in-one
                    image: { get_artifact: [ SELF, image ] }
                    imagePullPolicy: Always
        udp:
          properties:
            spec:
              ports:
              - { name: sip,  protocol: UDP, targetPort: { port: 5060  }, port: 5060  }
              - { name: rtp0, protocol: UDP, targetPort: { port: 10000 }, port: 10000 }
              - { name: rtp1, protocol: UDP, targetPort: { port: 10001 }, port: 10001 }
              - { name: rtp2, protocol: UDP, targetPort: { port: 10002 }, port: 10002 }
              - { name: rtp3, protocol: UDP, targetPort: { port: 10003 }, port: 10003 }
              - { name: rtp4, protocol: UDP, targetPort: { port: 10004 }, port: 10004 }
              - { name: rtp5, protocol: UDP, targetPort: { port: 10005 }, port: 10005 }
              - { name: rtp6, protocol: UDP, targetPort: { port: 10006 }, port: 10006 }
              - { name: rtp7, protocol: UDP, targetPort: { port: 10007 }, port: 10007 }
          attributes:
            status:
              loadBalancer:
                ingress:
                - ip: 0.0.0.0
      interfaces:
        normal:
          inputs:
            command:
            - /tmp/configure.sh
            - { get_attribute: [ SELF, udp, status, loadBalancer, ingress, 0, ip ] }
            artifacts:
            - configure.sh
            - puccini-clout
            - pjsip.conf
            - rtp.conf
            - extensions.conf
      artifacts:
        image:
          type: k8s:ContainerImage
          file: artifacts/images/asterisk-cnf.tar.gz
          properties:
            name: asterisk-cnf
        configure.sh:
          type: o11n:Executable
          file: artifacts/scripts/asterisk/configure-cnf.sh
          deploy_path: /tmp/configure.sh
        pjsip.conf:
          type: o11n:Deployable
          file: artifacts/asterisk/pjsip-cnf.conf.template
          deploy_path: /tmp/pjsip.conf.template
        rtp.conf:
          type: o11n:Deployable
          file: artifacts/asterisk/rtp.conf
          deploy_path: /tmp/rtp.conf
        extensions.conf:
          type: o11n:Deployable
          file: artifacts/asterisk/extensions-cnf.conf.template
          deploy_path: /tmp/extensions.conf.template
        puccini-clout:
          type: o11n:Executable
          file: artifacts/binaries/puccini-clout
          deploy_path: /tmp/puccini-clout

    data-plane:
      type: ns:NetworkPlane
      # TODO: inject these via substitution mapping
      properties:
        annotations:
          name: data-plane

  outputs:

    udp-ip:
      type: string
      value: { get_attribute: [ asterisk, udp, status, loadBalancer, ingress, 0, ip ] }

  substitution_mappings:

    node_type: telephony:PBX
    capabilities:
      trunks: [ asterisk, trunks ]

  policies:

  - data-plane:
      type: o11n:Provisioning
      properties:
        instantiable: false
      targets:
      - data-plane
