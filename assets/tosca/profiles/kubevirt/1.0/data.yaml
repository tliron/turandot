tosca_definitions_version: tosca_simple_yaml_1_3

# This file was automatically generated from data published at:
# https://raw.githubusercontent.com/kubevirt/kubevirt/v0.44.1/api/openapi-spec/swagger.json

metadata:

  specification.name: KubeVirt
  specification.version: 0.44.1
  specification.url: http://kubevirt.io/api-reference/v0.44.1/definitions.html

imports:

- namespace_prefix: k8s
  file: ../../kubernetes/1.0/profile.yaml

data_types:

  APIGroup:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      APIGroup contains the name, the supported versions, and the preferred version of
      a group.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      name:
        description: >-
          name is the name of the group.
        type: string
      preferredVersion:
        description: >-
          preferredVersion is the version preferred by the API server, which probably is
          the storage version.
        type: GroupVersionForDiscovery
        required: false
      serverAddressByClientCIDRs:
        description: >-
          a map of client CIDR to server address that is serving this group. This is to
          help clients reach servers in the most network-efficient way possible. Clients
          can use the appropriate server address as per the CIDR that they match. In case
          of multiple matches, clients should use the longest matching CIDR. The server
          returns only those CIDRs that it thinks that the client can match. For example:
          the master will return an internal IP CIDR only, if the client reaches the
          server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip
          header or request.RemoteAddr (in that order) to get the client IP.
        type: list
        entry_schema: ServerAddressByClientCIDR
        required: false
      versions:
        description: >-
          versions are the versions supported in this group.
        type: list
        entry_schema: GroupVersionForDiscovery

  APIGroupList:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      APIGroupList is a list of APIGroup, to allow clients to discover the API at
      /apis.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      groups:
        description: >-
          groups is a list of APIGroup.
        type: list
        entry_schema: APIGroup
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false

  APIResource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      APIResource specifies the name of a resource and whether it is namespaced.
    properties:
      categories:
        description: >-
          categories is a list of the grouped resources this resource belongs to (e.g.
          'all')
        type: list
        entry_schema: string
        required: false
      group:
        description: >-
          group is the preferred group of the resource. Empty implies the group of the
          containing resource list. For subresources, this may have a different value, for
          example: Scale".
        type: string
        required: false
      kind:
        description: >-
          kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
        type: string
      name:
        description: >-
          name is the plural name of the resource.
        type: string
      namespaced:
        description: >-
          namespaced indicates if a resource is namespaced or not.
        type: boolean
      shortNames:
        description: >-
          shortNames is a list of suggested short names of the resource.
        type: list
        entry_schema: string
        required: false
      singularName:
        description: >-
          singularName is the singular name of the resource. This allows clients to handle
          plural and singular opaquely. The singularName is more correct for reporting
          status on a single item and both singular and plural are allowed from the
          kubectl CLI interface.
        type: string
      storageVersionHash:
        description: >-
          The hash value of the storage version, the version this resource is converted to
          when written to the data store. Value must be treated as opaque by clients. Only
          equality comparison on the value is valid. This is an alpha feature and may
          change or be removed in the future. The field is populated by the apiserver only
          if the StorageVersionHash feature gate is enabled. This field will remain
          optional even if it graduates.
        type: string
        required: false
      verbs:
        description: >-
          verbs is a list of supported kube verbs (this includes get, list, watch, create,
          update, patch, delete, deletecollection, and proxy)
        type: list
        entry_schema: string
      version:
        description: >-
          version is the preferred version of the resource. Empty implies the version of
          the containing resource list For subresources, this may have a different value,
          for example: v1 (while inside a v1beta1 version of the core resource's group)".
        type: string
        required: false

  APIResourceList:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      APIResourceList is a list of APIResource, it is used to expose the name of the
      resources supported in a specific group and version, and if the resource is
      namespaced.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      groupVersion:
        description: >-
          groupVersion is the group and version this APIResourceList is for.
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      resources:
        description: >-
          resources contains the name of the resources and if they are namespaced.
        type: list
        entry_schema: APIResource

  AccessCredential:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      AccessCredential represents a credential source that can be used to authorize
      remote access to the vm guest Only one of its members may be specified.
    properties:
      sshPublicKey:
        description: >-
          SSHPublicKey represents the source and method of applying a ssh public key into
          a guest virtual machine.
        type: SSHPublicKeyAccessCredential
        required: false
      userPassword:
        description: >-
          UserPassword represents the source and method for applying a guest user's
          password
        type: UserPasswordAccessCredential
        required: false

  AccessCredentialSecretSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      secretName:
        description: >-
          SecretName represents the name of the secret in the VMI's namespace
        type: string

  AddVolumeOptions:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      AddVolumeOptions is provided when dynamically hot plugging a volume and disk
    properties:
      disk:
        description: >-
          Disk represents the hotplug disk that will be plugged into the running VMI
        type: Disk
      name:
        description: >-
          Name represents the name that will be used to map the disk to the corresponding
          volume. This overrides any name set inside the Disk struct itself.
        type: string
      volumeSource:
        description: >-
          VolumeSource represents the source of the volume to map to the disk.
        type: HotplugVolumeSource

  BIOS:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      If set (default), BIOS will be used.
    properties:
      useSerial:
        description: >-
          If set, the BIOS output will be transmitted over serial
        type: boolean
        required: false

  BlockSize:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      BlockSize provides the option to change the block size presented to the VM for a
      disk. Only one of its members may be specified.
    properties:
      custom:
        type: CustomBlockSize
        required: false
      matchVolume:
        type: FeatureState
        required: false

  Bootloader:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents the firmware blob used to assist in the domain creation process. Used
      for setting the QEMU BIOS file path for the libvirt domain.
    properties:
      bios:
        description: >-
          If set (default), BIOS will be used.
        type: BIOS
        required: false
      efi:
        description: >-
          If set, EFI will be used instead of BIOS.
        type: EFI
        required: false

  CDRomTarget:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      bus:
        description: >-
          Bus indicates the type of disk device to emulate. supported values: virtio,
          sata, scsi.
        type: string
        required: false
      readonly:
        description: >-
          ReadOnly. Defaults to true.
        type: boolean
        required: false
      tray:
        description: >-
          Tray indicates if the tray of the device is open or closed. Allowed values are
          "open" and "closed". Defaults to closed.
        type: string
        required: false

  CPU:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      CPU allows specifying the CPU topology.
    properties:
      cores:
        description: >-
          Cores specifies the number of cores inside the vmi. Must be a value greater or
          equal 1.
        type: integer
        required: false
      dedicatedCpuPlacement:
        description: >-
          DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance
          on a node with enough dedicated pCPUs and pin the vCPUs to it.
        type: boolean
        required: false
      features:
        description: >-
          Features specifies the CPU features list inside the VMI.
        type: list
        entry_schema: CPUFeature
        required: false
      isolateEmulatorThread:
        description: >-
          IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the
          VMI to place the emulator thread on it.
        type: boolean
        required: false
      model:
        description: >-
          Model specifies the CPU model inside the VMI. List of available models
          https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to
          specify special cases like "host-passthrough" to get the same CPU as the node
          and "host-model" to get CPU closest to the node one. Defaults to host-model.
        type: string
        required: false
      numa:
        description: >-
          NUMA allows specifying settings for the guest NUMA topology
        type: NUMA
        required: false
      sockets:
        description: >-
          Sockets specifies the number of sockets inside the vmi. Must be a value greater
          or equal 1.
        type: integer
        required: false
      threads:
        description: >-
          Threads specifies the number of threads inside the vmi. Must be a value greater
          or equal 1.
        type: integer
        required: false

  CPUFeature:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      CPUFeature allows specifying a CPU feature.
    properties:
      name:
        description: >-
          Name of the CPU feature
        type: string
      policy:
        description: >-
          Policy is the CPU feature attribute which can have the following attributes:
          force - The virtual CPU will claim the feature is supported regardless of it
          being supported by host CPU. require - Guest creation will fail unless the
          feature is supported by the host CPU or the hypervisor is able to emulate it.
          optional - The feature will be supported by virtual CPU if and only if it is
          supported by host CPU. disable - The feature will not be supported by virtual
          CPU. forbid - Guest creation will fail if the feature is supported by host CPU.
          Defaults to require
        type: string
        required: false

  CertConfig:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      CertConfig contains the tunables for TLS certificates
    properties:
      duration:
        description: >-
          The requested 'duration' (i.e. lifetime) of the Certificate.
        type: Duration
        required: false
      renewBefore:
        description: >-
          The amount of time before the currently issued certificate's "notAfter" time
          that we will begin to attempt to renew the certificate.
        type: Duration
        required: false

  Chassis:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Chassis specifies the chassis info passed to the domain.
    properties:
      asset:
        type: string
        required: false
      manufacturer:
        type: string
        required: false
      serial:
        type: string
        required: false
      sku:
        type: string
        required: false
      version:
        type: string
        required: false

  ClientPassthroughDevices:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represent a subset of client devices that can be accessed by VMI. At the moment
      only, USB devices using Usbredir's library and tooling. Another fit would be a
      smartcard with libcacard.

      The struct is currently empty as there is no imediate request for user-facing
      APIs. This structure simply turns on USB redirection of
      UsbClientPassthroughMaxNumberOf devices.

  Clock:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents the clock and timers of a vmi.
    properties:
      timer:
        description: >-
          Timer specifies whih timers are attached to the vmi.
        type: Timer
        required: false
      timezone:
        description: >-
          Timezone sets the guest clock to the specified timezone. Zone name follows the
          TZ environment variable format (e.g. 'America/New_York').
        type: string
        required: false
      utc:
        description: >-
          UTC sets the guest clock to UTC on each boot. If an offset is specified, guest
          changes to the clock will be kept during reboots and are not reset.
        type: ClockOffsetUTC
        required: false

  ClockOffsetUTC:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      UTC sets the guest clock to UTC on each boot.
    properties:
      offsetSeconds:
        description: >-
          OffsetSeconds specifies an offset in seconds, relative to UTC. If set, guest
          changes to the clock will be kept during reboots and not reset.
        type: integer
        required: false

  CloudInitConfigDriveSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents a cloud-init config drive user data source. More info:
      https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
    properties:
      networkData:
        description: >-
          NetworkData contains config drive inline cloud-init networkdata.
        type: string
        required: false
      networkDataBase64:
        description: >-
          NetworkDataBase64 contains config drive cloud-init networkdata as a base64
          encoded string.
        type: string
        required: false
      networkDataSecretRef:
        description: >-
          NetworkDataSecretRef references a k8s secret that contains config drive
          networkdata.
        type: k8s:LocalObjectReference
        required: false
      secretRef:
        description: >-
          UserDataSecretRef references a k8s secret that contains config drive userdata.
        type: k8s:LocalObjectReference
        required: false
      userData:
        description: >-
          UserData contains config drive inline cloud-init userdata.
        type: string
        required: false
      userDataBase64:
        description: >-
          UserDataBase64 contains config drive cloud-init userdata as a base64 encoded
          string.
        type: string
        required: false

  CloudInitNoCloudSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents a cloud-init nocloud user data source. More info:
      http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
    properties:
      networkData:
        description: >-
          NetworkData contains NoCloud inline cloud-init networkdata.
        type: string
        required: false
      networkDataBase64:
        description: >-
          NetworkDataBase64 contains NoCloud cloud-init networkdata as a base64 encoded
          string.
        type: string
        required: false
      networkDataSecretRef:
        description: >-
          NetworkDataSecretRef references a k8s secret that contains NoCloud networkdata.
        type: k8s:LocalObjectReference
        required: false
      secretRef:
        description: >-
          UserDataSecretRef references a k8s secret that contains NoCloud userdata.
        type: k8s:LocalObjectReference
        required: false
      userData:
        description: >-
          UserData contains NoCloud inline cloud-init userdata.
        type: string
        required: false
      userDataBase64:
        description: >-
          UserDataBase64 contains NoCloud cloud-init userdata as a base64 encoded string.
        type: string
        required: false

  ComponentConfig:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      nodePlacement:
        description: >-
          nodePlacement decsribes scheduling confiuguration for specific KubeVirt
          components
        type: NodePlacement
        required: false

  Condition:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Condition defines conditions
    properties:
      lastProbeTime:
        type: string
        required: false
      lastTransitionTime:
        type: string
        required: false
      message:
        type: string
        required: false
      reason:
        type: string
        required: false
      status:
        type: string
      type:
        type: string

  ConfigDriveSSHPublicKeyAccessCredentialPropagation:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1

  ConfigMapVolumeSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      ConfigMapVolumeSource adapts a ConfigMap into a volume. More info:
      https://kubernetes.io/docs/concepts/storage/volumes/#configmap
    properties:
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        required: false
      optional:
        description: >-
          Specify whether the ConfigMap or it's keys must be defined
        type: boolean
        required: false
      volumeLabel:
        description: >-
          The volume label of the resulting disk inside the VMI. Different bootstrapping
          mechanisms require different values. Typical values are "cidata" (cloud-init),
          "config-2" (cloud-init) or "OEMDRV" (kickstart).
        type: string
        required: false

  ContainerDiskSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents a docker image with an embedded disk.
    properties:
      image:
        description: >-
          Image is the name of the image with the embedded disk.
        type: string
      imagePullPolicy:
        description: >-
          Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if
          :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More
          info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        type: string
        required: false
      imagePullSecret:
        description: >-
          ImagePullSecret is the name of the Docker registry secret required to pull the
          image. The secret must already exist.
        type: string
        required: false
      path:
        description: >-
          Path defines the path to disk file in the container
        type: string
        required: false

  CustomBlockSize:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      CustomBlockSize represents the desired logical and physical block size for a VM
      disk.
    properties:
      logical:
        type: integer
      physical:
        type: integer

  CustomizeComponents:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      flags:
        description: >-
          Configure the value used for deployment and daemonset resources
        type: Flags
        required: false
      patches:
        type: list
        entry_schema: CustomizeComponentsPatch
        required: false

  CustomizeComponentsPatch:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      patch:
        type: string
      resourceName:
        type: string
      resourceType:
        type: string
      type:
        type: string

  DHCPOptions:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Extra DHCP options to use in the interface.
    properties:
      bootFileName:
        description: >-
          If specified will pass option 67 to interface's DHCP server
        type: string
        required: false
      ntpServers:
        description: >-
          If specified will pass the configured NTP server to the VM via DHCP option 042.
        type: list
        entry_schema: string
        required: false
      privateOptions:
        description: >-
          If specified will pass extra DHCP options for private use, range: 224-254
        type: list
        entry_schema: DHCPPrivateOptions
        required: false
      tftpServerName:
        description: >-
          If specified will pass option 66 to interface's DHCP server
        type: string
        required: false

  DHCPPrivateOptions:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DHCPExtraOptions defines Extra DHCP options for a VM.
    properties:
      option:
        description: >-
          Option is an Integer value from 224-254 Required.
        type: integer
      value:
        description: >-
          Value is a String value for the Option provided Required.
        type: string

  DataVolumeBlankImage:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeBlankImage provides the parameters to create a new raw blank image for
      the PVC

  DataVolumeCheckpoint:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeCheckpoint defines a stage in a warm migration.
    properties:
      current:
        description: >-
          Current is the identifier of the snapshot created for this checkpoint.
        type: string
      previous:
        description: >-
          Previous is the identifier of the snapshot from the previous checkpoint.
        type: string

  DataVolumeSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      name:
        description: >-
          Name represents the name of the DataVolume in the same namespace
        type: string

  DataVolumeSourceHTTP:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeSourceHTTP can be either an http or https endpoint, with an optional
      basic auth user name and password, and an optional configmap containing
      additional CAs
    properties:
      certConfigMap:
        description: >-
          CertConfigMap is a configmap reference, containing a Certificate Authority(CA)
          public key, and a base64 encoded pem certificate
        type: string
        required: false
      secretRef:
        description: >-
          SecretRef A Secret reference, the secret should contain accessKeyId (user name)
          base64 encoded, and secretKey (password) also base64 encoded
        type: string
        required: false
      url:
        description: >-
          URL is the URL of the http(s) endpoint
        type: string

  DataVolumeSourceImageIO:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeSourceImageIO provides the parameters to create a Data Volume from an
      imageio source
    properties:
      certConfigMap:
        description: >-
          CertConfigMap provides a reference to the CA cert
        type: string
        required: false
      diskId:
        description: >-
          DiskID provides id of a disk to be imported
        type: string
      secretRef:
        description: >-
          SecretRef provides the secret reference needed to access the ovirt-engine
        type: string
        required: false
      url:
        description: >-
          URL is the URL of the ovirt-engine
        type: string

  DataVolumeSourcePVC:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeSourcePVC provides the parameters to create a Data Volume from an
      existing PVC
    properties:
      name:
        description: >-
          The name of the source PVC
        type: string
      namespace:
        description: >-
          The namespace of the source PVC
        type: string

  DataVolumeSourceRef:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeSourceRef defines an indirect reference to the source of data for the
      DataVolume
    properties:
      kind:
        description: >-
          The kind of the source reference, currently only "DataSource" is supported
        type: string
      name:
        description: >-
          The name of the source reference
        type: string
      namespace:
        description: >-
          The namespace of the source reference, defaults to the DataVolume namespace
        type: string
        required: false

  DataVolumeSourceRegistry:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeSourceRegistry provides the parameters to create a Data Volume from an
      registry source
    properties:
      certConfigMap:
        description: >-
          CertConfigMap provides a reference to the Registry certs
        type: string
        required: false
      secretRef:
        description: >-
          SecretRef provides the secret reference needed to access the Registry source
        type: string
        required: false
      url:
        description: >-
          URL is the url of the Docker registry source
        type: string

  DataVolumeSourceS3:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3
      source
    properties:
      certConfigMap:
        description: >-
          CertConfigMap is a configmap reference, containing a Certificate Authority(CA)
          public key, and a base64 encoded pem certificate
        type: string
        required: false
      secretRef:
        description: >-
          SecretRef provides the secret reference needed to access the S3 source
        type: string
        required: false
      url:
        description: >-
          URL is the url of the S3 source
        type: string

  DataVolumeSourceUpload:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeSourceUpload provides the parameters to create a Data Volume by
      uploading the source

  DataVolumeSourceVDDK:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeSourceVDDK provides the parameters to create a Data Volume from a
      Vmware source
    properties:
      backingFile:
        description: >-
          BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi
        type: string
        required: false
      secretRef:
        description: >-
          SecretRef provides a reference to a secret containing the username and password
          needed to access the vCenter or ESXi host
        type: string
        required: false
      thumbprint:
        description: >-
          Thumbprint is the certificate thumbprint of the vCenter or ESXi host
        type: string
        required: false
      url:
        description: >-
          URL is the URL of the vCenter or ESXi host with the VM to migrate
        type: string
        required: false
      uuid:
        description: >-
          UUID is the UUID of the virtual machine that the backing file is attached to in
          vCenter/ESXi
        type: string
        required: false

  DataVolumeSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DataVolumeSpec defines the DataVolume type specification
    properties:
      checkpoints:
        description: >-
          Checkpoints is a list of DataVolumeCheckpoints, representing stages in a
          multistage import.
        type: list
        entry_schema: DataVolumeCheckpoint
        required: false
      contentType:
        description: >-
          DataVolumeContentType options: "kubevirt", "archive"
        type: string
        required: false
      finalCheckpoint:
        description: >-
          FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final
          checkpoint.
        type: boolean
        required: false
      preallocation:
        description: >-
          Preallocation controls whether storage for DataVolumes should be allocated in
          advance.
        type: boolean
        required: false
      priorityClassName:
        description: >-
          PriorityClassName for Importer, Cloner and Uploader pod
        type: string
        required: false
      pvc:
        description: >-
          PVC is the PVC specification
        type: k8s:PersistentVolumeClaimSpec
        required: false
      source:
        description: >-
          Source is the src of the data for the requested DataVolume
        type: DataVolumeSource
        required: false
      sourceRef:
        description: >-
          SourceRef is an indirect reference to the source of data for the requested
          DataVolume
        type: DataVolumeSourceRef
        required: false
      storage:
        description: >-
          Storage is the requested storage specification
        type: StorageSpec
        required: false

  DataVolumeTemplateDummyStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1

  DataVolumeTemplateSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      spec:
        description: >-
          DataVolumeSpec contains the DataVolume specification.
        type: DataVolumeSpec
      status:
        description: >-
          DataVolumeTemplateDummyStatus is here simply for backwards compatibility with a
          previous API.
        type: DataVolumeTemplateDummyStatus
        required: false

  DeleteOptions:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DeleteOptions may be provided when deleting an API object.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      dryRun:
        description: >-
          When present, indicates that modifications should not be persisted. An invalid
          or unrecognized dryRun directive will result in an error response and no further
          processing of the request. Valid values are: - All: all dry run stages will be
          processed
        type: list
        entry_schema: string
        required: false
      gracePeriodSeconds:
        description: >-
          The duration in seconds before the object should be deleted. Value must be
          non-negative integer. The value zero indicates delete immediately. If this value
          is nil, the default grace period for the specified type will be used. Defaults
          to a per object value if not specified. zero means delete immediately.
        type: integer
        required: false
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      orphanDependents:
        description: >-
          Deprecated: please use the PropagationPolicy, this field will be deprecated in
          1.7. Should the dependent objects be orphaned. If true/false, the "orphan"
          finalizer will be added to/removed from the object's finalizers list. Either
          this field or PropagationPolicy may be set, but not both.
        type: boolean
        required: false
      preconditions:
        description: >-
          Must be fulfilled before a deletion is carried out. If not possible, a 409
          Conflict status will be returned.
        type: Preconditions
        required: false
      propagationPolicy:
        description: >-
          Whether and how garbage collection will be performed. Either this field or
          OrphanDependents may be set, but not both. The default policy is decided by the
          existing finalizer set in the metadata.finalizers and the resource-specific
          default policy. Acceptable values are: 'Orphan' - orphan the dependents;
          'Background' - allow the garbage collector to delete the dependents in the
          background; 'Foreground' - a cascading policy that deletes all dependents in the
          foreground.
        type: string
        required: false

  DeveloperConfiguration:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DeveloperConfiguration holds developer options
    properties:
      cpuAllocationRatio:
        type: integer
        required: false
      diskVerification:
        type: DiskVerification
        required: false
      featureGates:
        type: list
        entry_schema: string
        required: false
      logVerbosity:
        type: LogVerbosity
        required: false
      memoryOvercommit:
        type: integer
        required: false
      minimumClusterTSCFrequency:
        description: >-
          Allow overriding the automatically determined minimum TSC frequency of the
          cluster and fixate the minimum to this frequency.
        type: integer
        required: false
      minimumReservePVCBytes:
        type: integer
        required: false
      nodeSelectors:
        type: map
        entry_schema: string
        required: false
      pvcTolerateLessSpaceUpToPercent:
        type: integer
        required: false
      useEmulation:
        type: boolean
        required: false

  Devices:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      autoattachGraphicsDevice:
        description: >-
          Whether to attach the default graphics device or not. VNC will not be available
          if set to false. Defaults to true.
        type: boolean
        required: false
      autoattachMemBalloon:
        description: >-
          Whether to attach the Memory balloon device with default period. Period can be
          adjusted in virt-config. Defaults to true.
        type: boolean
        required: false
      autoattachPodInterface:
        description: >-
          Whether to attach a pod network interface. Defaults to true.
        type: boolean
        required: false
      autoattachSerialConsole:
        description: >-
          Whether to attach the default serial console or not. Serial console access will
          not be available if set to false. Defaults to true.
        type: boolean
        required: false
      blockMultiQueue:
        description: >-
          Whether or not to enable virtio multi-queue for block devices. Defaults to
          false.
        type: boolean
        required: false
      clientPassthrough:
        description: >-
          To configure and access client devices such as redirecting USB
        type: ClientPassthroughDevices
        required: false
      disableHotplug:
        description: >-
          DisableHotplug disabled the ability to hotplug disks.
        type: boolean
        required: false
      disks:
        description: >-
          Disks describes disks, cdroms, floppy and luns which are connected to the vmi.
        type: list
        entry_schema: Disk
        required: false
      filesystems:
        description: >-
          Filesystems describes filesystem which is connected to the vmi.
        type: list
        entry_schema: Filesystem
        required: false
      gpus:
        description: >-
          Whether to attach a GPU device to the vmi.
        type: list
        entry_schema: GPU
        required: false
      hostDevices:
        description: >-
          Whether to attach a host device to the vmi.
        type: list
        entry_schema: HostDevice
        required: false
      inputs:
        description: >-
          Inputs describe input devices
        type: list
        entry_schema: Input
        required: false
      interfaces:
        description: >-
          Interfaces describe network interfaces which are added to the vmi.
        type: list
        entry_schema: Interface
        required: false
      networkInterfaceMultiqueue:
        description: >-
          If specified, virtual network interfaces configured with a virtio bus will also
          enable the vhost multiqueue feature for network devices. The number of queues
          created depends on additional factors of the VirtualMachineInstance, like the
          number of guest CPUs.
        type: boolean
        required: false
      rng:
        description: >-
          Whether to have random number generator from host
        type: Rng
        required: false
      useVirtioTransitional:
        description: >-
          Fall back to legacy virtio 0.9 support if virtio bus is selected on devices.
          This is helpful for old machines like CentOS6 or RHEL6 which do not understand
          virtio_non_transitional (virtio 1.0).
        type: boolean
        required: false
      watchdog:
        description: >-
          Watchdog describes a watchdog device which can be added to the vmi.
        type: Watchdog
        required: false

  Disk:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      blockSize:
        description: >-
          If specified, the virtual disk will be presented with the given block sizes.
        type: BlockSize
        required: false
      bootOrder:
        description: >-
          BootOrder is an integer value > 0, used to determine ordering of boot devices.
          Lower values take precedence. Each disk or interface that has a boot order must
          have a unique value. Disks without a boot order are not tried if a disk with a
          boot order exists.
        type: integer
        required: false
      cache:
        description: >-
          Cache specifies which kvm disk cache mode should be used. Supported values are:
          CacheNone, CacheWriteThrough.
        type: string
        required: false
      cdrom:
        description: >-
          Attach a volume as a cdrom to the vmi.
        type: CDRomTarget
        required: false
      dedicatedIOThread:
        description: >-
          dedicatedIOThread indicates this disk should have an exclusive IO Thread.
          Enabling this implies useIOThreads = true. Defaults to false.
        type: boolean
        required: false
      disk:
        description: >-
          Attach a volume as a disk to the vmi.
        type: DiskTarget
        required: false
      floppy:
        description: >-
          Attach a volume as a floppy to the vmi.
        type: FloppyTarget
        required: false
      io:
        description: >-
          IO specifies which QEMU disk IO mode should be used. Supported values are:
          native, default, threads.
        type: string
        required: false
      lun:
        description: >-
          Attach a volume as a LUN to the vmi.
        type: LunTarget
        required: false
      name:
        description: >-
          Name is the device name
        type: string
      serial:
        description: >-
          Serial provides the ability to specify a serial number for the disk device.
        type: string
        required: false
      tag:
        description: >-
          If specified, disk address and its tag will be provided to the guest via config
          drive metadata
        type: string
        required: false

  DiskTarget:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      bus:
        description: >-
          Bus indicates the type of disk device to emulate. supported values: virtio,
          sata, scsi.
        type: string
        required: false
      pciAddress:
        description: >-
          If specified, the virtual disk will be placed on the guests pci address with the
          specified PCI address. For example: 0000:81:01.10
        type: string
        required: false
      readonly:
        description: >-
          ReadOnly. Defaults to false.
        type: boolean
        required: false

  DiskVerification:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DiskVerification holds container disks verification limits
    properties:
      memoryLimit:
        type: Quantity

  DomainSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      chassis:
        description: >-
          Chassis specifies the chassis info passed to the domain.
        type: Chassis
        required: false
      clock:
        description: >-
          Clock sets the clock and timers of the vmi.
        type: Clock
        required: false
      cpu:
        description: >-
          CPU allow specified the detailed CPU topology inside the vmi.
        type: CPU
        required: false
      devices:
        description: >-
          Devices allows adding disks, network interfaces, and others
        type: Devices
      features:
        description: >-
          Features like acpi, apic, hyperv, smm.
        type: Features
        required: false
      firmware:
        description: >-
          Firmware.
        type: Firmware
        required: false
      ioThreadsPolicy:
        description: >-
          Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy
          disables use of IOThreads. One of: shared, auto
        type: string
        required: false
      machine:
        description: >-
          Machine type.
        type: Machine
        required: false
      memory:
        description: >-
          Memory allow specifying the VMI memory features.
        type: Memory
        required: false
      resources:
        description: >-
          Resources describes the Compute Resources required by this vmi.
        type: ResourceRequirements
        required: false

  DownwardAPIVolumeSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DownwardAPIVolumeSource represents a volume containing downward API info.
    properties:
      fields:
        description: >-
          Fields is a list of downward API volume file
        type: list
        entry_schema: k8s:DownwardAPIVolumeFile
        required: false
      volumeLabel:
        description: >-
          The volume label of the resulting disk inside the VMI. Different bootstrapping
          mechanisms require different values. Typical values are "cidata" (cloud-init),
          "config-2" (cloud-init) or "OEMDRV" (kickstart).
        type: string
        required: false

  DownwardMetricsVolumeSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      DownwardMetricsVolumeSource adds a very small disk to VMIs which contains a
      limited view of host and guest metrics. The disk content is compatible with
      vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.

  Duration:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Duration is a wrapper around time.Duration which supports correct marshaling to
      YAML and JSON. In particular, it marshals into strings, which can be used as map
      keys in json.

  EFI:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      If set, EFI will be used instead of BIOS.
    properties:
      secureBoot:
        description: >-
          If set, SecureBoot will be enabled and the OVMF roms will be swapped for
          SecureBoot-enabled ones. Requires SMM to be enabled. Defaults to true
        type: boolean
        required: false

  EmptyDiskSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      EmptyDisk represents a temporary disk which shares the vmis lifecycle.
    properties:
      capacity:
        description: >-
          Capacity of the sparse disk.
        type: Quantity

  EphemeralVolumeSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      persistentVolumeClaim:
        description: >-
          PersistentVolumeClaimVolumeSource represents a reference to a
          PersistentVolumeClaim in the same namespace. Directly attached to the vmi via
          qemu. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: k8s:PersistentVolumeClaimVolumeSource
        required: false

  Error:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Error is the last error encountered during the snapshot/restore
    properties:
      message:
        type: string
        required: false
      time:
        type: Time
        required: false

  FeatureAPIC:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      enabled:
        description: >-
          Enabled determines if the feature should be enabled or disabled on the guest.
          Defaults to true.
        type: boolean
        required: false
      endOfInterrupt:
        description: >-
          EndOfInterrupt enables the end of interrupt notification in the guest. Defaults
          to false.
        type: boolean
        required: false

  FeatureHyperv:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Hyperv specific features.
    properties:
      evmcs:
        description: >-
          EVMCS Speeds up L2 vmexits, but disables other virtualization features. Requires
          vapic. Defaults to the machine type setting.
        type: FeatureState
        required: false
      frequencies:
        description: >-
          Frequencies improves the TSC clock source handling for Hyper-V on KVM. Defaults
          to the machine type setting.
        type: FeatureState
        required: false
      ipi:
        description: >-
          IPI improves performances in overcommited environments. Requires vpindex.
          Defaults to the machine type setting.
        type: FeatureState
        required: false
      reenlightenment:
        description: >-
          Reenlightenment enables the notifications on TSC frequency changes. Defaults to
          the machine type setting.
        type: FeatureState
        required: false
      relaxed:
        description: >-
          Relaxed instructs the guest OS to disable watchdog timeouts. Defaults to the
          machine type setting.
        type: FeatureState
        required: false
      reset:
        description: >-
          Reset enables Hyperv reboot/reset for the vmi. Requires synic. Defaults to the
          machine type setting.
        type: FeatureState
        required: false
      runtime:
        description: >-
          Runtime improves the time accounting to improve scheduling in the guest.
          Defaults to the machine type setting.
        type: FeatureState
        required: false
      spinlocks:
        description: >-
          Spinlocks allows to configure the spinlock retry attempts.
        type: FeatureSpinlocks
        required: false
      synic:
        description: >-
          SyNIC enables the Synthetic Interrupt Controller. Defaults to the machine type
          setting.
        type: FeatureState
        required: false
      synictimer:
        description: >-
          SyNICTimer enables Synthetic Interrupt Controller Timers, reducing CPU load.
          Defaults to the machine type setting.
        type: SyNICTimer
        required: false
      tlbflush:
        description: >-
          TLBFlush improves performances in overcommited environments. Requires vpindex.
          Defaults to the machine type setting.
        type: FeatureState
        required: false
      vapic:
        description: >-
          VAPIC improves the paravirtualized handling of interrupts. Defaults to the
          machine type setting.
        type: FeatureState
        required: false
      vendorid:
        description: >-
          VendorID allows setting the hypervisor vendor id. Defaults to the machine type
          setting.
        type: FeatureVendorID
        required: false
      vpindex:
        description: >-
          VPIndex enables the Virtual Processor Index to help windows identifying virtual
          processors. Defaults to the machine type setting.
        type: FeatureState
        required: false

  FeatureKVM:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      hidden:
        description: >-
          Hide the KVM hypervisor from standard MSR based discovery. Defaults to false
        type: boolean
        required: false

  FeatureSpinlocks:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      enabled:
        description: >-
          Enabled determines if the feature should be enabled or disabled on the guest.
          Defaults to true.
        type: boolean
        required: false
      spinlocks:
        description: >-
          Retries indicates the number of retries. Must be a value greater or equal 4096.
          Defaults to 4096.
        type: integer
        required: false

  FeatureState:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents if a feature is enabled or disabled.
    properties:
      enabled:
        description: >-
          Enabled determines if the feature should be enabled or disabled on the guest.
          Defaults to true.
        type: boolean
        required: false

  FeatureVendorID:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      enabled:
        description: >-
          Enabled determines if the feature should be enabled or disabled on the guest.
          Defaults to true.
        type: boolean
        required: false
      vendorid:
        description: >-
          VendorID sets the hypervisor vendor id, visible to the vmi. String up to twelve
          characters.
        type: string
        required: false

  Features:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      acpi:
        description: >-
          ACPI enables/disables ACPI inside the guest. Defaults to enabled.
        type: FeatureState
        required: false
      apic:
        description: >-
          Defaults to the machine type setting.
        type: FeatureAPIC
        required: false
      hyperv:
        description: >-
          Defaults to the machine type setting.
        type: FeatureHyperv
        required: false
      kvm:
        description: >-
          Configure how KVM presence is exposed to the guest.
        type: FeatureKVM
        required: false
      pvspinlock:
        description: >-
          Notify the guest that the host supports paravirtual spinlocks. For older kernels
          this feature should be explicitly disabled.
        type: FeatureState
        required: false
      smm:
        description: >-
          SMM enables/disables System Management Mode. TSEG not yet implemented.
        type: FeatureState
        required: false

  FieldsV1:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

      Each key is either a '.' representing the field itself, and will always map to
      an empty set, or a string representing a sub-field or item. The string will
      follow one of these four formats: 'f:<name>', where <name> is the name of a
      field in a struct, or key in a map 'v:<value>', where <value> is the exact json
      formatted value of a list item 'i:<index>', where <index> is position of a item
      in a list 'k:<keys>', where <keys> is a map of a list item's key fields to their
      unique values If a key maps to an empty Fields value, the field that key
      represents is part of the set.

      The exact format is defined in sigs.k8s.io/structured-merge-diff

  Filesystem:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      name:
        description: >-
          Name is the device name
        type: string
      virtiofs:
        description: >-
          Virtiofs is supported
        type: FilesystemVirtiofs

  FilesystemVirtiofs:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1

  Firmware:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      bootloader:
        description: >-
          Settings to control the bootloader that is used.
        type: Bootloader
        required: false
      kernelBoot:
        description: >-
          Settings to set the kernel for booting.
        type: KernelBoot
        required: false
      serial:
        description: >-
          The system-serial-number in SMBIOS
        type: string
        required: false
      uuid:
        description: >-
          UUID reported by the vmi bios. Defaults to a random generated uid.
        type: string
        required: false

  Flags:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Flags will create a patch that will replace all flags for the container's
      command field. The only flags that will be used are those define. There are no
      guarantees around forward/backward compatibility. If set incorrectly this will
      cause the resource when rolled out to error until flags are updated.
    properties:
      api:
        type: map
        entry_schema: string
        required: false
      controller:
        type: map
        entry_schema: string
        required: false
      handler:
        type: map
        entry_schema: string
        required: false

  FloppyTarget:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      readonly:
        description: >-
          ReadOnly. Defaults to false.
        type: boolean
        required: false
      tray:
        description: >-
          Tray indicates if the tray of the device is open or closed. Allowed values are
          "open" and "closed". Defaults to closed.
        type: string
        required: false

  GPU:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      deviceName:
        type: string
      name:
        description: >-
          Name of the GPU device as exposed by a device plugin
        type: string

  GenerationStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      GenerationStatus keeps track of the generation for a given resource so that
      decisions about forced updates can be made.
    properties:
      group:
        description: >-
          group is the group of the thing you're tracking
        type: string
      hash:
        description: >-
          hash is an optional field set for resources without generation that are content
          sensitive like secrets and configmaps
        type: string
        required: false
      lastGeneration:
        description: >-
          lastGeneration is the last generation of the workload controller involved
        type: integer
      name:
        description: >-
          name is the name of the thing you're tracking
        type: string
      namespace:
        description: >-
          namespace is where the thing you're tracking is
        type: string
        required: false
      resource:
        description: >-
          resource is the resource type of the thing you're tracking
        type: string

  GroupVersionForDiscovery:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      GroupVersion contains the "group/version" and "version" string of a version. It
      is made a struct to keep extensibility.
    properties:
      groupVersion:
        description: >-
          groupVersion specifies the API group and version in the form "group/version"
        type: string
      version:
        description: >-
          version specifies the version in the form of "version". This is to save the
          clients the trouble of splitting the GroupVersion.
        type: string

  GuestAgentCommandInfo:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      List of commands that QEMU guest agent supports
    properties:
      enabled:
        type: boolean
        required: false
      name:
        type: string

  GuestAgentPing:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      GuestAgentPing configures the guest-agent based ping probe

  HPETTimer:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      present:
        description: >-
          Enabled set to false makes sure that the machine type or a preset can't add the
          timer. Defaults to true.
        type: boolean
        required: false
      tickPolicy:
        description: >-
          TickPolicy determines what happens when QEMU misses a deadline for injecting a
          tick to the guest. One of "delay", "catchup", "merge", "discard".
        type: string
        required: false

  HostDevice:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      deviceName:
        description: >-
          DeviceName is the resource name of the host device exposed by a device plugin
        type: string
      name:
        type: string

  HostDisk:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents a disk created on the cluster level
    properties:
      capacity:
        description: >-
          Capacity of the sparse disk
        type: Quantity
        required: false
      path:
        description: >-
          The path to HostDisk image located on the cluster
        type: string
      shared:
        description: >-
          Shared indicate whether the path is shared between nodes
        type: boolean
        required: false
      type:
        description: >-
          Contains information if disk.img exists or should be created allowed options are
          'Disk' and 'DiskOrCreate'
        type: string

  HotplugVolumeSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      HotplugVolumeSource Represents the source of a volume to mount which are capable
      of being hotplugged on a live running VMI. Only one of its members may be
      specified.
    properties:
      dataVolume:
        description: >-
          DataVolume represents the dynamic creation a PVC for this volume as well as the
          process of populating that PVC with a disk image.
        type: DataVolumeSource
        required: false
      persistentVolumeClaim:
        description: >-
          PersistentVolumeClaimVolumeSource represents a reference to a
          PersistentVolumeClaim in the same namespace. Directly attached to the vmi via
          qemu. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: k8s:PersistentVolumeClaimVolumeSource
        required: false

  HotplugVolumeStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      HotplugVolumeStatus represents the hotplug status of the volume
    properties:
      attachPodName:
        description: >-
          AttachPodName is the name of the pod used to attach the volume to the node.
        type: string
        required: false
      attachPodUID:
        description: >-
          AttachPodUID is the UID of the pod used to attach the volume to the node.
        type: string
        required: false

  Hugepages:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Hugepages allow to use hugepages for the VirtualMachineInstance instead of
      regular memory.
    properties:
      pageSize:
        description: >-
          PageSize specifies the hugepage size, for x86_64 architecture valid values are
          1Gi and 2Mi.
        type: string
        required: false

  HypervTimer:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      present:
        description: >-
          Enabled set to false makes sure that the machine type or a preset can't add the
          timer. Defaults to true.
        type: boolean
        required: false

  I6300ESBWatchdog:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      i6300esb watchdog device.
    properties:
      action:
        description: >-
          The action to take. Valid values are poweroff, reset, shutdown. Defaults to
          reset.
        type: string
        required: false

  Input:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      bus:
        description: >-
          Bus indicates the bus of input device to emulate. Supported values: virtio, usb.
        type: string
        required: false
      name:
        description: >-
          Name is the device name
        type: string
      type:
        description: >-
          Type indicated the type of input device. Supported values: tablet.
        type: string

  IntOrString:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      IntOrString is a type that can hold an int32 or a string. When used in JSON or
      YAML marshalling and unmarshalling, it produces or consumes the inner type. This
      allows you to have, for example, a JSON field that can accept a name or number.

  Interface:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      bootOrder:
        description: >-
          BootOrder is an integer value > 0, used to determine ordering of boot devices.
          Lower values take precedence. Each interface or disk that has a boot order must
          have a unique value. Interfaces without a boot order are not tried.
        type: integer
        required: false
      bridge:
        type: InterfaceBridge
        required: false
      dhcpOptions:
        description: >-
          If specified the network interface will pass additional DHCP options to the VMI
        type: DHCPOptions
        required: false
      macAddress:
        description: >-
          Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
        type: string
        required: false
      macvtap:
        type: InterfaceMacvtap
        required: false
      masquerade:
        type: InterfaceMasquerade
        required: false
      model:
        description: >-
          Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio.
          Defaults to virtio.
        type: string
        required: false
      name:
        description: >-
          Logical name of the interface as well as a reference to the associated networks.
          Must match the Name of a Network.
        type: string
      pciAddress:
        description: >-
          If specified, the virtual network interface will be placed on the guests pci
          address with the specified PCI address. For example: 0000:81:01.10
        type: string
        required: false
      ports:
        description: >-
          List of ports to be forwarded to the virtual machine.
        type: list
        entry_schema: Port
        required: false
      slirp:
        type: InterfaceSlirp
        required: false
      sriov:
        type: InterfaceSRIOV
        required: false
      tag:
        description: >-
          If specified, the virtual network interface address and its tag will be provided
          to the guest via config drive
        type: string
        required: false

  InterfaceBridge:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1

  InterfaceMacvtap:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1

  InterfaceMasquerade:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1

  InterfaceSRIOV:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1

  InterfaceSlirp:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1

  KVMTimer:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      present:
        description: >-
          Enabled set to false makes sure that the machine type or a preset can't add the
          timer. Defaults to true.
        type: boolean
        required: false

  KernelBoot:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents the firmware blob used to assist in the kernel boot process. Used for
      setting the kernel, initrd and command line arguments
    properties:
      container:
        description: >-
          Container defines the container that containes kernel artifacts
        type: KernelBootContainer
        required: false
      kernelArgs:
        description: >-
          Arguments to be passed to the kernel at boot time
        type: string
        required: false

  KernelBootContainer:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      If set, the VM will be booted from the defined kernel / initrd.
    properties:
      image:
        description: >-
          Image that container initrd / kernel files.
        type: string
      imagePullPolicy:
        description: >-
          Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if
          :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More
          info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        type: string
        required: false
      imagePullSecret:
        description: >-
          ImagePullSecret is the name of the Docker registry secret required to pull the
          image. The secret must already exist.
        type: string
        required: false
      initrdPath:
        description: >-
          the fully-qualified path to the ramdisk image in the host OS
        type: string
        required: false
      kernelPath:
        description: >-
          The fully-qualified path to the kernel image in the host OS
        type: string
        required: false

  KubeVirtCertificateRotateStrategy:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      selfSigned:
        type: KubeVirtSelfSignConfiguration
        required: false

  KubeVirtCondition:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      KubeVirtCondition represents a condition of a KubeVirt deployment
    properties:
      lastProbeTime:
        type: string
        required: false
      lastTransitionTime:
        type: string
        required: false
      message:
        type: string
        required: false
      reason:
        type: string
        required: false
      status:
        type: string
      type:
        type: string

  KubeVirtConfiguration:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      KubeVirtConfiguration holds all kubevirt configurations
    properties:
      cpuModel:
        type: string
        required: false
      cpuRequest:
        type: Quantity
        required: false
      defaultRuntimeClass:
        type: string
        required: false
      developerConfiguration:
        type: DeveloperConfiguration
        required: false
      emulatedMachines:
        type: list
        entry_schema: string
        required: false
      imagePullPolicy:
        type: string
        required: false
      machineType:
        type: string
        required: false
      memBalloonStatsPeriod:
        type: integer
        required: false
      migrations:
        type: MigrationConfiguration
        required: false
      minCPUModel:
        type: string
        required: false
      network:
        type: NetworkConfiguration
        required: false
      obsoleteCPUModels:
        type: map
        entry_schema: boolean
        required: false
      ovmfPath:
        type: string
        required: false
      permittedHostDevices:
        type: PermittedHostDevices
        required: false
      selinuxLauncherType:
        type: string
        required: false
      smbios:
        type: SMBiosConfiguration
        required: false
      supportedGuestAgentVersions:
        description: >-
          deprecated
        type: list
        entry_schema: string
        required: false
      virtualMachineInstancesPerNode:
        type: integer
        required: false

  KubeVirtSelfSignConfiguration:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      ca:
        description: >-
          CA configuration CA certs are kept in the CA bundle as long as they are valid
        type: CertConfig
        required: false
      caOverlapInterval:
        description: >-
          Deprecated. Use CA.Duration and CA.RenewBefore instead
        type: Duration
        required: false
      caRotateInterval:
        description: >-
          Deprecated. Use CA.Duration instead
        type: Duration
        required: false
      certRotateInterval:
        description: >-
          Deprecated. Use Server.Duration instead
        type: Duration
        required: false
      server:
        description: >-
          Server configuration Certs are rotated and discarded
        type: CertConfig
        required: false

  KubeVirtSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      certificateRotateStrategy:
        type: KubeVirtCertificateRotateStrategy
        required: false
      configuration:
        description: >-
          holds kubevirt configurations. same as the virt-configMap
        type: KubeVirtConfiguration
        required: false
      customizeComponents:
        type: CustomizeComponents
        required: false
      imagePullPolicy:
        description: >-
          The ImagePullPolicy to use.
        type: string
        required: false
      imageRegistry:
        description: >-
          The image registry to pull the container images from Defaults to the same
          registry the operator's container image is pulled from.
        type: string
        required: false
      imageTag:
        description: >-
          The image tag to use for the continer images installed. Defaults to the same tag
          as the operator's container image.
        type: string
        required: false
      infra:
        description: >-
          selectors and tolerations that should apply to KubeVirt infrastructure
          components
        type: ComponentConfig
        required: false
      monitorAccount:
        description: >-
          The name of the Prometheus service account that needs read-access to KubeVirt
          endpoints Defaults to prometheus-k8s
        type: string
        required: false
      monitorNamespace:
        description: >-
          The namespace Prometheus is deployed in Defaults to openshift-monitor
        type: string
        required: false
      productName:
        description: >-
          Designate the apps.kubevirt.io/part-of label for KubeVirt components. Useful if
          KubeVirt is included as part of a product. If ProductName is not specified, the
          part-of label will be omitted.
        type: string
        required: false
      productVersion:
        description: >-
          Designate the apps.kubevirt.io/version label for KubeVirt components. Useful if
          KubeVirt is included as part of a product. If ProductVersion is not specified,
          KubeVirt's version will be used.
        type: string
        required: false
      uninstallStrategy:
        description: >-
          Specifies if kubevirt can be deleted if workloads are still present. This is
          mainly a precaution to avoid accidental data loss
        type: string
        required: false
      workloadUpdateStrategy:
        description: >-
          WorkloadUpdateStrategy defines at the cluster level how to handle automated
          workload updates
        type: KubeVirtWorkloadUpdateStrategy
        required: false
      workloads:
        description: >-
          selectors and tolerations that should apply to KubeVirt workloads
        type: ComponentConfig
        required: false

  KubeVirtStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      KubeVirtStatus represents information pertaining to a KubeVirt deployment.
    properties:
      conditions:
        type: list
        entry_schema: KubeVirtCondition
        required: false
      generations:
        type: list
        entry_schema: GenerationStatus
        required: false
      observedDeploymentConfig:
        type: string
        required: false
      observedDeploymentID:
        type: string
        required: false
      observedKubeVirtRegistry:
        type: string
        required: false
      observedKubeVirtVersion:
        type: string
        required: false
      operatorVersion:
        type: string
        required: false
      outdatedVirtualMachineInstanceWorkloads:
        type: integer
        required: false
      phase:
        type: string
        required: false
      targetDeploymentConfig:
        type: string
        required: false
      targetDeploymentID:
        type: string
        required: false
      targetKubeVirtRegistry:
        type: string
        required: false
      targetKubeVirtVersion:
        type: string
        required: false

  KubeVirtWorkloadUpdateStrategy:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      KubeVirtWorkloadUpdateStrategy defines options related to updating a KubeVirt
      install
    properties:
      batchEvictionInterval:
        description: >-
          BatchEvictionInterval Represents the interval to wait before issuing the next
          batch of shutdowns

          Defaults to 1 minute
        type: Duration
        required: false
      batchEvictionSize:
        description: >-
          BatchEvictionSize Represents the number of VMIs that can be forced updated per
          the BatchShutdownInteral interval

          Defaults to 10
        type: integer
        required: false
      workloadUpdateMethods:
        description: >-
          WorkloadUpdateMethods defines the methods that can be used to disrupt workloads
          during automated workload updates. When multiple methods are present, the least
          disruptive method takes precedence over more disruptive methods. For example if
          both LiveMigrate and Shutdown methods are listed, only VMs which are not live
          migratable will be restarted/shutdown

          An empty list defaults to no automated workload updating
        type: list
        entry_schema: string
        required: false

  LabelSelector:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      A label selector is a label query over a set of resources. The result of
      matchLabels and matchExpressions are ANDed. An empty label selector matches all
      objects. A null label selector matches no objects.
    properties:
      matchExpressions:
        description: >-
          matchExpressions is a list of label selector requirements. The requirements are
          ANDed.
        type: list
        entry_schema: LabelSelectorRequirement
        required: false
      matchLabels:
        description: >-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the
          matchLabels map is equivalent to an element of matchExpressions, whose key field
          is "key", the operator is "In", and the values array contains only "value". The
          requirements are ANDed.
        type: map
        entry_schema: string
        required: false

  LabelSelectorRequirement:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      A label selector requirement is a selector that contains values, a key, and an
      operator that relates the key and values.
    properties:
      key:
        description: >-
          key is the label key that the selector applies to.
        type: string
      operator:
        description: >-
          operator represents a key's relationship to a set of values. Valid operators are
          In, NotIn, Exists and DoesNotExist.
        type: string
      values:
        description: >-
          values is an array of string values. If the operator is In or NotIn, the values
          array must be non-empty. If the operator is Exists or DoesNotExist, the values
          array must be empty. This array is replaced during a strategic merge patch.
        type: list
        entry_schema: string
        required: false

  ListMeta:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      ListMeta describes metadata that synthetic resources must have, including lists
      and various status objects. A resource may have only one of {ObjectMeta,
      ListMeta}.
    properties:
      continue:
        description: >-
          continue may be set if the user set a limit on the number of items returned, and
          indicates that the server has more data available. The value is opaque and may
          be used to issue another request to the endpoint that served this list to
          retrieve the next set of available objects. Continuing a consistent list may not
          be possible if the server configuration has changed or more than a few minutes
          have passed. The resourceVersion field returned when using this continue value
          will be identical to the value in the first response, unless you have received
          this token from an error message.
        type: string
        required: false
      remainingItemCount:
        description: >-
          remainingItemCount is the number of subsequent items in the list which are not
          included in this list response. If the list request contained label or field
          selectors, then the number of remaining items is unknown and the field will be
          left unset and omitted during serialization. If the list is complete (either
          because it is not chunking or because this is the last chunk), then there are no
          more remaining items and this field will be left unset and omitted during
          serialization. Servers older than v1.15 do not set this field. The intended use
          of the remainingItemCount is *estimating* the size of a collection. Clients
          should not rely on the remainingItemCount to be set or to be exact.
        type: integer
        required: false
      resourceVersion:
        description: >-
          String that identifies the server's internal version of this object that can be
          used by clients to determine when objects have changed. Value must be treated as
          opaque by clients and passed unmodified back to the server. Populated by the
          system. Read-only. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        type: string
        required: false
      selfLink:
        description: >-
          selfLink is a URL representing this object. Populated by the system. Read-only.

          DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the
          field is planned to be removed in 1.21 release.
        type: string
        required: false

  LogVerbosity:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      LogVerbosity sets log verbosity level of various components
    properties:
      nodeVerbosity:
        description: >-
          NodeVerbosity represents a map of nodes with a specific verbosity level
        type: map
        entry_schema: integer
        required: false
      virtAPI:
        type: integer
        required: false
      virtController:
        type: integer
        required: false
      virtHandler:
        type: integer
        required: false
      virtLauncher:
        type: integer
        required: false
      virtOperator:
        type: integer
        required: false

  LunTarget:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      bus:
        description: >-
          Bus indicates the type of disk device to emulate. supported values: virtio,
          sata, scsi.
        type: string
        required: false
      readonly:
        description: >-
          ReadOnly. Defaults to false.
        type: boolean
        required: false

  Machine:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      type:
        description: >-
          QEMU machine type is the actual chipset of the VirtualMachineInstance.
        type: string
        required: false

  ManagedFieldsEntry:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the
      resource that the fieldset applies to.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the version of this resource that this field set applies to.
          The format is "group/version" just like the top-level APIVersion field. It is
          necessary to track the version of a field set because it cannot be automatically
          converted.
        type: string
        required: false
      fieldsType:
        description: >-
          FieldsType is the discriminator for the different fields format and version.
          There is currently only one possible value: "FieldsV1"
        type: string
        required: false
      fieldsV1:
        description: >-
          FieldsV1 holds the first JSON version format as described in the "FieldsV1"
          type.
        type: FieldsV1
        required: false
      manager:
        description: >-
          Manager is an identifier of the workflow managing these fields.
        type: string
        required: false
      operation:
        description: >-
          Operation is the type of operation which lead to this ManagedFieldsEntry being
          created. The only valid values for this field are 'Apply' and 'Update'.
        type: string
        required: false
      time:
        description: >-
          Time is timestamp of when these fields were set. It should always be empty if
          Operation is 'Apply'
        type: Time
        required: false

  MediatedHostDevice:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      MediatedHostDevice represents a host mediated device allowed for passthrough
    properties:
      externalResourceProvider:
        type: boolean
        required: false
      mdevNameSelector:
        type: string
      resourceName:
        type: string

  Memory:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Memory allows specifying the VirtualMachineInstance memory features.
    properties:
      guest:
        description: >-
          Guest allows to specifying the amount of memory which is visible inside the
          Guest OS. The Guest must lie between Requests and Limits from the resources
          section. Defaults to the requested memory in the resources section if not
          specified.
        type: Quantity
        required: false
      hugepages:
        description: >-
          Hugepages allow to use hugepages for the VirtualMachineInstance instead of
          regular memory.
        type: Hugepages
        required: false

  MigrationConfiguration:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      MigrationConfiguration holds migration options
    properties:
      allowAutoConverge:
        type: boolean
        required: false
      allowPostCopy:
        type: boolean
        required: false
      bandwidthPerMigration:
        type: Quantity
        required: false
      completionTimeoutPerGiB:
        type: integer
        required: false
      disableTLS:
        type: boolean
        required: false
      nodeDrainTaintKey:
        type: string
        required: false
      parallelMigrationsPerCluster:
        type: integer
        required: false
      parallelOutboundMigrationsPerNode:
        type: integer
        required: false
      progressTimeout:
        type: integer
        required: false
      unsafeMigrationOverride:
        type: boolean
        required: false

  MultusNetwork:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents the multus cni network.
    properties:
      default:
        description: >-
          Select the default network and add it to the multus-cni.io/default-network
          annotation.
        type: boolean
        required: false
      networkName:
        description: >-
          References to a NetworkAttachmentDefinition CRD object. Format: <networkName>,
          <namespace>/<networkName>. If namespace is not specified, VMI namespace is
          assumed.
        type: string

  NUMA:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      guestMappingPassthrough:
        description: >-
          GuestMappingPassthrough will create an efficient guest topology based on host
          CPUs exclusively assigned to a pod. The created topology ensures that memory and
          CPUs on the virtual numa nodes never cross boundaries of host numa nodes.
        type: NUMAGuestMappingPassthrough
        required: false

  NUMAGuestMappingPassthrough:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      NUMAGuestMappingPassthrough instructs kubevirt to model numa topology which is
      compatible with the CPU pinning on the guest. This will result in a subset of
      the node numa topology being passed through, ensuring that virtual numa nodes
      and their memory never cross boundaries coming from the node numa mapping.

  Network:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Network represents a network type and a resource that should be connected to the
      vm.
    properties:
      multus:
        type: MultusNetwork
        required: false
      name:
        description: >-
          Network name. Must be a DNS_LABEL and unique within the vm. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
      pod:
        type: PodNetwork
        required: false

  NetworkConfiguration:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      NetworkConfiguration holds network options
    properties:
      defaultNetworkInterface:
        type: string
        required: false
      permitBridgeInterfaceOnPodNetwork:
        type: boolean
        required: false
      permitSlirpInterface:
        type: boolean
        required: false

  NodePlacement:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      NodePlacement describes node scheduling configuration.
    properties:
      affinity:
        description: >-
          affinity enables pod affinity/anti-affinity placement expanding the types of
          constraints that can be expressed with nodeSelector. affinity is going to be
          applied to the relevant kind of pods in parallel with nodeSelector See
          https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
        type: k8s:Affinity
        required: false
      nodeSelector:
        description: >-
          nodeSelector is the node selector applied to the relevant kind of pods It
          specifies a map of key-value pairs: for the pod to be eligible to run on a node,
          the node must have each of the indicated key-value pairs as labels (it can have
          additional labels as well). See
          https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
        type: map
        entry_schema: string
        required: false
      tolerations:
        description: >-
          tolerations is a list of tolerations applied to the relevant kind of pods See
          https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more
          info. These are additional tolerations other than default ones.
        type: list
        entry_schema: k8s:Toleration
        required: false

  ObjectMeta:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      ObjectMeta is metadata that all persisted resources must have, which includes
      all objects users must create.
    properties:
      annotations:
        description: >-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects. More info:
          http://kubernetes.io/docs/user-guide/annotations
        type: map
        entry_schema: string
        required: false
      clusterName:
        description: >-
          The name of the cluster which the object belongs to. This is used to distinguish
          resources with same name and namespace in different clusters. This field is not
          set anywhere right now and apiserver is going to ignore it if set in create or
          update request.
        type: string
        required: false
      creationTimestamp:
        description: >-
          CreationTimestamp is a timestamp representing the server time when this object
          was created. It is not guaranteed to be set in happens-before order across
          separate operations. Clients may not set this value. It is represented in
          RFC3339 form and is in UTC.

          Populated by the system. Read-only. Null for lists. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        type: string
        required: false
      deletionGracePeriodSeconds:
        description: >-
          Number of seconds allowed for this object to gracefully terminate before it will
          be removed from the system. Only set when deletionTimestamp is also set. May
          only be shortened. Read-only.
        type: integer
        required: false
      deletionTimestamp:
        description: >-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be
          deleted. This field is set by the server when a graceful deletion is requested
          by the user, and is not directly settable by a client. The resource is expected
          to be deleted (no longer visible from resource lists, and not reachable by name)
          after the time in this field, once the finalizers list is empty. As long as the
          finalizers list contains items, deletion is blocked. Once the deletionTimestamp
          is set, this value may not be unset or be set further into the future, although
          it may be shortened or the resource may be deleted prior to this time. For
          example, a user may request that a pod is deleted in 30 seconds. The Kubelet
          will react by sending a graceful termination signal to the containers in the
          pod. After that 30 seconds, the Kubelet will send a hard termination signal
          (SIGKILL) to the container and after cleanup, remove the pod from the API. In
          the presence of network partitions, this object may still exist after this
          timestamp, until an administrator or automated process can determine the
          resource is fully terminated. If not set, graceful deletion of the object has
          not been requested.

          Populated by the system when a graceful deletion is requested. Read-only. More
          info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        type: Time
        required: false
      finalizers:
        description: >-
          Must be empty before the object is deleted from the registry. Each entry is an
          identifier for the responsible component that will remove the entry from the
          list. If the deletionTimestamp of the object is non-nil, entries in this list
          can only be removed. Finalizers may be processed and removed in any order. Order
          is NOT enforced because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it. If the
          finalizer list is processed in order, then this can lead to a situation in which
          the component responsible for the first finalizer in the list is waiting for a
          signal (field value, external system, or other) produced by a component
          responsible for a finalizer later in the list, resulting in a deadlock. Without
          enforced ordering finalizers are free to order amongst themselves and are not
          vulnerable to ordering changes in the list.
        type: list
        entry_schema: string
        required: false
      generateName:
        description: >-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided. If this field is used, the
          name returned to the client will be different than the name passed. This value
          will also be combined with a unique suffix. The provided value has the same
          validation rules as the Name field, and may be truncated by the length of the
          suffix required to make the value unique on the server.

          If this field is specified and the generated name exists, the server will NOT
          return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted,
          and the client should retry (optionally after the time indicated in the
          Retry-After header).

          Applied only if Name is not specified. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        type: string
        required: false
      generation:
        description: >-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
        type: integer
        required: false
      labels:
        description: >-
          Map of string keys and values that can be used to organize and categorize (scope
          and select) objects. May match selectors of replication controllers and
          services. More info: http://kubernetes.io/docs/user-guide/labels
        type: map
        entry_schema: string
        required: false
      managedFields:
        description: >-
          ManagedFields maps workflow-id and version to the set of fields that are managed
          by that workflow. This is mostly for internal housekeeping, and users typically
          shouldn't need to set or understand this field. A workflow can be the user's
          name, a controller's name, or the name of a specific apply path like "ci-cd".
          The set of fields is always in the version that the workflow used when modifying
          the object.
        type: list
        entry_schema: ManagedFieldsEntry
        required: false
      name:
        description: >-
          Name must be unique within a namespace. Is required when creating resources,
          although some resources may allow a client to request the generation of an
          appropriate name automatically. Name is primarily intended for creation
          idempotence and configuration definition. Cannot be updated. More info:
          http://kubernetes.io/docs/user-guide/identifiers#names
        type: string
        required: false
      namespace:
        description: >-
          Namespace defines the space within which each name must be unique. An empty
          namespace is equivalent to the "default" namespace, but "default" is the
          canonical representation. Not all objects are required to be scoped to a
          namespace - the value of this field for those objects will be empty.

          Must be a DNS_LABEL. Cannot be updated. More info:
          http://kubernetes.io/docs/user-guide/namespaces
        type: string
        required: false
      ownerReferences:
        description: >-
          List of objects depended by this object. If ALL objects in the list have been
          deleted, this object will be garbage collected. If this object is managed by a
          controller, then an entry in this list will point to this controller, with the
          controller field set to true. There cannot be more than one managing controller.
        type: list
        entry_schema: OwnerReference
        required: false
      resourceVersion:
        description: >-
          An opaque value that represents the internal version of this object that can be
          used by clients to determine when objects have changed. May be used for
          optimistic concurrency, change detection, and the watch operation on a resource
          or set of resources. Clients must treat these values as opaque and passed
          unmodified back to the server. They may only be valid for a particular resource
          or set of resources.

          Populated by the system. Read-only. Value must be treated as opaque by clients
          and . More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        type: string
        required: false
      selfLink:
        description: >-
          SelfLink is a URL representing this object. Populated by the system. Read-only.

          DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the
          field is planned to be removed in 1.21 release.
        type: string
        required: false
      uid:
        description: >-
          UID is the unique in time and space value for this object. It is typically
          generated by the server on successful creation of a resource and is not allowed
          to change on PUT operations.

          Populated by the system. Read-only. More info:
          http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string
        required: false

  OwnerReference:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      OwnerReference contains enough information to let you identify an owning object.
      An owning object must be in the same namespace as the dependent, or be
      cluster-scoped, so there is no namespace field.
    properties:
      apiVersion:
        description: >-
          API version of the referent.
        type: string
      blockOwnerDeletion:
        description: >-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner
          cannot be deleted from the key-value store until this reference is removed.
          Defaults to false. To set this field, a user needs "delete" permission of the
          owner, otherwise 422 (Unprocessable Entity) will be returned.
        type: boolean
        required: false
      controller:
        description: >-
          If true, this reference points to the managing controller.
        type: boolean
        required: false
      kind:
        description: >-
          Kind of the referent. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
      name:
        description: >-
          Name of the referent. More info:
          http://kubernetes.io/docs/user-guide/identifiers#names
        type: string
      uid:
        description: >-
          UID of the referent. More info:
          http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string

  PITTimer:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      present:
        description: >-
          Enabled set to false makes sure that the machine type or a preset can't add the
          timer. Defaults to true.
        type: boolean
        required: false
      tickPolicy:
        description: >-
          TickPolicy determines what happens when QEMU misses a deadline for injecting a
          tick to the guest. One of "delay", "catchup", "discard".
        type: string
        required: false

  Patch:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Patch is provided to give a concrete name and type to the Kubernetes PATCH
      request body.

  PciHostDevice:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      PciHostDevice represents a host PCI device allowed for passthrough
    properties:
      externalResourceProvider:
        description: >-
          If true, KubeVirt will leave the allocation and monitoring to an external device
          plugin
        type: boolean
        required: false
      pciVendorSelector:
        description: >-
          The vendor_id:product_id tupple of the PCI device
        type: string
      resourceName:
        description: >-
          The name of the resource that is representing the device. Exposed by a device
          plugin and requested by VMs. Typically of the form vendor.com/product_nameThe
          name of the resource that is representing the device. Exposed by a device plugin
          and requested by VMs. Typically of the form vendor.com/product_name
        type: string

  PermittedHostDevices:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      PermittedHostDevices holds inforamtion about devices allowed for passthrough
    properties:
      mediatedDevices:
        type: list
        entry_schema: MediatedHostDevice
        required: false
      pciHostDevices:
        type: list
        entry_schema: PciHostDevice
        required: false

  PersistentVolumeClaim:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      spec:
        description: >-
          Spec defines the desired characteristics of a volume requested by a pod author.
          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: k8s:PersistentVolumeClaimSpec
        required: false

  PodNetwork:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents the stock pod network interface.
    properties:
      vmIPv6NetworkCIDR:
        description: >-
          IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if not specified.
        type: string
        required: false
      vmNetworkCIDR:
        description: >-
          CIDR for vm network. Default 10.0.2.0/24 if not specified.
        type: string
        required: false

  Port:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Port repesents a port to expose from the virtual machine. Default protocol TCP.
      The port field is mandatory
    properties:
      name:
        description: >-
          If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
          named port in a pod must have a unique name. Name for the port that can be
          referred to by services.
        type: string
        required: false
      port:
        description: >-
          Number of port to expose for the virtual machine. This must be a valid port
          number, 0 < x < 65536.
        type: integer
      protocol:
        description: >-
          Protocol for port. Must be UDP or TCP. Defaults to "TCP".
        type: string
        required: false

  Preconditions:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Preconditions must be fulfilled before an operation (update, delete, etc.) is
      carried out.
    properties:
      resourceVersion:
        description: >-
          Specifies the target ResourceVersion
        type: string
        required: false
      uid:
        description: >-
          Specifies the target UID.
        type: string
        required: false

  Probe:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Probe describes a health check to be performed against a VirtualMachineInstance
      to determine whether it is alive or ready to receive traffic.
    properties:
      exec:
        description: >-
          One and only one of the following should be specified. Exec specifies the action
          to take, it will be executed on the guest through the qemu-guest-agent. If the
          guest agent is not available, this probe will fail.
        type: k8s:ExecAction
        required: false
      failureThreshold:
        description: >-
          Minimum consecutive failures for the probe to be considered failed after having
          succeeded. Defaults to 3. Minimum value is 1.
        type: integer
        required: false
      guestAgentPing:
        description: >-
          GuestAgentPing contacts the qemu-guest-agent for availability checks.
        type: GuestAgentPing
        required: false
      httpGet:
        description: >-
          HTTPGet specifies the http request to perform.
        type: k8s:HTTPGetAction
        required: false
      initialDelaySeconds:
        description: >-
          Number of seconds after the VirtualMachineInstance has started before liveness
          probes are initiated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        type: integer
        required: false
      periodSeconds:
        description: >-
          How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
          value is 1.
        type: integer
        required: false
      successThreshold:
        description: >-
          Minimum consecutive successes for the probe to be considered successful after
          having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
        type: integer
        required: false
      tcpSocket:
        description: >-
          TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        type: k8s:TCPSocketAction
        required: false
      timeoutSeconds:
        description: >-
          Number of seconds after which the probe times out. For exec probes the timeout
          fails the probe but does not terminate the command running on the guest. This
          means a blocking command can result in an increasing load on the guest. A small
          buffer will be added to the resulting workload exec probe to compensate for
          delays caused by the qemu guest exec mechanism. Defaults to 1 second. Minimum
          value is 1. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        type: integer
        required: false

  QemuGuestAgentSSHPublicKeyAccessCredentialPropagation:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      users:
        description: >-
          Users represents a list of guest users that should have the ssh public keys
          added to their authorized_keys file.
        type: list
        entry_schema: string

  QemuGuestAgentUserPasswordAccessCredentialPropagation:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1

  Quantity:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Quantity is a fixed-point representation of a number. It provides convenient
      marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64()
      accessors.

      The serialization format is:

      <quantity> ::= <signedNumber><suffix>
       (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
      <digit> ::= 0 | 1 | ... | 9 <digits> ::= <digit> | <digit><digits> <number> ::=
      <digits> | <digits>.<digits> | <digits>. | .<digits> <sign> ::= "+" | "-"
      <signedNumber> ::= <number> | <sign><number> <suffix> ::= <binarySI> |
      <decimalExponent> | <decimalSI> <binarySI> ::= Ki | Mi | Gi | Ti | Pi | Ei
       (International System of units; See:
      http://physics.nist.gov/cuu/Units/binary.html)
      <decimalSI> ::= m | "" | k | M | G | T | P | E
       (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

      No matter which of the three exponent forms is used, no quantity may represent a
      number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
      places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m
      will rounded up to 1m.) This may be extended in the future if we require larger
      or smaller quantities.

      When a Quantity is parsed from a string, it will remember the type of suffix it
      had, and will use the same type again when it is serialized.

      Before serializing, Quantity will be put in "canonical form". This means that
      Exponent/suffix will be adjusted up or down (with a corresponding increase or
      decrease in Mantissa) such that:
       a. No precision is lost
       b. No fractional digits will be emitted
       c. The exponent (or suffix) is as large as possible.
      The sign will be omitted unless the number is negative.

      Examples:
       1.5 will be serialized as "1500m"
       1.5Gi will be serialized as "1536Mi"

      Note that the quantity will NEVER be internally represented by a floating point
      number. That is the whole point of this exercise.

      Non-canonical values will still parse as long as they are well formed, but will
      be re-emitted in their canonical form. (So always use canonical form, or don't
      diff.)

      This format is intended to make it difficult to use these numbers without
      writing some sort of special handling code in the hopes that that will cause
      implementors to also use a fixed point implementation.

  RTCTimer:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      present:
        description: >-
          Enabled set to false makes sure that the machine type or a preset can't add the
          timer. Defaults to true.
        type: boolean
        required: false
      tickPolicy:
        description: >-
          TickPolicy determines what happens when QEMU misses a deadline for injecting a
          tick to the guest. One of "delay", "catchup".
        type: string
        required: false
      track:
        description: >-
          Track the guest or the wall clock.
        type: string
        required: false

  RawExtension:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      RawExtension is used to hold extensions in external versions.

      To use this, make a field which has RawExtension as its type in your external,
      versioned struct, and Object in your internal struct. You also need to register
      your various plugin types.

      // Internal package: type MyAPIObject struct {
      	runtime.TypeMeta `json:",inline"`
      	MyPlugin runtime.Object `json:"myPlugin"`
      } type PluginA struct {
      	AOption string `json:"aOption"`
      }

      // External package: type MyAPIObject struct {
      	runtime.TypeMeta `json:",inline"`
      	MyPlugin runtime.RawExtension `json:"myPlugin"`
      } type PluginA struct {
      	AOption string `json:"aOption"`
      }

      // On the wire, the JSON will look something like this: {
      	"kind":"MyAPIObject",
      	"apiVersion":"v1",
      	"myPlugin": {
       "kind":"PluginA",
       "aOption":"foo",
      	},
      }

      So what happens? Decode first uses json or yaml to unmarshal the serialized data
      into your external MyAPIObject. That causes the raw JSON to be stored, but not
      unpacked. The next step is to copy (using pkg/conversion) into the internal
      struct. The runtime package's DefaultScheme has conversion functions installed
      which will unpack the JSON stored in RawExtension, turning it into the correct
      object type, and storing it in the Object. (TODO: In the case where the object
      is of an unknown type, a runtime.Unknown object will be created and stored.)

  RemoveVolumeOptions:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      RemoveVolumeOptions is provided when dynamically hot unplugging volume and disk
    properties:
      name:
        description: >-
          Name represents the name that maps to both the disk and volume that should be
          removed
        type: string

  ResourceRequirements:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      limits:
        description: >-
          Limits describes the maximum amount of compute resources allowed. Valid resource
          keys are "memory" and "cpu".
        type: k8s:Any
        required: false
      overcommitGuestOverhead:
        description: >-
          Don't ask the scheduler to take the guest-management overhead into account.
          Instead put the overhead only into the container's memory limit. This can lead
          to crashes if all memory is in use on a node. Defaults to false.
        type: boolean
        required: false
      requests:
        description: >-
          Requests is a description of the initial vmi resources. Valid resource keys are
          "memory" and "cpu".
        type: k8s:Any
        required: false

  RestartOptions:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      RestartOptions may be provided when deleting an API object.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      gracePeriodSeconds:
        description: >-
          The duration in seconds before the object should be force-restared. Value must
          be non-negative integer. The value zero indicates, restart immediately. If this
          value is nil, the default grace period for deletion of the corresponding VMI for
          the specified type will be used to determine on how much time to give the VMI to
          restart. Defaults to a per object value if not specified. zero means restart
          immediately. Allowed Values: nil and 0
        type: integer
        required: false
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false

  Rng:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Rng represents the random device passed from host

  RootPaths:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      RootPaths lists the paths available at root. For example: "/healthz", "/apis".
    properties:
      paths:
        description: >-
          paths are the paths available at root.
        type: list
        entry_schema: string

  SMBiosConfiguration:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      family:
        type: string
        required: false
      manufacturer:
        type: string
        required: false
      product:
        type: string
        required: false
      sku:
        type: string
        required: false
      version:
        type: string
        required: false

  SSHPublicKeyAccessCredential:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      SSHPublicKeyAccessCredential represents a source and propagation method for
      injecting ssh public keys into a vm guest
    properties:
      propagationMethod:
        description: >-
          PropagationMethod represents how the public key is injected into the vm guest.
        type: SSHPublicKeyAccessCredentialPropagationMethod
      source:
        description: >-
          Source represents where the public keys are pulled from
        type: SSHPublicKeyAccessCredentialSource

  SSHPublicKeyAccessCredentialPropagationMethod:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      SSHPublicKeyAccessCredentialPropagationMethod represents the method used to
      inject a ssh public key into the vm guest. Only one of its members may be
      specified.
    properties:
      configDrive:
        description: >-
          ConfigDrivePropagation means that the ssh public keys are injected into the VM
          using metadata using the configDrive cloud-init provider
        type: ConfigDriveSSHPublicKeyAccessCredentialPropagation
        required: false
      qemuGuestAgent:
        description: >-
          QemuGuestAgentAccessCredentailPropagation means ssh public keys are dynamically
          injected into the vm at runtime via the qemu guest agent. This feature requires
          the qemu guest agent to be running within the guest.
        type: QemuGuestAgentSSHPublicKeyAccessCredentialPropagation
        required: false

  SSHPublicKeyAccessCredentialSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      SSHPublicKeyAccessCredentialSource represents where to retrieve the ssh key
      credentials Only one of its members may be specified.
    properties:
      secret:
        description: >-
          Secret means that the access credential is pulled from a kubernetes secret
        type: AccessCredentialSecretSource
        required: false

  SecretVolumeSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      SecretVolumeSource adapts a Secret into a volume.
    properties:
      optional:
        description: >-
          Specify whether the Secret or it's keys must be defined
        type: boolean
        required: false
      secretName:
        description: >-
          Name of the secret in the pod's namespace to use. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#secret
        type: string
        required: false
      volumeLabel:
        description: >-
          The volume label of the resulting disk inside the VMI. Different bootstrapping
          mechanisms require different values. Typical values are "cidata" (cloud-init),
          "config-2" (cloud-init) or "OEMDRV" (kickstart).
        type: string
        required: false

  ServerAddressByClientCIDR:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      ServerAddressByClientCIDR helps the client to determine the server address that
      they should use, depending on the clientCIDR that they match.
    properties:
      clientCIDR:
        description: >-
          The CIDR with which clients can match their IP to figure out the server address
          that they should use.
        type: string
      serverAddress:
        description: >-
          Address of this server, suitable for a client that matches the above CIDR. This
          can be a hostname, hostname:port, IP or IP:port.
        type: string

  ServiceAccountVolumeSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      ServiceAccountVolumeSource adapts a ServiceAccount into a volume.
    properties:
      serviceAccountName:
        description: >-
          Name of the service account in the pod's namespace to use. More info:
          https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
        type: string
        required: false

  SourceSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      SourceSpec contains the appropriate spec for the resource being snapshotted
    properties:
      virtualMachine:
        type: k8s:Any
        required: false

  StatusCause:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      StatusCause provides more information about an api.Status failure, including
      cases when multiple errors are encountered.
    properties:
      field:
        description: >-
          The field of the resource that has caused this error, as named by its JSON
          serialization. May include dot and postfix notation for nested attributes.
          Arrays are zero-indexed. Fields may appear more than once in an array of causes
          due to fields having multiple errors. Optional.

          Examples:
           "name" - the field "name" on the current resource
           "items[0].name" - the field "name" on the first array entry in "items"
        type: string
        required: false
      message:
        description: >-
          A human-readable description of the cause of the error. This field may be
          presented as-is to a reader.
        type: string
        required: false
      reason:
        description: >-
          A machine-readable description of the cause of the error. If this value is empty
          there is no information available.
        type: string
        required: false

  StatusDetails:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      StatusDetails is a set of additional properties that MAY be set by the server to
      provide additional information about a response. The Reason field of a Status
      object defines what attributes will be set. Clients must ignore fields that do
      not match the defined type of each attribute, and should assume that any
      attribute may be empty, invalid, or under defined.
    properties:
      causes:
        description: >-
          The Causes array includes more details associated with the StatusReason failure.
          Not all StatusReasons may provide detailed causes.
        type: list
        entry_schema: StatusCause
        required: false
      group:
        description: >-
          The group attribute of the resource associated with the status StatusReason.
        type: string
        required: false
      kind:
        description: >-
          The kind attribute of the resource associated with the status StatusReason. On
          some operations may differ from the requested resource Kind. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      name:
        description: >-
          The name attribute of the resource associated with the status StatusReason (when
          there is a single name which can be described).
        type: string
        required: false
      retryAfterSeconds:
        description: >-
          If specified, the time in seconds before the operation should be retried. Some
          errors may indicate the client must take an alternate action - for those errors
          this field may indicate how long to wait before taking the alternate action.
        type: integer
        required: false
      uid:
        description: >-
          UID of the resource. (when there is a single resource which can be described).
          More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string
        required: false

  StopOptions:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      StopOptions may be provided when deleting an API object.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      gracePeriod:
        description: >-
          this updates the VMIs terminationGracePeriodSeconds during shutdown
        type: integer
        required: false
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false

  StorageSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      StorageSpec defines the Storage type specification
    properties:
      accessModes:
        description: >-
          AccessModes contains the desired access modes the volume should have. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        type: list
        entry_schema: string
        required: false
      dataSource:
        description: >-
          This field can be used to specify either: * An existing VolumeSnapshot object
          (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC
          (PersistentVolumeClaim) * An existing custom resource that implements data
          population (Alpha) In order to use custom resource types that implement data
          population, the AnyVolumeDataSource feature gate must be enabled. If the
          provisioner or an external controller can support the specified data source, it
          will create a new volume based on the contents of the specified data source.
        type: k8s:TypedLocalObjectReference
        required: false
      resources:
        description: >-
          Resources represents the minimum resources the volume should have. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        type: k8s:ResourceRequirements
        required: false
      selector:
        description: >-
          A label query over volumes to consider for binding.
        type: LabelSelector
        required: false
      storageClassName:
        description: >-
          Name of the StorageClass required by the claim. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        type: string
        required: false
      volumeMode:
        description: >-
          volumeMode defines what type of volume is required by the claim. Value of
          Filesystem is implied when not included in claim spec.
        type: string
        required: false
      volumeName:
        description: >-
          VolumeName is the binding reference to the PersistentVolume backing this claim.
        type: string
        required: false

  SyNICTimer:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      direct:
        type: FeatureState
        required: false
      enabled:
        type: boolean
        required: false

  SysprepSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents a Sysprep volume source.
    properties:
      configMap:
        description: >-
          ConfigMap references a ConfigMap that contains Sysprep answer file named
          autounattend.xml that should be attached as disk of CDROM type.
        type: k8s:LocalObjectReference
        required: false
      secret:
        description: >-
          Secret references a k8s Secret that contains Sysprep answer file named
          autounattend.xml that should be attached as disk of CDROM type.
        type: k8s:LocalObjectReference
        required: false

  Time:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Time is a wrapper around time.Time which supports correct marshaling to YAML and
      JSON. Wrappers are provided for many of the factory methods that the time
      package offers.

  Timer:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Represents all available timers in a vmi.
    properties:
      hpet:
        description: >-
          HPET (High Precision Event Timer) - multiple timers with periodic interrupts.
        type: HPETTimer
        required: false
      hyperv:
        description: >-
          Hyperv (Hypervclock) - lets guests read the host’s wall clock time
          (paravirtualized). For windows guests.
        type: HypervTimer
        required: false
      kvm:
        description: >-
          KVM (KVM clock) - lets guests read the host’s wall clock time (paravirtualized).
          For linux guests.
        type: KVMTimer
        required: false
      pit:
        description: >-
          PIT (Programmable Interval Timer) - a timer with periodic interrupts.
        type: PITTimer
        required: false
      rtc:
        description: >-
          RTC (Real Time Clock) - a continuously running timer with periodic interrupts.
        type: RTCTimer
        required: false

  TopologyHints:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      tscFrequency:
        type: integer
        required: false

  UserPasswordAccessCredential:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      UserPasswordAccessCredential represents a source and propagation method for
      injecting user passwords into a vm guest Only one of its members may be
      specified.
    properties:
      propagationMethod:
        description: >-
          propagationMethod represents how the user passwords are injected into the vm
          guest.
        type: UserPasswordAccessCredentialPropagationMethod
      source:
        description: >-
          Source represents where the user passwords are pulled from
        type: UserPasswordAccessCredentialSource

  UserPasswordAccessCredentialPropagationMethod:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      UserPasswordAccessCredentialPropagationMethod represents the method used to
      inject a user passwords into the vm guest. Only one of its members may be
      specified.
    properties:
      qemuGuestAgent:
        description: >-
          QemuGuestAgentAccessCredentailPropagation means passwords are dynamically
          injected into the vm at runtime via the qemu guest agent. This feature requires
          the qemu guest agent to be running within the guest.
        type: QemuGuestAgentUserPasswordAccessCredentialPropagation
        required: false

  UserPasswordAccessCredentialSource:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      UserPasswordAccessCredentialSource represents where to retrieve the user
      password credentials Only one of its members may be specified.
    properties:
      secret:
        description: >-
          Secret means that the access credential is pulled from a kubernetes secret
        type: AccessCredentialSecretSource
        required: false

  VirtualMachineCondition:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineCondition represents the state of VirtualMachine
    properties:
      lastProbeTime:
        type: string
        required: false
      lastTransitionTime:
        type: string
        required: false
      message:
        type: string
        required: false
      reason:
        type: string
        required: false
      status:
        type: string
      type:
        type: string

  VirtualMachineInstanceCondition:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      lastProbeTime:
        type: string
        required: false
      lastTransitionTime:
        type: string
        required: false
      message:
        type: string
        required: false
      reason:
        type: string
        required: false
      status:
        type: string
      type:
        type: string

  VirtualMachineInstanceFileSystem:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineInstanceFileSystem represents guest os disk
    properties:
      diskName:
        type: string
      fileSystemType:
        type: string
      mountPoint:
        type: string
      totalBytes:
        type: integer
      usedBytes:
        type: integer

  VirtualMachineInstanceFileSystemInfo:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineInstanceFileSystemInfo represents information regarding single
      guest os filesystem
    properties:
      disks:
        type: list
        entry_schema: VirtualMachineInstanceFileSystem

  VirtualMachineInstanceGuestAgentInfo:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineInstanceGuestAgentInfo represents information from the installed
      guest agent
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      fsFreezeStatus:
        description: >-
          FSFreezeStatus is the state of the fs of the guest it can be either frozen or
          thawed
        type: string
        required: false
      fsInfo:
        description: >-
          FSInfo is a guest os filesystem information containing the disk mapping and disk
          mounts with usage
        type: VirtualMachineInstanceFileSystemInfo
        required: false
      guestAgentVersion:
        description: >-
          GAVersion is a version of currently installed guest agent
        type: string
        required: false
      hostname:
        description: >-
          Hostname represents FQDN of a guest
        type: string
        required: false
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      os:
        description: >-
          OS contains the guest operating system information
        type: VirtualMachineInstanceGuestOSInfo
        required: false
      supportedCommands:
        description: >-
          Return command list the guest agent supports
        type: list
        entry_schema: GuestAgentCommandInfo
        required: false
      timezone:
        description: >-
          Timezone is guest os current timezone
        type: string
        required: false
      userList:
        description: >-
          UserList is a list of active guest OS users
        type: list
        entry_schema: VirtualMachineInstanceGuestOSUser
        required: false

  VirtualMachineInstanceGuestOSInfo:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      id:
        description: >-
          Guest OS Id
        type: string
        required: false
      kernelRelease:
        description: >-
          Guest OS Kernel Release
        type: string
        required: false
      kernelVersion:
        description: >-
          Kernel version of the Guest OS
        type: string
        required: false
      machine:
        description: >-
          Machine type of the Guest OS
        type: string
        required: false
      name:
        description: >-
          Name of the Guest OS
        type: string
        required: false
      prettyName:
        description: >-
          Guest OS Pretty Name
        type: string
        required: false
      version:
        description: >-
          Guest OS Version
        type: string
        required: false
      versionId:
        description: >-
          Version ID of the Guest OS
        type: string
        required: false

  VirtualMachineInstanceGuestOSUser:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineGuestOSUser is the single user of the guest os
    properties:
      domain:
        type: string
        required: false
      loginTime:
        type: float
        required: false
      userName:
        type: string

  VirtualMachineInstanceMigrationCondition:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      lastProbeTime:
        type: string
        required: false
      lastTransitionTime:
        type: string
        required: false
      message:
        type: string
        required: false
      reason:
        type: string
        required: false
      status:
        type: string
      type:
        type: string

  VirtualMachineInstanceMigrationSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      vmiName:
        description: >-
          The name of the VMI to perform the migration on. VMI must exist in the migration
          objects namespace
        type: string
        required: false

  VirtualMachineInstanceMigrationState:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      abortRequested:
        description: >-
          Indicates that the migration has been requested to abort
        type: boolean
        required: false
      abortStatus:
        description: >-
          Indicates the final status of the live migration abortion
        type: string
        required: false
      completed:
        description: >-
          Indicates the migration completed
        type: boolean
        required: false
      endTimestamp:
        description: >-
          The time the migration action ended
        type: Time
        required: false
      failed:
        description: >-
          Indicates that the migration failed
        type: boolean
        required: false
      migrationUid:
        description: >-
          The VirtualMachineInstanceMigration object associated with this migration
        type: string
        required: false
      mode:
        description: >-
          Lets us know if the vmi is currently running pre or post copy migration
        type: string
        required: false
      sourceNode:
        description: >-
          The source node that the VMI originated on
        type: string
        required: false
      startTimestamp:
        description: >-
          The time the migration action began
        type: Time
        required: false
      targetAttachmentPodUID:
        description: >-
          The UID of the target attachment pod for hotplug volumes
        type: string
        required: false
      targetDirectMigrationNodePorts:
        description: >-
          The list of ports opened for live migration on the destination node
        type: map
        entry_schema: integer
        required: false
      targetNode:
        description: >-
          The target node that the VMI is moving to
        type: string
        required: false
      targetNodeAddress:
        description: >-
          The address of the target node to use for the migration
        type: string
        required: false
      targetNodeDomainDetected:
        description: >-
          The Target Node has seen the Domain Start Event
        type: boolean
        required: false
      targetPod:
        description: >-
          The target pod that the VMI is moving to
        type: string
        required: false

  VirtualMachineInstanceMigrationStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineInstanceMigration reprents information pertaining to a VMI's
      migration.
    properties:
      conditions:
        type: list
        entry_schema: VirtualMachineInstanceMigrationCondition
        required: false
      phase:
        type: string
        required: false

  VirtualMachineInstanceNetworkInterface:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      interfaceName:
        description: >-
          The interface name inside the Virtual Machine
        type: string
        required: false
      ipAddress:
        description: >-
          IP address of a Virtual Machine interface. It is always the first item of IPs
        type: string
        required: false
      ipAddresses:
        description: >-
          List of all IP addresses of a Virtual Machine interface
        type: list
        entry_schema: string
        required: false
      mac:
        description: >-
          Hardware address of a Virtual Machine interface
        type: string
        required: false
      name:
        description: >-
          Name of the interface, corresponds to name of the network assigned to the
          interface
        type: string
        required: false

  VirtualMachineInstancePhaseTransitionTimestamp:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineInstancePhaseTransitionTimestamp gives a timestamp in relation to
      when a phase is set on a vmi
    properties:
      phase:
        description: >-
          Phase is the status of the VirtualMachineInstance in kubernetes world. It is not
          the VirtualMachineInstance status, but partially correlates to it.
        type: string
        required: false
      phaseTransitionTimestamp:
        description: >-
          PhaseTransitionTimestamp is the timestamp of when the phase change occurred
        type: Time
        required: false

  VirtualMachineInstancePresetSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      domain:
        description: >-
          Domain is the same object type as contained in VirtualMachineInstanceSpec
        type: DomainSpec
        required: false
      selector:
        description: >-
          Selector is a label query over a set of VMIs. Required.
        type: LabelSelector

  VirtualMachineInstanceReplicaSetCondition:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      lastProbeTime:
        type: string
        required: false
      lastTransitionTime:
        type: string
        required: false
      message:
        type: string
        required: false
      reason:
        type: string
        required: false
      status:
        type: string
      type:
        type: string

  VirtualMachineInstanceReplicaSetSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      paused:
        description: >-
          Indicates that the replica set is paused.
        type: boolean
        required: false
      replicas:
        description: >-
          Number of desired pods. This is a pointer to distinguish between explicit zero
          and not specified. Defaults to 1.
        type: integer
        required: false
      selector:
        description: >-
          Label selector for pods. Existing ReplicaSets whose pods are selected by this
          will be the ones affected by this deployment.
        type: LabelSelector
      template:
        description: >-
          Template describes the pods that will be created.
        type: VirtualMachineInstanceTemplateSpec

  VirtualMachineInstanceReplicaSetStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      conditions:
        type: list
        entry_schema: VirtualMachineInstanceReplicaSetCondition
        required: false
      labelSelector:
        description: >-
          Canonical form of the label selector for HPA which consumes it through the scale
          subresource.
        type: string
        required: false
      readyReplicas:
        description: >-
          The number of ready replicas for this replica set.
        type: integer
        required: false
      replicas:
        description: >-
          Total number of non-terminated pods targeted by this deployment (their labels
          match the selector).
        type: integer
        required: false

  VirtualMachineInstanceSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineInstanceSpec is a description of a VirtualMachineInstance.
    properties:
      accessCredentials:
        description: >-
          Specifies a set of public keys to inject into the vm guest
        type: list
        entry_schema: AccessCredential
        required: false
      affinity:
        description: >-
          If affinity is specifies, obey all the affinity rules
        type: k8s:Affinity
        required: false
      dnsConfig:
        description: >-
          Specifies the DNS parameters of a pod. Parameters specified here will be merged
          to the generated DNS configuration based on DNSPolicy.
        type: k8s:PodDNSConfig
        required: false
      dnsPolicy:
        description: >-
          Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are
          'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters
          given in DNSConfig will be merged with the policy selected with DNSPolicy. To
          have DNS options set along with hostNetwork, you have to specify DNS policy
          explicitly to 'ClusterFirstWithHostNet'.
        type: string
        required: false
      domain:
        description: >-
          Specification of the desired behavior of the VirtualMachineInstance on the host.
        type: DomainSpec
      evictionStrategy:
        description: >-
          EvictionStrategy can be set to "LiveMigrate" if the VirtualMachineInstance
          should be migrated instead of shut-off in case of a node drain.
        type: string
        required: false
      hostname:
        description: >-
          Specifies the hostname of the vmi If not specified, the hostname will be set to
          the name of the vmi, if dhcp or cloud-init is configured properly.
        type: string
        required: false
      livenessProbe:
        description: >-
          Periodic probe of VirtualMachineInstance liveness. VirtualmachineInstances will
          be stopped if the probe fails. Cannot be updated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        type: Probe
        required: false
      networks:
        description: >-
          List of networks that can be attached to a vm's virtual interface.
        type: list
        entry_schema: Network
        required: false
      nodeSelector:
        description: >-
          NodeSelector is a selector which must be true for the vmi to fit on a node.
          Selector which must match a node's labels for the vmi to be scheduled on that
          node. More info:
          https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        type: map
        entry_schema: string
        required: false
      priorityClassName:
        description: >-
          If specified, indicates the pod's priority. If not specified, the pod priority
          will be default or zero if there is no default.
        type: string
        required: false
      readinessProbe:
        description: >-
          Periodic probe of VirtualMachineInstance service readiness.
          VirtualmachineInstances will be removed from service endpoints if the probe
          fails. Cannot be updated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        type: Probe
        required: false
      schedulerName:
        description: >-
          If specified, the VMI will be dispatched by specified scheduler. If not
          specified, the VMI will be dispatched by default scheduler.
        type: string
        required: false
      startStrategy:
        description: >-
          StartStrategy can be set to "Paused" if Virtual Machine should be started in
          paused state.
        type: string
        required: false
      subdomain:
        description: >-
          If specified, the fully qualified vmi hostname will be
          "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified,
          the vmi will not have a domainname at all. The DNS entry will resolve to the
          vmi, no matter if the vmi itself can pick up a hostname.
        type: string
        required: false
      terminationGracePeriodSeconds:
        description: >-
          Grace period observed after signalling a VirtualMachineInstance to stop after
          which the VirtualMachineInstance is force terminated.
        type: integer
        required: false
      tolerations:
        description: >-
          If toleration is specified, obey all the toleration rules.
        type: list
        entry_schema: k8s:Toleration
        required: false
      volumes:
        description: >-
          List of volumes that can be mounted by disks belonging to the vmi.
        type: list
        entry_schema: Volume
        required: false

  VirtualMachineInstanceStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineInstanceStatus represents information about the status of a
      VirtualMachineInstance. Status may trail the actual state of a system.
    properties:
      activePods:
        description: >-
          ActivePods is a mapping of pod UID to node name. It is possible for multiple
          pods to be running for a single VMI during migration.
        type: map
        entry_schema: string
        required: false
      conditions:
        description: >-
          Conditions are specific points in VirtualMachineInstance's pod runtime.
        type: list
        entry_schema: VirtualMachineInstanceCondition
        required: false
      evacuationNodeName:
        description: >-
          EvacuationNodeName is used to track the eviction process of a VMI. It stores the
          name of the node that we want to evacuate. It is meant to be used by KubeVirt
          core components only and can't be set or modified by users.
        type: string
        required: false
      fsFreezeStatus:
        description: >-
          FSFreezeStatus is the state of the fs of the guest it can be either frozen or
          thawed
        type: string
        required: false
      guestOSInfo:
        description: >-
          Guest OS Information
        type: VirtualMachineInstanceGuestOSInfo
        required: false
      interfaces:
        description: >-
          Interfaces represent the details of available network interfaces.
        type: list
        entry_schema: VirtualMachineInstanceNetworkInterface
        required: false
      launcherContainerImageVersion:
        description: >-
          LauncherContainerImageVersion indicates what container image is currently active
          for the vmi.
        type: string
        required: false
      migrationMethod:
        description: >-
          Represents the method using which the vmi can be migrated: live migration or
          block migration
        type: string
        required: false
      migrationState:
        description: >-
          Represents the status of a live migration
        type: VirtualMachineInstanceMigrationState
        required: false
      nodeName:
        description: >-
          NodeName is the name where the VirtualMachineInstance is currently running.
        type: string
        required: false
      phase:
        description: >-
          Phase is the status of the VirtualMachineInstance in kubernetes world. It is not
          the VirtualMachineInstance status, but partially correlates to it.
        type: string
        required: false
      phaseTransitionTimestamps:
        description: >-
          PhaseTransitionTimestamp is the timestamp of when the last phase change occurred
        type: list
        entry_schema: VirtualMachineInstancePhaseTransitionTimestamp
        required: false
      qosClass:
        description: >-
          The Quality of Service (QOS) classification assigned to the virtual machine
          instance based on resource requirements See PodQOSClass type for available QOS
          classes More info:
          https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
        type: string
        required: false
      reason:
        description: >-
          A brief CamelCase message indicating details about why the VMI is in this state.
          e.g. 'NodeUnresponsive'
        type: string
        required: false
      topologyHints:
        type: TopologyHints
        required: false
      volumeStatus:
        description: >-
          VolumeStatus contains the statuses of all the volumes
        type: list
        entry_schema: VolumeStatus
        required: false

  VirtualMachineInstanceTemplateSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      spec:
        description: >-
          VirtualMachineInstance Spec contains the VirtualMachineInstance specification.
        type: VirtualMachineInstanceSpec
        required: false

  VirtualMachineRestoreSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineRestoreSpec is the spec for a VirtualMachineRestoreresource
    properties:
      target:
        description: >-
          initially only VirtualMachine type supported
        type: k8s:TypedLocalObjectReference
      virtualMachineSnapshotName:
        type: string

  VirtualMachineRestoreStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineRestoreStatus is the spec for a VirtualMachineRestoreresource
    properties:
      complete:
        type: boolean
        required: false
      conditions:
        type: list
        entry_schema: Condition
        required: false
      deletedDataVolumes:
        type: list
        entry_schema: string
        required: false
      restoreTime:
        type: Time
        required: false
      restores:
        type: list
        entry_schema: VolumeRestore
        required: false

  VirtualMachineSnapshotContentSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineSnapshotContentSpec is the spec for a
      VirtualMachineSnapshotContent resource
    properties:
      source:
        type: SourceSpec
      virtualMachineSnapshotName:
        type: string
        required: false
      volumeBackups:
        type: list
        entry_schema: VolumeBackup
        required: false

  VirtualMachineSnapshotContentStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineSnapshotContentStatus is the status for a
      VirtualMachineSnapshotStatus resource
    properties:
      creationTime:
        type: Time
        required: false
      error:
        type: Error
        required: false
      readyToUse:
        type: boolean
        required: false
      volumeSnapshotStatus:
        type: list
        entry_schema: VolumeSnapshotStatus
        required: false

  VirtualMachineSnapshotSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineSnapshotSpec is the spec for a VirtualMachineSnapshot resource
    properties:
      deletionPolicy:
        type: string
        required: false
      failureDeadline:
        description: >-
          This time represents the number of seconds we permit the vm snapshot to take. In
          case we pass this deadline we mark this snapshot as failed. Defaults to
          DefaultFailureDeadline - 5min
        type: Duration
        required: false
      source:
        type: k8s:TypedLocalObjectReference

  VirtualMachineSnapshotStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineSnapshotStatus is the status for a VirtualMachineSnapshot resource
    properties:
      conditions:
        type: list
        entry_schema: Condition
        required: false
      creationTime:
        type: Time
        required: false
      error:
        type: Error
        required: false
      indications:
        type: list
        entry_schema: string
        required: false
      phase:
        type: string
        required: false
      readyToUse:
        type: boolean
        required: false
      sourceUID:
        type: string
        required: false
      virtualMachineSnapshotContentName:
        type: string
        required: false

  VirtualMachineSpec:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineSpec describes how the proper VirtualMachine should look like
    properties:
      dataVolumeTemplates:
        description: >-
          dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance
          template can reference. DataVolumes in this list are dynamically created for the
          VirtualMachine and are tied to the VirtualMachine's life-cycle.
        type: list
        entry_schema: DataVolumeTemplateSpec
        required: false
      runStrategy:
        description: >-
          Running state indicates the requested running state of the
          VirtualMachineInstance mutually exclusive with Running
        type: string
        required: false
      running:
        description: >-
          Running controls whether the associatied VirtualMachineInstance is created or
          not Mutually exclusive with RunStrategy
        type: boolean
        required: false
      template:
        description: >-
          Template is the direct specification of VirtualMachineInstance
        type: VirtualMachineInstanceTemplateSpec

  VirtualMachineStartFailure:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineStartFailure tracks VMIs which failed to transition successfully
      to running using the VM status
    properties:
      consecutiveFailCount:
        type: integer
        required: false
      lastFailedVMIUID:
        type: string
        required: false
      retryAfterTimestamp:
        type: Time
        required: false

  VirtualMachineStateChangeRequest:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      action:
        description: >-
          Indicates the type of action that is requested. e.g. Start or Stop
        type: string
      data:
        description: >-
          Provides additional data in order to perform the Action
        type: map
        entry_schema: string
        required: false
      uid:
        description: >-
          Indicates the UUID of an existing Virtual Machine Instance that this change
          request applies to -- if applicable
        type: string
        required: false

  VirtualMachineStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VirtualMachineStatus represents the status returned by the controller to
      describe how the VirtualMachine is doing
    properties:
      conditions:
        description: >-
          Hold the state information of the VirtualMachine and its VirtualMachineInstance
        type: list
        entry_schema: VirtualMachineCondition
        required: false
      created:
        description: >-
          Created indicates if the virtual machine is created in the cluster
        type: boolean
        required: false
      printableStatus:
        description: >-
          PrintableStatus is a human readable, high-level representation of the status of
          the virtual machine
        type: string
        required: false
      ready:
        description: >-
          Ready indicates if the virtual machine is running and ready
        type: boolean
        required: false
      snapshotInProgress:
        description: >-
          SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing
        type: string
        required: false
      startFailure:
        description: >-
          StartFailure tracks consecutive VMI startup failures for the purposes of crash
          loop backoffs
        type: VirtualMachineStartFailure
        required: false
      stateChangeRequests:
        description: >-
          StateChangeRequests indicates a list of actions that should be taken on a VMI
          e.g. stop a specific VMI then start a new one.
        type: list
        entry_schema: VirtualMachineStateChangeRequest
        required: false
      volumeRequests:
        description: >-
          VolumeRequests indicates a list of volumes add or remove from the VMI template
          and hotplug on an active running VMI.
        type: list
        entry_schema: VirtualMachineVolumeRequest
        required: false
      volumeSnapshotStatuses:
        description: >-
          VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is
          supported by each volume.
        type: list
        entry_schema: VolumeSnapshotStatus
        required: false

  VirtualMachineVolumeRequest:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      addVolumeOptions:
        description: >-
          AddVolumeOptions when set indicates a volume should be added. The details within
          this field specify how to add the volume
        type: AddVolumeOptions
        required: false
      removeVolumeOptions:
        description: >-
          RemoveVolumeOptions when set indicates a volume should be removed. The details
          within this field specify how to add the volume
        type: RemoveVolumeOptions
        required: false

  Volume:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Volume represents a named volume in a vmi.
    properties:
      cloudInitConfigDrive:
        description: >-
          CloudInitConfigDrive represents a cloud-init Config Drive user-data source. The
          Config Drive data will be added as a disk to the vmi. A proper cloud-init
          installation is required inside the guest. More info:
          https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
        type: CloudInitConfigDriveSource
        required: false
      cloudInitNoCloud:
        description: >-
          CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud
          data will be added as a disk to the vmi. A proper cloud-init installation is
          required inside the guest. More info:
          http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
        type: CloudInitNoCloudSource
        required: false
      configMap:
        description: >-
          ConfigMapSource represents a reference to a ConfigMap in the same namespace.
          More info:
          https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
        type: ConfigMapVolumeSource
        required: false
      containerDisk:
        description: >-
          ContainerDisk references a docker image, embedding a qcow or raw disk. More
          info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
        type: ContainerDiskSource
        required: false
      dataVolume:
        description: >-
          DataVolume represents the dynamic creation a PVC for this volume as well as the
          process of populating that PVC with a disk image.
        type: DataVolumeSource
        required: false
      downwardAPI:
        description: >-
          DownwardAPI represents downward API about the pod that should populate this
          volume
        type: DownwardAPIVolumeSource
        required: false
      downwardMetrics:
        description: >-
          DownwardMetrics adds a very small disk to VMIs which contains a limited view of
          host and guest metrics. The disk content is compatible with vhostmd
          (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
        type: DownwardMetricsVolumeSource
        required: false
      emptyDisk:
        description: >-
          EmptyDisk represents a temporary disk which shares the vmis lifecycle. More
          info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
        type: EmptyDiskSource
        required: false
      ephemeral:
        description: >-
          Ephemeral is a special volume source that "wraps" specified source and provides
          copy-on-write image on top of it.
        type: EphemeralVolumeSource
        required: false
      hostDisk:
        description: >-
          HostDisk represents a disk created on the cluster level
        type: HostDisk
        required: false
      name:
        description: >-
          Volume's name. Must be a DNS_LABEL and unique within the vmi. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
      persistentVolumeClaim:
        description: >-
          PersistentVolumeClaimVolumeSource represents a reference to a
          PersistentVolumeClaim in the same namespace. Directly attached to the vmi via
          qemu. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: k8s:PersistentVolumeClaimVolumeSource
        required: false
      secret:
        description: >-
          SecretVolumeSource represents a reference to a secret data in the same
          namespace. More info: https://kubernetes.io/docs/concepts/configuration/secret/
        type: SecretVolumeSource
        required: false
      serviceAccount:
        description: >-
          ServiceAccountVolumeSource represents a reference to a service account. There
          can only be one volume of this type! More info:
          https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
        type: ServiceAccountVolumeSource
        required: false
      sysprep:
        description: >-
          Represents a Sysprep volume source.
        type: SysprepSource
        required: false

  VolumeBackup:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VolumeBackup contains the data neeed to restore a PVC
    properties:
      persistentVolumeClaim:
        type: PersistentVolumeClaim
      volumeName:
        type: string
      volumeSnapshotName:
        type: string
        required: false

  VolumeRestore:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VolumeRestore contains the data neeed to restore a PVC
    properties:
      dataVolumeName:
        type: string
        required: false
      persistentVolumeClaim:
        type: string
      volumeName:
        type: string
      volumeSnapshotName:
        type: string

  VolumeSnapshotStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    properties:
      enabled:
        description: >-
          True if the volume supports snapshotting
        type: boolean
      name:
        description: >-
          Volume name
        type: string
      reason:
        description: >-
          Empty if snapshotting is enabled, contains reason otherwise
        type: string
        required: false

  VolumeStatus:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      VolumeStatus represents information about the status of volumes attached to the
      VirtualMachineInstance.
    properties:
      hotplugVolume:
        description: >-
          If the volume is hotplug, this will contain the hotplug status.
        type: HotplugVolumeStatus
        required: false
      message:
        description: >-
          Message is a detailed message about the current hotplug volume phase
        type: string
        required: false
      name:
        description: >-
          Name is the name of the volume
        type: string
      phase:
        description: >-
          Phase is the phase
        type: string
        required: false
      reason:
        description: >-
          Reason is a brief description of why we are in the current hotplug volume phase
        type: string
        required: false
      target:
        description: >-
          Target is the target name used when adding the volume to the VM, eg: vda
        type: string

  WatchEvent:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Event represents a single event to a watched resource.
    properties:
      object:
        description: >-
          Object is:
           * If Type is Added or Modified: the new state of the object.
           * If Type is Deleted: the state of the object immediately before deletion.
           * If Type is Error: *Status is recommended; other types may make sense
           depending on context.
        type: RawExtension
      type:
        type: string

  Watchdog:
    metadata:
      specification.name: KubeVirt
      specification.version: 0.44.1
    description: >-
      Named watchdog device.
    properties:
      i6300esb:
        description: >-
          i6300esb watchdog device.
        type: I6300ESBWatchdog
        required: false
      name:
        description: >-
          Name of the watchdog.
        type: string
