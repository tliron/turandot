tosca_definitions_version: tosca_simple_yaml_1_3

# This file was automatically generated from data published at:
# https://raw.githubusercontent.com/kubernetes/kubernetes/v1.22.1/api/openapi-spec/swagger.json

metadata:

  specification.name: Kubernetes
  specification.version: 1.22.1
  specification.url: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22

imports:

- _data.yaml

data_types:

  APIExtensionsServiceReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ServiceReference holds a reference to Service.legacy.k8s.io
    properties:
      name:
        description: >-
          name is the name of the service. Required
        type: string
      namespace:
        description: >-
          namespace is the namespace of the service. Required
        type: string
      path:
        description: >-
          path is an optional URL path at which the webhook will be contacted.
        type: string
        required: false
      port:
        description: >-
          port is an optional service port at which the webhook will be contacted. `port`
          should be a valid port number (1-65535, inclusive). Defaults to 443 for backward
          compatibility.
        type: integer
        required: false

  APIGroup:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      APIGroup contains the name, the supported versions, and the preferred version of
      a group.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      name:
        description: >-
          name is the name of the group.
        type: string
      preferredVersion:
        description: >-
          preferredVersion is the version preferred by the API server, which probably is
          the storage version.
        type: GroupVersionForDiscovery
        required: false
      serverAddressByClientCIDRs:
        description: >-
          a map of client CIDR to server address that is serving this group. This is to
          help clients reach servers in the most network-efficient way possible. Clients
          can use the appropriate server address as per the CIDR that they match. In case
          of multiple matches, clients should use the longest matching CIDR. The server
          returns only those CIDRs that it thinks that the client can match. For example:
          the master will return an internal IP CIDR only, if the client reaches the
          server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip
          header or request.RemoteAddr (in that order) to get the client IP.
        type: list
        entry_schema: ServerAddressByClientCIDR
        required: false
      versions:
        description: >-
          versions are the versions supported in this group.
        type: list
        entry_schema: GroupVersionForDiscovery

  APIResource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      APIResource specifies the name of a resource and whether it is namespaced.
    properties:
      categories:
        description: >-
          categories is a list of the grouped resources this resource belongs to (e.g.
          'all')
        type: list
        entry_schema: string
        required: false
      group:
        description: >-
          group is the preferred group of the resource. Empty implies the group of the
          containing resource list. For subresources, this may have a different value, for
          example: Scale".
        type: string
        required: false
      kind:
        description: >-
          kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
        type: string
      name:
        description: >-
          name is the plural name of the resource.
        type: string
      namespaced:
        description: >-
          namespaced indicates if a resource is namespaced or not.
        type: boolean
      shortNames:
        description: >-
          shortNames is a list of suggested short names of the resource.
        type: list
        entry_schema: string
        required: false
      singularName:
        description: >-
          singularName is the singular name of the resource. This allows clients to handle
          plural and singular opaquely. The singularName is more correct for reporting
          status on a single item and both singular and plural are allowed from the
          kubectl CLI interface.
        type: string
      storageVersionHash:
        description: >-
          The hash value of the storage version, the version this resource is converted to
          when written to the data store. Value must be treated as opaque by clients. Only
          equality comparison on the value is valid. This is an alpha feature and may
          change or be removed in the future. The field is populated by the apiserver only
          if the StorageVersionHash feature gate is enabled. This field will remain
          optional even if it graduates.
        type: string
        required: false
      verbs:
        description: >-
          verbs is a list of supported kube verbs (this includes get, list, watch, create,
          update, patch, delete, deletecollection, and proxy)
        type: list
        entry_schema: string
      version:
        description: >-
          version is the preferred version of the resource. Empty implies the version of
          the containing resource list For subresources, this may have a different value,
          for example: v1 (while inside a v1beta1 version of the core resource's group)".
        type: string
        required: false

  APIServiceCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      APIServiceCondition describes the state of an APIService at a particular point
    properties:
      lastTransitionTime:
        description: >-
          Last time the condition transitioned from one status to another.
        type: timestamp
        required: false
      message:
        description: >-
          Human-readable message indicating details about last transition.
        type: string
        required: false
      reason:
        description: >-
          Unique, one-word, CamelCase reason for the condition's last transition.
        type: string
        required: false
      status:
        description: >-
          Status is the status of the condition. Can be True, False, Unknown.
        type: string
      type:
        description: >-
          Type is the type of the condition.
        type: string

  APIServiceSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      APIServiceSpec contains information for locating and communicating with a
      server. Only https is supported, though you are able to disable certificate
      verification.
    properties:
      caBundle:
        description: >-
          CABundle is a PEM encoded CA bundle which will be used to validate an API
          server's serving certificate. If unspecified, system trust roots on the
          apiserver are used.
        type: string
        required: false
      group:
        description: >-
          Group is the API group name this server hosts
        type: string
        required: false
      groupPriorityMinimum:
        description: >-
          GroupPriorityMininum is the priority this group should have at least. Higher
          priority means that the group is preferred by clients over lower priority ones.
          Note that other versions of this group might specify even higher
          GroupPriorityMininum values such that the whole group gets a higher priority.
          The primary sort is based on GroupPriorityMinimum, ordered highest number to
          lowest (20 before 10). The secondary sort is based on the alphabetical
          comparison of the name of the object. (v1.bar before v1.foo) We'd recommend
          something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift,
          Deis) are recommended to be in the 2000s
        type: integer
      insecureSkipTLSVerify:
        description: >-
          InsecureSkipTLSVerify disables TLS certificate verification when communicating
          with this server. This is strongly discouraged. You should use the CABundle
          instead.
        type: boolean
        required: false
      service:
        description: >-
          Service is a reference to the service for this API server. It must communicate
          on port 443. If the Service is nil, that means the handling for the API
          groupversion is handled locally on this server. The call will simply delegate to
          the normal handler chain to be fulfilled.
        type: KubeAggregatorServiceReference
        required: false
      version:
        description: >-
          Version is the API version this server hosts. For example, "v1"
        type: string
        required: false
      versionPriority:
        description: >-
          VersionPriority controls the ordering of this API version inside of its group.
          Must be greater than zero. The primary sort is based on VersionPriority, ordered
          highest to lowest (20 before 10). Since it's inside of a group, the number can
          be small, probably in the 10s. In case of equal version priorities, the version
          string will be used to compute the order inside a group. If the version string
          is "kube-like", it will sort above non "kube-like" version strings, which are
          ordered lexicographically. "Kube-like" versions start with a "v", then are
          followed by a number (the major version), then optionally the string "alpha" or
          "beta" and another number (the minor version). These are sorted first by GA >
          beta > alpha (where GA is a version with no suffix such as beta or alpha), and
          then by comparing major version, then minor version. An example sorted list of
          versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1,
          foo10.
        type: integer
        constraints:
          - greater_than: 0

  APIServiceStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      APIServiceStatus contains derived information about an API server
    properties:
      conditions:
        description: >-
          Current service state of apiService.
        type: list
        entry_schema: APIServiceCondition
        required: false

  APIVersions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      APIVersions lists the versions that are available, to allow clients to discover
      the API at /api, which is the root path of the legacy v1 API.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      serverAddressByClientCIDRs:
        description: >-
          a map of client CIDR to server address that is serving this group. This is to
          help clients reach servers in the most network-efficient way possible. Clients
          can use the appropriate server address as per the CIDR that they match. In case
          of multiple matches, clients should use the longest matching CIDR. The server
          returns only those CIDRs that it thinks that the client can match. For example:
          the master will return an internal IP CIDR only, if the client reaches the
          server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip
          header or request.RemoteAddr (in that order) to get the client IP.
        type: list
        entry_schema: ServerAddressByClientCIDR
      versions:
        description: >-
          versions are the api versions that are available.
        type: list
        entry_schema: string

  AWSElasticBlockStoreVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Persistent Disk resource in AWS.

      An AWS EBS disk must exist before mounting to a container. The disk must also be
      in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as
      read/write once. AWS EBS volumes support ownership management and SELinux
      relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that the
          filesystem type is supported by the host operating system. Examples: "ext4",
          "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        type: string
        required: false
      partition:
        description: >-
          The partition in the volume that you want to mount. If omitted, the default is
          to mount by volume name. Examples: For volume /dev/sda1, you specify the
          partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you
          can leave the property empty).
        type: integer
        required: false
      readOnly:
        description: >-
          Specify "true" to force and set the ReadOnly property in VolumeMounts to "true".
          If omitted, the default is "false". More info:
          https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        type: boolean
        required: false
      volumeID:
        description: >-
          Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info:
          https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        type: string

  AdmissionRegistrationServiceReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ServiceReference holds a reference to Service.legacy.k8s.io
    properties:
      name:
        description: >-
          `name` is the name of the service. Required
        type: string
      namespace:
        description: >-
          `namespace` is the namespace of the service. Required
        type: string
      path:
        description: >-
          `path` is an optional URL path which will be sent in any request to this
          service.
        type: string
        required: false
      port:
        description: >-
          If specified, the port on the service that hosting webhook. Default to 443 for
          backward compatibility. `port` should be a valid port number (1-65535,
          inclusive).
        type: integer
        required: false

  AdmissionRegistrationWebhookClientConfig:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      WebhookClientConfig contains the information to make a TLS connection with the
      webhook
    properties:
      caBundle:
        description: >-
          `caBundle` is a PEM encoded CA bundle which will be used to validate the
          webhook's server certificate. If unspecified, system trust roots on the
          apiserver are used.
        type: string
        required: false
      service:
        description: >-
          `service` is a reference to the service for this webhook. Either `service` or
          `url` must be specified.

          If the webhook is running within the cluster, then you should use `service`.
        type: AdmissionRegistrationServiceReference
        required: false
      url:
        description: >-
          `url` gives the location of the webhook, in standard URL form
          (`scheme://host:port/path`). Exactly one of `url` or `service` must be
          specified.

          The `host` should not refer to a service running in the cluster; use the
          `service` field instead. The host might be resolved via external DNS in some
          apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would
          be a layering violation). `host` may also be an IP address.

          Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless
          you take great care to run this webhook on all hosts which run an apiserver
          which might need to make calls to this webhook. Such installs are likely to be
          non-portable, i.e., not easy to turn up in a new cluster.

          The scheme must be "https"; the URL must begin with "https://".

          A path is optional, and if present may be any string permissible in a URL. You
          may use the path to pass an arbitrary string to the webhook, for example, a
          cluster identifier.

          Attempting to use a user or basic auth e.g. "user:password@" is not allowed.
          Fragments ("#...") and query parameters ("?...") are not allowed, either.
        type: string
        required: false

  Affinity:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Affinity is a group of affinity scheduling rules.
    properties:
      nodeAffinity:
        description: >-
          Describes node affinity scheduling rules for the pod.
        type: NodeAffinity
        required: false
      podAffinity:
        description: >-
          Describes pod affinity scheduling rules (e.g. co-locate this pod in the same
          node, zone, etc. as some other pod(s)).
        type: PodAffinity
        required: false
      podAntiAffinity:
        description: >-
          Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the
          same node, zone, etc. as some other pod(s)).
        type: PodAntiAffinity
        required: false

  AggregationRule:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      AggregationRule describes how to locate ClusterRoles to aggregate into the
      ClusterRole
    properties:
      clusterRoleSelectors:
        description: >-
          ClusterRoleSelectors holds a list of selectors which will be used to find
          ClusterRoles and create the rules. If any of the selectors match, then the
          ClusterRole's permissions will be added
        type: list
        entry_schema: LabelSelector
        required: false

  AllowedCSIDriver:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      AllowedCSIDriver represents a single inline CSI Driver that is allowed to be
      used.
    properties:
      name:
        description: >-
          Name is the registered name of the CSI driver
        type: string

  AllowedFlexVolume:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
    properties:
      driver:
        description: >-
          driver is the name of the Flexvolume driver.
        type: string

  AllowedHostPath:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      AllowedHostPath defines the host volume conditions that will be enabled by a
      policy for pods to use. It requires the path prefix to be defined.
    properties:
      pathPrefix:
        description: >-
          pathPrefix is the path prefix that the host volume must match. It does not
          support `*`. Trailing slashes are trimmed when validating the path prefix with a
          host path.

          Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not
          allow `/food` or `/etc/foo`
        type: string
        required: false
      readOnly:
        description: >-
          when set to true, will allow host volumes matching the pathPrefix only if all
          volume mounts are readOnly.
        type: boolean
        required: false

  AttachedVolume:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      AttachedVolume describes a volume attached to a node
    properties:
      devicePath:
        description: >-
          DevicePath represents the device path where the volume should be available
        type: string
      name:
        description: >-
          Name of the attached volume
        type: string

  AzureDiskVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      AzureDisk represents an Azure Data Disk mount on the host and bind mount to the
      pod.
    properties:
      cachingMode:
        description: >-
          Host Caching mode: None, Read Only, Read Write.
        type: string
        required: false
      diskName:
        description: >-
          The Name of the data disk in the blob storage
        type: string
      diskURI:
        description: >-
          The URI the data disk in the blob storage
        type: string
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.
        type: string
        required: false
      kind:
        description: >-
          Expected values Shared: multiple blob disks per storage account Dedicated:
          single blob disk per storage account Managed: azure managed data disk (only in
          managed availability set). defaults to shared
        type: string
        required: false
        constraints:
          - valid_values: [ Shared, Dedicated, Managed ]
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
          VolumeMounts.
        type: boolean
        required: false

  AzureFilePersistentVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      AzureFile represents an Azure File Service mount on the host and bind mount to
      the pod.
    properties:
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
          VolumeMounts.
        type: boolean
        required: false
      secretName:
        description: >-
          the name of secret that contains Azure Storage Account Name and Key
        type: string
      secretNamespace:
        description: >-
          the namespace of the secret that contains Azure Storage Account Name and Key
          default is the same as the Pod
        type: string
        required: false
      shareName:
        description: >-
          Share Name
        type: string

  AzureFileVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      AzureFile represents an Azure File Service mount on the host and bind mount to
      the pod.
    properties:
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
          VolumeMounts.
        type: boolean
        required: false
      secretName:
        description: >-
          the name of secret that contains Azure Storage Account Name and Key
        type: string
      shareName:
        description: >-
          Share Name
        type: string

  BoundObjectReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      BoundObjectReference is a reference to an object that a token is bound to.
    properties:
      apiVersion:
        description: >-
          API version of the referent.
        type: string
        required: false
      kind:
        description: >-
          Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
        type: string
        required: false
      name:
        description: >-
          Name of the referent.
        type: string
        required: false
      uid:
        description: >-
          UID of the referent.
        type: string
        required: false

  CSIDriverSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CSIDriverSpec is the specification of a CSIDriver.
    properties:
      attachRequired:
        description: >-
          attachRequired indicates this CSI volume driver requires an attach operation
          (because it implements the CSI ControllerPublishVolume() method), and that the
          Kubernetes attach detach controller should call the attach volume interface
          which checks the volumeattachment status and waits until the volume is attached
          before proceeding to mounting. The CSI external-attacher coordinates with CSI
          volume driver and updates the volumeattachment status when the attach operation
          is complete. If the CSIDriverRegistry feature gate is enabled and the value is
          specified to false, the attach operation will be skipped. Otherwise the attach
          operation will be called.

          This field is immutable.
        type: boolean
        required: false
      fsGroupPolicy:
        description: >-
          Defines if the underlying volume supports changing ownership and permission of
          the volume before being mounted. Refer to the specific FSGroupPolicy values for
          additional details. This field is beta, and is only honored by servers that
          enable the CSIVolumeFSGroupPolicy feature gate.

          This field is immutable.

          Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine
          if Kubernetes should modify ownership and permissions of the volume. With the
          default policy the defined fsGroup will only be applied if a fstype is defined
          and the volume's access mode contains ReadWriteOnce.
        type: string
        required: false
      podInfoOnMount:
        description: >-
          If set to true, podInfoOnMount indicates this CSI volume driver requires
          additional pod information (like podName, podUID, etc.) during mount operations.
          If set to false, pod information will not be passed on mount. Default is false.
          The CSI driver specifies podInfoOnMount as part of driver deployment. If true,
          Kubelet will pass pod information as VolumeContext in the CSI
          NodePublishVolume() calls. The CSI driver is responsible for parsing and
          validating the information passed in as VolumeContext. The following
          VolumeConext will be passed if podInfoOnMount is set to true. This list might
          grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name
          "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid":
          string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an
          ephemeral inline volume
           defined by a CSIVolumeSource, otherwise "false"

          "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only
          required for drivers which support both the "Persistent" and "Ephemeral"
          VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore
          this field. As Kubernetes 1.15 doesn't support this field, drivers can only
          support one mode when deployed on such a cluster and the deployment determines
          which mode that is, for example via a command line parameter of the driver.

          This field is immutable.
        type: boolean
        required: false
      requiresRepublish:
        description: >-
          RequiresRepublish indicates the CSI driver wants `NodePublishVolume` being
          periodically called to reflect any possible change in the mounted volume. This
          field defaults to false.

          Note: After a successful initial NodePublishVolume call, subsequent calls to
          NodePublishVolume should only update the contents of the volume. New mount
          points will not be seen by a running container.
        type: boolean
        required: false
      storageCapacity:
        description: >-
          If set to true, storageCapacity indicates that the CSI volume driver wants pod
          scheduling to consider the storage capacity that the driver deployment will
          report by creating CSIStorageCapacity objects with capacity information.

          The check can be enabled immediately when deploying a driver. In that case,
          provisioning new volumes with late binding will pause until the driver
          deployment has published some suitable CSIStorageCapacity object.

          Alternatively, the driver can be deployed with the field unset or false and it
          can be flipped later when storage capacity information has been published.

          This field is immutable.

          This is a beta field and only available when the CSIStorageCapacity feature is
          enabled. The default is false.
        type: boolean
        required: false
      tokenRequests:
        description: >-
          TokenRequests indicates the CSI driver needs pods' service account tokens it is
          mounting volume for to do necessary authentication. Kubelet will pass the tokens
          in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse
          and validate the following VolumeContext:
          "csi.storage.k8s.io/serviceAccount.tokens": {
           "<audience>": {
           "token": <token>,
           "expirationTimestamp": <expiration timestamp in RFC3339>,
           },
           ...
          }

          Note: Audience in each TokenRequest should be different and at most one token is
          empty string. To receive a new token after expiry, RequiresRepublish can be used
          to trigger NodePublishVolume periodically.
        type: list
        entry_schema: TokenRequest
        required: false
      volumeLifecycleModes:
        description: >-
          volumeLifecycleModes defines what kind of volumes this CSI volume driver
          supports. The default if the list is empty is "Persistent", which is the usage
          defined by the CSI specification and implemented in Kubernetes via the usual
          PV/PVC mechanism. The other mode is "Ephemeral". In this mode, volumes are
          defined inline inside the pod spec with CSIVolumeSource and their lifecycle is
          tied to the lifecycle of that pod. A driver has to be aware of this because it
          is only going to get a NodePublishVolume call for such a volume. For more
          information about implementing this mode, see
          https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can
          support one or more of these modes and more modes may be added in the future.
          This field is beta.

          This field is immutable.
        type: list
        entry_schema: string
        required: false

  CSINodeDriver:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CSINodeDriver holds information about the specification of one CSI driver
      installed on a node
    properties:
      allocatable:
        description: >-
          allocatable represents the volume resources of a node that are available for
          scheduling. This field is beta.
        type: VolumeNodeResources
        required: false
      name:
        description: >-
          This is the name of the CSI driver that this object refers to. This MUST be the
          same name returned by the CSI GetPluginName() call for that driver.
        type: string
      nodeID:
        description: >-
          nodeID of the node from the driver point of view. This field enables Kubernetes
          to communicate with storage systems that do not share the same nomenclature for
          nodes. For example, Kubernetes may refer to a given node as "node1", but the
          storage system may refer to the same node as "nodeA". When Kubernetes issues a
          command to the storage system to attach a volume to a specific node, it can use
          this field to refer to the node name using the ID that the storage system will
          understand, e.g. "nodeA" instead of "node1". This field is required.
        type: string
      topologyKeys:
        description: >-
          topologyKeys is the list of keys supported by the driver. When a driver is
          initialized on a cluster, it provides a set of topology keys that it understands
          (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on
          a node, it provides the same topology keys along with values. Kubelet will
          expose these topology keys as labels on its own node object. When Kubernetes
          does topology aware provisioning, it can use this list to determine which labels
          it should retrieve from the node object and pass back to the driver. It is
          possible for different nodes to use different topology keys. This can be empty
          if driver does not support topology.
        type: list
        entry_schema: string
        required: false

  CSINodeSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CSINodeSpec holds information about the specification of all CSI drivers
      installed on a node
    properties:
      drivers:
        description: >-
          drivers is a list of information of all CSI Drivers existing on a node. If all
          drivers in the list are uninstalled, this can become empty.
        type: list
        entry_schema: CSINodeDriver

  CSIPersistentVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents storage that is managed by an external CSI volume driver (Beta
      feature)
    properties:
      controllerExpandSecretRef:
        description: >-
          ControllerExpandSecretRef is a reference to the secret object containing
          sensitive information to pass to the CSI driver to complete the CSI
          ControllerExpandVolume call. This is an alpha field and requires enabling
          ExpandCSIVolumes feature gate. This field is optional, and may be empty if no
          secret is required. If the secret object contains more than one secret, all
          secrets are passed.
        type: SecretReference
        required: false
      controllerPublishSecretRef:
        description: >-
          ControllerPublishSecretRef is a reference to the secret object containing
          sensitive information to pass to the CSI driver to complete the CSI
          ControllerPublishVolume and ControllerUnpublishVolume calls. This field is
          optional, and may be empty if no secret is required. If the secret object
          contains more than one secret, all secrets are passed.
        type: SecretReference
        required: false
      driver:
        description: >-
          Driver is the name of the driver to use for this volume. Required.
        type: string
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs".
        type: string
        required: false
      nodePublishSecretRef:
        description: >-
          NodePublishSecretRef is a reference to the secret object containing sensitive
          information to pass to the CSI driver to complete the CSI NodePublishVolume and
          NodeUnpublishVolume calls. This field is optional, and may be empty if no secret
          is required. If the secret object contains more than one secret, all secrets are
          passed.
        type: SecretReference
        required: false
      nodeStageSecretRef:
        description: >-
          NodeStageSecretRef is a reference to the secret object containing sensitive
          information to pass to the CSI driver to complete the CSI NodeStageVolume and
          NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be
          empty if no secret is required. If the secret object contains more than one
          secret, all secrets are passed.
        type: SecretReference
        required: false
      readOnly:
        description: >-
          Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false
          (read/write).
        type: boolean
        required: false
      volumeAttributes:
        description: >-
          Attributes of the volume to publish.
        type: map
        entry_schema: string
        required: false
      volumeHandle:
        description: >-
          VolumeHandle is the unique volume name returned by the CSI volume plugin’s
          CreateVolume to refer to the volume on all subsequent calls. Required.
        type: string

  CSIVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a source location of a volume to mount, managed by an external CSI
      driver
    properties:
      driver:
        description: >-
          Driver is the name of the CSI driver that handles this volume. Consult with your
          admin for the correct name as registered in the cluster.
        type: string
      fsType:
        description: >-
          Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty
          value is passed to the associated CSI driver which will determine the default
          filesystem to apply.
        type: string
        required: false
      nodePublishSecretRef:
        description: >-
          NodePublishSecretRef is a reference to the secret object containing sensitive
          information to pass to the CSI driver to complete the CSI NodePublishVolume and
          NodeUnpublishVolume calls. This field is optional, and may be empty if no secret
          is required. If the secret object contains more than one secret, all secret
          references are passed.
        type: LocalObjectReference
        required: false
      readOnly:
        description: >-
          Specifies a read-only configuration for the volume. Defaults to false
          (read/write).
        type: boolean
        required: false
      volumeAttributes:
        description: >-
          VolumeAttributes stores driver-specific properties that are passed to the CSI
          driver. Consult your driver's documentation for supported values.
        type: map
        entry_schema: string
        required: false

  Capabilities:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Adds and removes POSIX capabilities from running containers.
    properties:
      add:
        description: >-
          Added capabilities
        type: list
        entry_schema: string
        required: false
      drop:
        description: >-
          Removed capabilities
        type: list
        entry_schema: string
        required: false

  CephFSPersistentVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs
      volumes do not support ownership management or SELinux relabeling.
    properties:
      monitors:
        description: >-
          Required: Monitors is a collection of Ceph monitors More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        type: list
        entry_schema: string
      path:
        description: >-
          Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        type: string
        required: false
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts. More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        type: boolean
        required: false
      secretFile:
        description: >-
          Optional: SecretFile is the path to key ring for User, default is
          /etc/ceph/user.secret More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        type: string
        required: false
      secretRef:
        description: >-
          Optional: SecretRef is reference to the authentication secret for User, default
          is empty. More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        type: SecretReference
        required: false
      user:
        description: >-
          Optional: User is the rados user name, default is admin More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        type: string
        required: false

  CephFSVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs
      volumes do not support ownership management or SELinux relabeling.
    properties:
      monitors:
        description: >-
          Required: Monitors is a collection of Ceph monitors More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        type: list
        entry_schema: string
      path:
        description: >-
          Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        type: string
        required: false
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts. More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        type: boolean
        required: false
      secretFile:
        description: >-
          Optional: SecretFile is the path to key ring for User, default is
          /etc/ceph/user.secret More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        type: string
        required: false
      secretRef:
        description: >-
          Optional: SecretRef is reference to the authentication secret for User, default
          is empty. More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        type: LocalObjectReference
        required: false
      user:
        description: >-
          Optional: User is the rados user name, default is admin More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        type: string
        required: false

  CertificateSigningRequestCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CertificateSigningRequestCondition describes a condition of a
      CertificateSigningRequest object
    properties:
      lastTransitionTime:
        description: >-
          lastTransitionTime is the time the condition last transitioned from one status
          to another. If unset, when a new condition type is added or an existing
          condition's status is changed, the server defaults this to the current time.
        type: timestamp
        required: false
      lastUpdateTime:
        description: >-
          lastUpdateTime is the time of the last update to this condition
        type: timestamp
        required: false
      message:
        description: >-
          message contains a human readable message with details about the request state
        type: string
        required: false
      reason:
        description: >-
          reason indicates a brief reason for the request state
        type: string
        required: false
      status:
        description: >-
          status of the condition, one of True, False, Unknown. Approved, Denied, and
          Failed conditions may not be "False" or "Unknown".
        type: string
      type:
        description: >-
          type of the condition. Known conditions are "Approved", "Denied", and "Failed".

          An "Approved" condition is added via the /approval subresource, indicating the
          request was approved and should be issued by the signer.

          A "Denied" condition is added via the /approval subresource, indicating the
          request was denied and should not be issued by the signer.

          A "Failed" condition is added via the /status subresource, indicating the signer
          failed to issue the certificate.

          Approved and Denied conditions are mutually exclusive. Approved, Denied, and
          Failed conditions cannot be removed once added.

          Only one condition of a given type is allowed.
        type: string

  CertificateSigningRequestSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CertificateSigningRequestSpec contains the certificate request.
    properties:
      expirationSeconds:
        description: >-
          expirationSeconds is the requested duration of validity of the issued
          certificate. The certificate signer may issue a certificate with a different
          validity duration so a client must check the delta between the notBefore and and
          notAfter fields in the issued certificate to determine the actual duration.

          The v1.22+ in-tree implementations of the well-known Kubernetes signers will
          honor this field as long as the requested duration is not greater than the
          maximum duration they will honor per the --cluster-signing-duration CLI flag to
          the Kubernetes controller manager.

          Certificate signers may not honor this field for various reasons:

           1. Old signer that is unaware of the field (such as the in-tree
           implementations prior to v1.22)
           2. Signer whose configured maximum is shorter than the requested duration
           3. Signer whose configured minimum is longer than the requested duration

          The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.

          As of v1.22, this field is beta and is controlled via the CSRDuration feature
          gate.
        type: integer
        required: false
      extra:
        description: >-
          extra contains extra attributes of the user that created the
          CertificateSigningRequest. Populated by the API server on creation and
          immutable.
        type: map
        entry_schema: StringList
        required: false
      groups:
        description: >-
          groups contains group membership of the user that created the
          CertificateSigningRequest. Populated by the API server on creation and
          immutable.
        type: list
        entry_schema: string
        required: false
      request:
        description: >-
          request contains an x509 certificate signing request encoded in a "CERTIFICATE
          REQUEST" PEM block. When serialized as JSON or YAML, the data is additionally
          base64-encoded.
        type: string
      signerName:
        description: >-
          signerName indicates the requested signer, and is a qualified name.

          List/watch requests for CertificateSigningRequests can filter on this field
          using a "spec.signerName=NAME" fieldSelector.

          Well-known Kubernetes signers are:
           1. "kubernetes.io/kube-apiserver-client": issues client certificates that can
          be used to authenticate to kube-apiserver.
           Requests for this signer are never auto-approved by kube-controller-manager,
          can be issued by the "csrsigning" controller in kube-controller-manager.
           2. "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates
          that kubelets use to authenticate to kube-apiserver.
           Requests for this signer can be auto-approved by the "csrapproving" controller
          in kube-controller-manager, and can be issued by the "csrsigning" controller in
          kube-controller-manager.
           3. "kubernetes.io/kubelet-serving" issues serving certificates that kubelets
          use to serve TLS endpoints, which kube-apiserver can connect to securely.
           Requests for this signer are never auto-approved by kube-controller-manager,
          and can be issued by the "csrsigning" controller in kube-controller-manager.

          More details are available at
          https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers

          Custom signerNames can also be specified. The signer defines:
           1. Trust distribution: how trust (CA bundles) are distributed.
           2. Permitted subjects: and behavior when a disallowed subject is requested.
           3. Required, permitted, or forbidden x509 extensions in the request (including
          whether subjectAltNames are allowed, which types, restrictions on allowed
          values) and behavior when a disallowed extension is requested.
           4. Required, permitted, or forbidden key usages / extended key usages.
           5. Expiration/certificate lifetime: whether it is fixed by the signer,
          configurable by the admin.
           6. Whether or not requests for CA certificates are allowed.
        type: string
      uid:
        description: >-
          uid contains the uid of the user that created the CertificateSigningRequest.
          Populated by the API server on creation and immutable.
        type: string
        required: false
      usages:
        description: >-
          usages specifies a set of key usages requested in the issued certificate.

          Requests for TLS client certificates typically request: "digital signature",
          "key encipherment", "client auth".

          Requests for TLS serving certificates typically request: "key encipherment",
          "digital signature", "server auth".

          Valid values are:
           "signing", "digital signature", "content commitment",
           "key encipherment", "key agreement", "data encipherment",
           "cert sign", "crl sign", "encipher only", "decipher only", "any",
           "server auth", "client auth",
           "code signing", "email protection", "s/mime",
           "ipsec end system", "ipsec tunnel", "ipsec user",
           "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
        type: list
        entry_schema: string
        required: false
      username:
        description: >-
          username contains the name of the user that created the
          CertificateSigningRequest. Populated by the API server on creation and
          immutable.
        type: string
        required: false

  CertificateSigningRequestStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CertificateSigningRequestStatus contains conditions used to indicate
      approved/denied/failed status of the request, and the issued certificate.
    properties:
      certificate:
        description: >-
          certificate is populated with an issued certificate by the signer after an
          Approved condition is present. This field is set via the /status subresource.
          Once populated, this field is immutable.

          If the certificate signing request is denied, a condition of type "Denied" is
          added and this field remains empty. If the signer cannot issue the certificate,
          a condition of type "Failed" is added and this field remains empty.

          Validation requirements:
           1. certificate must contain one or more PEM blocks.
           2. All PEM blocks must have the "CERTIFICATE" label, contain no headers, and
          the encoded data
           must be a BER-encoded ASN.1 Certificate structure as described in section 4 of
          RFC5280.
           3. Non-PEM content may appear before or after the "CERTIFICATE" PEM blocks and
          is unvalidated,
           to allow for explanatory text as described in section 5.2 of RFC7468.

          If more than one PEM block is present, and the definition of the requested
          spec.signerName does not indicate otherwise, the first block is the issued
          certificate, and subsequent blocks should be treated as intermediate
          certificates and presented in TLS handshakes.

          The certificate is encoded in PEM format.

          When serialized as JSON or YAML, the data is additionally base64-encoded, so it
          consists of:

           base64(
           -----BEGIN CERTIFICATE-----
           ...
           -----END CERTIFICATE-----
           )
        type: string
        required: false
      conditions:
        description: >-
          conditions applied to the request. Known conditions are "Approved", "Denied",
          and "Failed".
        type: list
        entry_schema: CertificateSigningRequestCondition
        required: false

  CinderPersistentVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a cinder volume resource in Openstack. A Cinder volume must exist
      before mounting to a container. The volume must also be in the same region as
      the kubelet. Cinder volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be
          "ext4" if unspecified. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        type: string
        required: false
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        type: boolean
        required: false
      secretRef:
        description: >-
          Optional: points to a secret object containing parameters used to connect to
          OpenStack.
        type: SecretReference
        required: false
      volumeID:
        description: >-
          volume id used to identify the volume in cinder. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        type: string

  CinderVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a cinder volume resource in Openstack. A Cinder volume must exist
      before mounting to a container. The volume must also be in the same region as
      the kubelet. Cinder volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be
          "ext4" if unspecified. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        type: string
        required: false
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        type: boolean
        required: false
      secretRef:
        description: >-
          Optional: points to a secret object containing parameters used to connect to
          OpenStack.
        type: LocalObjectReference
        required: false
      volumeID:
        description: >-
          volume id used to identify the volume in cinder. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        type: string

  ClientIPConfig:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ClientIPConfig represents the configurations of Client IP based session
      affinity.
    properties:
      timeoutSeconds:
        description: >-
          timeoutSeconds specifies the seconds of ClientIP type session sticky time. The
          value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default
          value is 10800(for 3 hours).
        type: integer
        required: false

  ClusterIPSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    derived_from: ServiceSpec
    properties:
      type:
        type: string
        default: ClusterIP

  ComponentCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Information about the condition of a component.
    properties:
      error:
        description: >-
          Condition error code for a component. For example, a health check error code.
        type: string
        required: false
      message:
        description: >-
          Message about the condition for a component. For example, information about a
          health check.
        type: string
        required: false
      status:
        description: >-
          Status of the condition for a component. Valid values for "Healthy": "True",
          "False", or "Unknown".
        type: string
      type:
        description: >-
          Type of condition for a component. Valid value: "Healthy"
        type: string

  Condition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Condition contains details for one aspect of the current state of this API
      Resource.
    properties:
      lastTransitionTime:
        description: >-
          lastTransitionTime is the last time the condition transitioned from one status
          to another. This should be when the underlying condition changed. If that is not
          known, then using the time when the API field changed is acceptable.
        type: timestamp
      message:
        description: >-
          message is a human readable message indicating details about the transition.
          This may be an empty string.
        type: string
      observedGeneration:
        description: >-
          observedGeneration represents the .metadata.generation that the condition was
          set based upon. For instance, if .metadata.generation is currently 12, but the
          .status.conditions[x].observedGeneration is 9, the condition is out of date with
          respect to the current state of the instance.
        type: integer
        required: false
      reason:
        description: >-
          reason contains a programmatic identifier indicating the reason for the
          condition's last transition. Producers of specific condition types may define
          expected values and meanings for this field, and whether the values are
          considered a guaranteed API. The value should be a CamelCase string. This field
          may not be empty.
        type: string
      status:
        description: >-
          status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: >-
          type of condition in CamelCase or in foo.example.com/CamelCase.
        type: string

  ConfigMapEnvSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ConfigMapEnvSource selects a ConfigMap to populate the environment variables
      with.

      The contents of the target ConfigMap's Data field will represent the key-value
      pairs as environment variables.
    properties:
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        required: false
      optional:
        description: >-
          Specify whether the ConfigMap must be defined
        type: boolean
        required: false

  ConfigMapKeySelector:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Selects a key from a ConfigMap.
    properties:
      key:
        description: >-
          The key to select.
        type: string
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        required: false
      optional:
        description: >-
          Specify whether the ConfigMap or its key must be defined
        type: boolean
        required: false

  ConfigMapNodeConfigSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a
      config source for the Node. This API is deprecated since 1.22:
      https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
    properties:
      kubeletConfigKey:
        description: >-
          KubeletConfigKey declares which key of the referenced ConfigMap corresponds to
          the KubeletConfiguration structure This field is required in all cases.
        type: string
      name:
        description: >-
          Name is the metadata.name of the referenced ConfigMap. This field is required in
          all cases.
        type: string
      namespace:
        description: >-
          Namespace is the metadata.namespace of the referenced ConfigMap. This field is
          required in all cases.
        type: string
      resourceVersion:
        description: >-
          ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap.
          This field is forbidden in Node.Spec, and required in Node.Status.
        type: string
        required: false
      uid:
        description: >-
          UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in
          Node.Spec, and required in Node.Status.
        type: string
        required: false

  ConfigMapProjection:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Adapts a ConfigMap into a projected volume.

      The contents of the target ConfigMap's Data field will be presented in a
      projected volume as files using the keys in the Data field as the file names,
      unless the items element is populated with specific mappings of keys to paths.
      Note that this is identical to a configmap volume source without the default
      mode.
    properties:
      items:
        description: >-
          If unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the key and
          content is the value. If specified, the listed keys will be projected into the
          specified paths, and unlisted keys will not be present. If a key is specified
          which is not present in the ConfigMap, the volume setup will error unless it is
          marked optional. Paths must be relative and may not contain the '..' path or
          start with '..'.
        type: list
        entry_schema: KeyToPath
        required: false
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        required: false
      optional:
        description: >-
          Specify whether the ConfigMap or its keys must be defined
        type: boolean
        required: false

  ConfigMapVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Adapts a ConfigMap into a volume.

      The contents of the target ConfigMap's Data field will be presented in a volume
      as files using the keys in the Data field as the file names, unless the items
      element is populated with specific mappings of keys to paths. ConfigMap volumes
      support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: >-
          Optional: mode bits used to set permissions on created files by default. Must be
          an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML
          accepts both octal and decimal values, JSON requires decimal values for mode
          bits. Defaults to 0644. Directories within the path are not affected by this
          setting. This might be in conflict with other options that affect the file mode,
          like fsGroup, and the result can be other mode bits set.
        type: FileMode
        required: false
      items:
        description: >-
          If unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the key and
          content is the value. If specified, the listed keys will be projected into the
          specified paths, and unlisted keys will not be present. If a key is specified
          which is not present in the ConfigMap, the volume setup will error unless it is
          marked optional. Paths must be relative and may not contain the '..' path or
          start with '..'.
        type: list
        entry_schema: KeyToPath
        required: false
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        required: false
      optional:
        description: >-
          Specify whether the ConfigMap or its keys must be defined
        type: boolean
        required: false

  Container:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A single application container that you want to run within a pod.
    properties:
      args:
        description: >-
          Arguments to the entrypoint. The docker image's CMD is used if this is not
          provided. Variable references $(VAR_NAME) are expanded using the container's
          environment. If a variable cannot be resolved, the reference in the input string
          will be unchanged. Double $$ are reduced to a single $, which allows for
          escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string
          literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of
          whether the variable exists or not. Cannot be updated. More info:
          https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        type: list
        entry_schema: string
        required: false
      command:
        description: >-
          Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is
          used if this is not provided. Variable references $(VAR_NAME) are expanded using
          the container's environment. If a variable cannot be resolved, the reference in
          the input string will be unchanged. Double $$ are reduced to a single $, which
          allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the
          string literal "$(VAR_NAME)". Escaped references will never be expanded,
          regardless of whether the variable exists or not. Cannot be updated. More info:
          https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        type: list
        entry_schema: string
        required: false
      env:
        description: >-
          List of environment variables to set in the container. Cannot be updated.
        type: list
        entry_schema: EnvVar
        required: false
      envFrom:
        description: >-
          List of sources to populate environment variables in the container. The keys
          defined within a source must be a C_IDENTIFIER. All invalid keys will be
          reported as an event when the container is starting. When a key exists in
          multiple sources, the value associated with the last source will take
          precedence. Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
        type: list
        entry_schema: EnvFromSource
        required: false
      image:
        description: >-
          Docker image name. More info:
          https://kubernetes.io/docs/concepts/containers/images This field is optional to
          allow higher level config management to default or override container images in
          workload controllers like Deployments and StatefulSets.
        type: string
        required: false
      imagePullPolicy:
        description: >-
          Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if
          :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More
          info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        type: string
        required: false
      lifecycle:
        description: >-
          Actions that the management system should take in response to container
          lifecycle events. Cannot be updated.
        type: Lifecycle
        required: false
      livenessProbe:
        description: >-
          Periodic probe of container liveness. Container will be restarted if the probe
          fails. Cannot be updated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        type: Probe
        required: false
      name:
        description: >-
          Name of the container specified as a DNS_LABEL. Each container in a pod must
          have a unique name (DNS_LABEL). Cannot be updated.
        type: string
      ports:
        description: >-
          List of ports to expose from the container. Exposing a port here gives the
          system additional information about the network connections a container uses,
          but is primarily informational. Not specifying a port here DOES NOT prevent that
          port from being exposed. Any port which is listening on the default "0.0.0.0"
          address inside a container will be accessible from the network. Cannot be
          updated.
        type: list
        entry_schema: ContainerPort
        required: false
      readinessProbe:
        description: >-
          Periodic probe of container service readiness. Container will be removed from
          service endpoints if the probe fails. Cannot be updated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        type: Probe
        required: false
      resources:
        description: >-
          Compute Resources required by this container. Cannot be updated. More info:
          https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        type: ResourceRequirements
        required: false
      securityContext:
        description: >-
          SecurityContext defines the security options the container should be run with.
          If set, the fields of SecurityContext override the equivalent fields of
          PodSecurityContext. More info:
          https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        type: SecurityContext
        required: false
      startupProbe:
        description: >-
          StartupProbe indicates that the Pod has successfully initialized. If specified,
          no other probes are executed until this completes successfully. If this probe
          fails, the Pod will be restarted, just as if the livenessProbe failed. This can
          be used to provide different probe parameters at the beginning of a Pod's
          lifecycle, when it might take a long time to load data or warm a cache, than
          during steady-state operation. This cannot be updated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        type: Probe
        required: false
      stdin:
        description: >-
          Whether this container should allocate a buffer for stdin in the container
          runtime. If this is not set, reads from stdin in the container will always
          result in EOF. Default is false.
        type: boolean
        required: false
      stdinOnce:
        description: >-
          Whether the container runtime should close the stdin channel after it has been
          opened by a single attach. When stdin is true the stdin stream will remain open
          across multiple attach sessions. If stdinOnce is set to true, stdin is opened on
          container start, is empty until the first client attaches to stdin, and then
          remains open and accepts data until the client disconnects, at which time stdin
          is closed and remains closed until the container is restarted. If this flag is
          false, a container processes that reads from stdin will never receive an EOF.
          Default is false
        type: boolean
        required: false
      terminationMessagePath:
        description: >-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem. Message written is
          intended to be brief final status, such as an assertion failure message. Will be
          truncated by the node if greater than 4096 bytes. The total message length
          across all containers will be limited to 12kb. Defaults to /dev/termination-log.
          Cannot be updated.
        type: string
        required: false
      terminationMessagePolicy:
        description: >-
          Indicate how the termination message should be populated. File will use the
          contents of terminationMessagePath to populate the container status message on
          both success and failure. FallbackToLogsOnError will use the last chunk of
          container log output if the termination message file is empty and the container
          exited with an error. The log output is limited to 2048 bytes or 80 lines,
          whichever is smaller. Defaults to File. Cannot be updated.
        type: string
        required: false
      tty:
        description: >-
          Whether this container should allocate a TTY for itself, also requires 'stdin'
          to be true. Default is false.
        type: boolean
        required: false
      volumeDevices:
        description: >-
          volumeDevices is the list of block devices to be used by the container.
        type: list
        entry_schema: VolumeDevice
        required: false
      volumeMounts:
        description: >-
          Pod volumes to mount into the container's filesystem. Cannot be updated.
        type: list
        entry_schema: VolumeMount
        required: false
      workingDir:
        description: >-
          Container's working directory. If not specified, the container runtime's default
          will be used, which might be configured in the container image. Cannot be
          updated.
        type: string
        required: false

  ContainerImage:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Describe a container image
    properties:
      names:
        description: >-
          Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7",
          "dockerhub.io/google_containers/hyperkube:v1.0.7"]
        type: list
        entry_schema: string
        required: false
      sizeBytes:
        description: >-
          The size of the image in bytes.
        type: integer
        required: false

  ContainerPort:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ContainerPort represents a network port in a single container.
    properties:
      containerPort:
        description: >-
          Number of port to expose on the pod's IP address. This must be a valid port
          number, 0 < x < 65536.
        type: Port
      hostIP:
        description: >-
          What host IP to bind the external port to.
        type: IPAddress
        required: false
      hostPort:
        description: >-
          Number of port to expose on the host. If specified, this must be a valid port
          number, 0 < x < 65536. If HostNetwork is specified, this must match
          ContainerPort. Most containers do not need this.
        type: Port
        required: false
      name:
        description: >-
          If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
          named port in a pod must have a unique name. Name for the port that can be
          referred to by services.
        type: ServiceName
        required: false
      protocol:
        description: >-
          Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        type: string
        required: false
        constraints:
          - valid_values: [ UDP, TCP, SCTP ]

  ContainerResourceMetricSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ContainerResourceMetricSource indicates how to scale on a resource metric known
      to Kubernetes, as specified in requests and limits, describing each pod in the
      current scale target (e.g. CPU or memory). The values will be averaged together
      before being compared to the target. Such metrics are built in to Kubernetes,
      and have special scaling options on top of those available to normal per-pod
      metrics using the "pods" source. Only one "target" type should be set.
    properties:
      container:
        description: >-
          container is the name of the container in the pods of the scaling target
        type: string
      name:
        description: >-
          name is the name of the resource in question.
        type: string
      target:
        description: >-
          target specifies the target value for the given metric
        type: MetricTarget

  ContainerResourceMetricStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ContainerResourceMetricStatus indicates the current value of a resource metric
      known to Kubernetes, as specified in requests and limits, describing a single
      container in each pod in the current scale target (e.g. CPU or memory). Such
      metrics are built in to Kubernetes, and have special scaling options on top of
      those available to normal per-pod metrics using the "pods" source.
    properties:
      container:
        description: >-
          Container is the name of the container in the pods of the scaling target
        type: string
      current:
        description: >-
          current contains the current value for the given metric
        type: MetricValueStatus
      name:
        description: >-
          Name is the name of the resource in question.
        type: string

  ContainerState:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ContainerState holds a possible state of container. Only one of its members may
      be specified. If none of them is specified, the default one is
      ContainerStateWaiting.
    properties:
      running:
        description: >-
          Details about a running container
        type: ContainerStateRunning
        required: false
      terminated:
        description: >-
          Details about a terminated container
        type: ContainerStateTerminated
        required: false
      waiting:
        description: >-
          Details about a waiting container
        type: ContainerStateWaiting
        required: false

  ContainerStateRunning:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ContainerStateRunning is a running state of a container.
    properties:
      startedAt:
        description: >-
          Time at which the container was last (re-)started
        type: timestamp
        required: false

  ContainerStateTerminated:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ContainerStateTerminated is a terminated state of a container.
    properties:
      containerID:
        description: >-
          Container's ID in the format 'docker://<container_id>'
        type: string
        required: false
      exitCode:
        description: >-
          Exit status from the last termination of the container
        type: integer
      finishedAt:
        description: >-
          Time at which the container last terminated
        type: timestamp
        required: false
      message:
        description: >-
          Message regarding the last termination of the container
        type: string
        required: false
      reason:
        description: >-
          (brief) reason from the last termination of the container
        type: string
        required: false
      signal:
        description: >-
          Signal from the last termination of the container
        type: integer
        required: false
      startedAt:
        description: >-
          Time at which previous execution of the container started
        type: timestamp
        required: false

  ContainerStateWaiting:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ContainerStateWaiting is a waiting state of a container.
    properties:
      message:
        description: >-
          Message regarding why the container is not yet running.
        type: string
        required: false
      reason:
        description: >-
          (brief) reason the container is not yet running.
        type: string
        required: false

  ContainerStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ContainerStatus contains details for the current status of this container.
    properties:
      containerID:
        description: >-
          Container's ID in the format 'docker://<container_id>'.
        type: string
        required: false
      image:
        description: >-
          The image the container is running. More info:
          https://kubernetes.io/docs/concepts/containers/images
        type: string
      imageID:
        description: >-
          ImageID of the container's image.
        type: string
      lastState:
        description: >-
          Details about the container's last termination condition.
        type: ContainerState
        required: false
      name:
        description: >-
          This must be a DNS_LABEL. Each container in a pod must have a unique name.
          Cannot be updated.
        type: string
      ready:
        description: >-
          Specifies whether the container has passed its readiness probe.
        type: boolean
      restartCount:
        description: >-
          The number of times the container has been restarted, currently based on the
          number of dead containers that have not yet been removed. Note that this is
          calculated from dead containers. But those containers are subject to garbage
          collection. This value will get capped at 5 by GC.
        type: integer
      started:
        description: >-
          Specifies whether the container has passed its startup probe. Initialized as
          false, becomes true after startupProbe is considered successful. Resets to false
          when the container is restarted, or if kubelet loses state temporarily. Is
          always true when no startupProbe is defined.
        type: boolean
        required: false
      state:
        description: >-
          Details about the container's current condition.
        type: ContainerState
        required: false

  CronJobSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CronJobSpec describes how the job execution will look like and when it will
      actually run.
    properties:
      concurrencyPolicy:
        description: >-
          Specifies how to treat concurrent executions of a Job. Valid values are: -
          "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids
          concurrent runs, skipping next run if previous run hasn't finished yet; -
          "Replace": cancels currently running job and replaces it with a new one
        type: string
        required: false
        constraints:
          - valid_values: [ Allow, Forbid, Replace ]
      failedJobsHistoryLimit:
        description: >-
          The number of failed finished jobs to retain. Value must be non-negative
          integer. Defaults to 1.
        type: Count
        required: false
      jobTemplate:
        description: >-
          Specifies the job that will be created when executing a CronJob.
        type: JobTemplateSpec
      schedule:
        description: >-
          The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
        type: string
      startingDeadlineSeconds:
        description: >-
          Optional deadline in seconds for starting the job if it misses scheduled time
          for any reason. Missed jobs executions will be counted as failed ones.
        type: integer
        required: false
      successfulJobsHistoryLimit:
        description: >-
          The number of successful finished jobs to retain. Value must be non-negative
          integer. Defaults to 3.
        type: Count
        required: false
      suspend:
        description: >-
          This flag tells the controller to suspend subsequent executions, it does not
          apply to already started executions. Defaults to false.
        type: boolean
        required: false

  CronJobStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CronJobStatus represents the current state of a cron job.
    properties:
      active:
        description: >-
          A list of pointers to currently running jobs.
        type: list
        entry_schema: ObjectReference
        required: false
      lastScheduleTime:
        description: >-
          Information when was the last time the job was successfully scheduled.
        type: timestamp
        required: false
      lastSuccessfulTime:
        description: >-
          Information when was the last time the job successfully completed.
        type: timestamp
        required: false

  CrossVersionObjectReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CrossVersionObjectReference contains enough information to let you identify the
      referred resource.
    properties:
      apiVersion:
        description: >-
          API version of the referent
        type: string
        required: false
      kind:
        description: >-
          Kind of the referent; More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        type: string
      name:
        description: >-
          Name of the referent; More info:
          http://kubernetes.io/docs/user-guide/identifiers#names
        type: string

  CustomResourceColumnDefinition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceColumnDefinition specifies a column for server side printing.
    properties:
      description:
        description: >-
          description is a human readable description of this column.
        type: string
        required: false
      format:
        description: >-
          format is an optional OpenAPI type definition for this column. The 'name' format
          is applied to the primary identifier column to assist in clients identifying
          column is the resource name. See
          https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
          for details.
        type: string
        required: false
      jsonPath:
        description: >-
          jsonPath is a simple JSON path (i.e. with array notation) which is evaluated
          against each custom resource to produce the value for this column.
        type: string
      name:
        description: >-
          name is a human readable name for the column.
        type: string
      priority:
        description: >-
          priority is an integer defining the relative importance of this column compared
          to others. Lower numbers are considered higher priority. Columns that may be
          omitted in limited space scenarios should be given a priority greater than 0.
        type: integer
        required: false
      type:
        description: >-
          type is an OpenAPI type definition for this column. See
          https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
          for details.
        type: string

  CustomResourceConversion:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceConversion describes how to convert different versions of a CR.
    properties:
      strategy:
        description: >-
          strategy specifies how custom resources are converted between versions. Allowed
          values are: - `None`: The converter only change the apiVersion and would not
          touch any other field in the custom resource. - `Webhook`: API Server will call
          to an external webhook to do the conversion. Additional information
           is needed for this option. This requires spec.preserveUnknownFields to be
          false, and spec.conversion.webhook to be set.
        type: string
        constraints:
          - valid_values: [ None, Webhook ]
      webhook:
        description: >-
          webhook describes how to call the conversion webhook. Required when `strategy`
          is set to `Webhook`.
        type: WebhookConversion
        required: false

  CustomResourceDefinitionCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceDefinitionCondition contains details for the current condition of
      this pod.
    properties:
      lastTransitionTime:
        description: >-
          lastTransitionTime last time the condition transitioned from one status to
          another.
        type: timestamp
        required: false
      message:
        description: >-
          message is a human-readable message indicating details about last transition.
        type: string
        required: false
      reason:
        description: >-
          reason is a unique, one-word, CamelCase reason for the condition's last
          transition.
        type: string
        required: false
      status:
        description: >-
          status is the status of the condition. Can be True, False, Unknown.
        type: string
      type:
        description: >-
          type is the type of the condition. Types include Established, NamesAccepted and
          Terminating.
        type: string

  CustomResourceDefinitionNames:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceDefinitionNames indicates the names to serve this
      CustomResourceDefinition
    properties:
      categories:
        description: >-
          categories is a list of grouped resources this custom resource belongs to (e.g.
          'all'). This is published in API discovery documents, and used by clients to
          support invocations like `kubectl get all`.
        type: list
        entry_schema: string
        required: false
      kind:
        description: >-
          kind is the serialized kind of the resource. It is normally CamelCase and
          singular. Custom resource instances will use this value as the `kind` attribute
          in API calls.
        type: string
      listKind:
        description: >-
          listKind is the serialized kind of the list for this resource. Defaults to
          "`kind`List".
        type: string
        required: false
      plural:
        description: >-
          plural is the plural name of the resource to serve. The custom resources are
          served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the
          CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all
          lowercase.
        type: string
      shortNames:
        description: >-
          shortNames are short names for the resource, exposed in API discovery documents,
          and used by clients to support invocations like `kubectl get <shortname>`. It
          must be all lowercase.
        type: list
        entry_schema: string
        required: false
      singular:
        description: >-
          singular is the singular name of the resource. It must be all lowercase.
          Defaults to lowercased `kind`.
        type: string
        required: false

  CustomResourceDefinitionSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceDefinitionSpec describes how a user wants their resource to appear
    properties:
      conversion:
        description: >-
          conversion defines conversion settings for the CRD.
        type: CustomResourceConversion
        required: false
      group:
        description: >-
          group is the API group of the defined custom resource. The custom resources are
          served under `/apis/<group>/...`. Must match the name of the
          CustomResourceDefinition (in the form `<names.plural>.<group>`).
        type: string
      names:
        description: >-
          names specify the resource and kind names for the custom resource.
        type: CustomResourceDefinitionNames
      preserveUnknownFields:
        description: >-
          preserveUnknownFields indicates that object fields which are not specified in
          the OpenAPI schema should be preserved when persisting to storage. apiVersion,
          kind, metadata and known fields inside metadata are always preserved. This field
          is deprecated in favor of setting `x-preserve-unknown-fields` to true in
          `spec.versions[*].schema.openAPIV3Schema`. See
          https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields
          for details.
        type: boolean
        required: false
      scope:
        description: >-
          scope indicates whether the defined custom resource is cluster- or
          namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
        type: string
        constraints:
          - valid_values: [ Cluster, Namespaced ]
      versions:
        description: >-
          versions is the list of all API versions of the defined custom resource. Version
          names are used to compute the order in which served versions are listed in API
          discovery. If the version string is "kube-like", it will sort above non
          "kube-like" version strings, which are ordered lexicographically. "Kube-like"
          versions start with a "v", then are followed by a number (the major version),
          then optionally the string "alpha" or "beta" and another number (the minor
          version). These are sorted first by GA > beta > alpha (where GA is a version
          with no suffix such as beta or alpha), and then by comparing major version, then
          minor version. An example sorted list of versions: v10, v2, v1, v11beta2,
          v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
        type: list
        entry_schema: CustomResourceDefinitionVersion

  CustomResourceDefinitionStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceDefinitionStatus indicates the state of the
      CustomResourceDefinition
    properties:
      acceptedNames:
        description: >-
          acceptedNames are the names that are actually being used to serve discovery.
          They may be different than the names in spec.
        type: CustomResourceDefinitionNames
        required: false
      conditions:
        description: >-
          conditions indicate state for particular aspects of a CustomResourceDefinition
        type: list
        entry_schema: CustomResourceDefinitionCondition
        required: false
      storedVersions:
        description: >-
          storedVersions lists all versions of CustomResources that were ever persisted.
          Tracking these versions allows a migration path for stored versions in etcd. The
          field is mutable so a migration controller can finish a migration to another
          version (ensuring no old objects are left in storage), and then remove the rest
          of the versions from this list. Versions may not be removed from `spec.versions`
          while they exist in this list.
        type: list
        entry_schema: string
        required: false

  CustomResourceDefinitionVersion:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceDefinitionVersion describes a version for CRD.
    properties:
      additionalPrinterColumns:
        description: >-
          additionalPrinterColumns specifies additional columns returned in Table output.
          See
          https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables
          for details. If no columns are specified, a single column displaying the age of
          the custom resource is used.
        type: list
        entry_schema: CustomResourceColumnDefinition
        required: false
      deprecated:
        description: >-
          deprecated indicates this version of the custom resource API is deprecated. When
          set to true, API requests to this version receive a warning header in the server
          response. Defaults to false.
        type: boolean
        required: false
      deprecationWarning:
        description: >-
          deprecationWarning overrides the default warning returned to API clients. May
          only be set when `deprecated` is true. The default warning indicates this
          version is deprecated and recommends use of the newest served version of equal
          or greater stability, if one exists.
        type: string
        required: false
      name:
        description: >-
          name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are
          served under this version at `/apis/<group>/<version>/...` if `served` is true.
        type: string
      schema:
        description: >-
          schema describes the schema used for validation, pruning, and defaulting of this
          version of the custom resource.
        type: CustomResourceValidation
        required: false
      served:
        description: >-
          served is a flag enabling/disabling this version from being served via REST APIs
        type: boolean
      storage:
        description: >-
          storage indicates this version should be used when persisting custom resources
          to storage. There must be exactly one version with storage=true.
        type: boolean
      subresources:
        description: >-
          subresources specify what subresources this version of the defined custom
          resource have.
        type: CustomResourceSubresources
        required: false

  CustomResourceSubresourceScale:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceSubresourceScale defines how to serve the scale subresource for
      CustomResources.
    properties:
      labelSelectorPath:
        description: >-
          labelSelectorPath defines the JSON path inside of a custom resource that
          corresponds to Scale `status.selector`. Only JSON paths without the array
          notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be
          set to work with HorizontalPodAutoscaler. The field pointed by this JSON path
          must be a string field (not a complex selector struct) which contains a
          serialized label selector in string form. More info:
          https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource
          If there is no value under the given path in the custom resource, the
          `status.selector` value in the `/scale` subresource will default to the empty
          string.
        type: string
        required: false
      specReplicasPath:
        description: >-
          specReplicasPath defines the JSON path inside of a custom resource that
          corresponds to Scale `spec.replicas`. Only JSON paths without the array notation
          are allowed. Must be a JSON Path under `.spec`. If there is no value under the
          given path in the custom resource, the `/scale` subresource will return an error
          on GET.
        type: string
      statusReplicasPath:
        description: >-
          statusReplicasPath defines the JSON path inside of a custom resource that
          corresponds to Scale `status.replicas`. Only JSON paths without the array
          notation are allowed. Must be a JSON Path under `.status`. If there is no value
          under the given path in the custom resource, the `status.replicas` value in the
          `/scale` subresource will default to 0.
        type: string

  CustomResourceSubresourceStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceSubresourceStatus defines how to serve the status subresource for
      CustomResources. Status is represented by the `.status` JSON path inside of a
      CustomResource. When set, * exposes a /status subresource for the custom
      resource * PUT requests to the /status subresource take a custom resource
      object, and ignore changes to anything except the status stanza * PUT/POST/PATCH
      requests to the custom resource ignore changes to the status stanza

  CustomResourceSubresources:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceSubresources defines the status and scale subresources for
      CustomResources.
    properties:
      scale:
        description: >-
          scale indicates the custom resource should serve a `/scale` subresource that
          returns an `autoscaling/v1` Scale object.
        type: CustomResourceSubresourceScale
        required: false
      status:
        description: >-
          status indicates the custom resource should serve a `/status` subresource. When
          enabled: 1. requests to the custom resource primary endpoint ignore changes to
          the `status` stanza of the object. 2. requests to the custom resource `/status`
          subresource ignore changes to anything other than the `status` stanza of the
          object.
        type: CustomResourceSubresourceStatus
        required: false

  CustomResourceValidation:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      CustomResourceValidation is a list of validation methods for CustomResources.
    properties:
      openAPIV3Schema:
        description: >-
          openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
        type: JSONSchemaProps
        required: false

  DaemonEndpoint:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DaemonEndpoint contains information about a single Daemon endpoint.
    properties:
      Port:
        description: >-
          Port number of the given endpoint.
        type: integer

  DaemonSetCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DaemonSetCondition describes the state of a DaemonSet at a certain point.
    properties:
      lastTransitionTime:
        description: >-
          Last time the condition transitioned from one status to another.
        type: timestamp
        required: false
      message:
        description: >-
          A human readable message indicating details about the transition.
        type: string
        required: false
      reason:
        description: >-
          The reason for the condition's last transition.
        type: string
        required: false
      status:
        description: >-
          Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: >-
          Type of DaemonSet condition.
        type: string

  DaemonSetSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DaemonSetSpec is the specification of a daemon set.
    derived_from: PodTemplateOwner
    properties:
      minReadySeconds:
        description: >-
          The minimum number of seconds for which a newly created DaemonSet pod should be
          ready without any of its container crashing, for it to be considered available.
          Defaults to 0 (pod will be considered available as soon as it is ready).
        type: integer
        required: false
      revisionHistoryLimit:
        description: >-
          The number of old history to retain to allow rollback. This is a pointer to
          distinguish between explicit zero and not specified. Defaults to 10.
        type: integer
        required: false
      selector:
        description: >-
          A label query over pods that are managed by the daemon set. Must match in order
          to be controlled. It must match the pod template's labels. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        type: LabelSelector
      template:
        description: >-
          An object that describes the pod that will be created. The DaemonSet will create
          exactly one copy of this pod on every node that matches the template's node
          selector (or on every node if no node selector is specified). More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
        type: PodTemplateSpec
      updateStrategy:
        description: >-
          An update strategy to replace existing DaemonSet pods with new pods.
        type: DaemonSetUpdateStrategy
        required: false

  DaemonSetStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DaemonSetStatus represents the current status of a daemon set.
    properties:
      collisionCount:
        description: >-
          Count of hash collisions for the DaemonSet. The DaemonSet controller uses this
          field as a collision avoidance mechanism when it needs to create the name for
          the newest ControllerRevision.
        type: integer
        required: false
      conditions:
        description: >-
          Represents the latest available observations of a DaemonSet's current state.
        type: list
        entry_schema: DaemonSetCondition
        required: false
      currentNumberScheduled:
        description: >-
          The number of nodes that are running at least 1 daemon pod and are supposed to
          run the daemon pod. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        type: integer
      desiredNumberScheduled:
        description: >-
          The total number of nodes that should be running the daemon pod (including nodes
          correctly running the daemon pod). More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        type: integer
      numberAvailable:
        description: >-
          The number of nodes that should be running the daemon pod and have one or more
          of the daemon pod running and available (ready for at least
          spec.minReadySeconds)
        type: integer
        required: false
      numberMisscheduled:
        description: >-
          The number of nodes that are running the daemon pod, but are not supposed to run
          the daemon pod. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        type: integer
      numberReady:
        description: >-
          The number of nodes that should be running the daemon pod and have one or more
          of the daemon pod running and ready.
        type: integer
      numberUnavailable:
        description: >-
          The number of nodes that should be running the daemon pod and have none of the
          daemon pod running and available (ready for at least spec.minReadySeconds)
        type: integer
        required: false
      observedGeneration:
        description: >-
          The most recent generation observed by the daemon set controller.
        type: integer
        required: false
      updatedNumberScheduled:
        description: >-
          The total number of nodes that are running updated daemon pod
        type: integer
        required: false

  DaemonSetUpdateStrategy:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DaemonSetUpdateStrategy is a struct used to control the update strategy for a
      DaemonSet.
    properties:
      rollingUpdate:
        description: >-
          Rolling update config params. Present only if type = "RollingUpdate".
        type: RollingUpdateDaemonSet
        required: false
      type:
        description: >-
          Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is
          RollingUpdate.
        type: string
        required: false

  DeleteOptions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DeleteOptions may be provided when deleting an API object.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      dryRun:
        description: >-
          When present, indicates that modifications should not be persisted. An invalid
          or unrecognized dryRun directive will result in an error response and no further
          processing of the request. Valid values are: - All: all dry run stages will be
          processed
        type: list
        entry_schema: string
        required: false
      gracePeriodSeconds:
        description: >-
          The duration in seconds before the object should be deleted. Value must be
          non-negative integer. The value zero indicates delete immediately. If this value
          is nil, the default grace period for the specified type will be used. Defaults
          to a per object value if not specified. zero means delete immediately.
        type: integer
        required: false
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      orphanDependents:
        description: >-
          Deprecated: please use the PropagationPolicy, this field will be deprecated in
          1.7. Should the dependent objects be orphaned. If true/false, the "orphan"
          finalizer will be added to/removed from the object's finalizers list. Either
          this field or PropagationPolicy may be set, but not both.
        type: boolean
        required: false
      preconditions:
        description: >-
          Must be fulfilled before a deletion is carried out. If not possible, a 409
          Conflict status will be returned.
        type: Preconditions
        required: false
      propagationPolicy:
        description: >-
          Whether and how garbage collection will be performed. Either this field or
          OrphanDependents may be set, but not both. The default policy is decided by the
          existing finalizer set in the metadata.finalizers and the resource-specific
          default policy. Acceptable values are: 'Orphan' - orphan the dependents;
          'Background' - allow the garbage collector to delete the dependents in the
          background; 'Foreground' - a cascading policy that deletes all dependents in the
          foreground.
        type: string
        required: false
        constraints:
          - valid_values: [ Orphan, Background, Foreground ]

  DeploymentCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DeploymentCondition describes the state of a deployment at a certain point.
    properties:
      lastTransitionTime:
        description: >-
          Last time the condition transitioned from one status to another.
        type: timestamp
        required: false
      lastUpdateTime:
        description: >-
          The last time this condition was updated.
        type: timestamp
        required: false
      message:
        description: >-
          A human readable message indicating details about the transition.
        type: string
        required: false
      reason:
        description: >-
          The reason for the condition's last transition.
        type: string
        required: false
      status:
        description: >-
          Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: >-
          Type of deployment condition.
        type: string

  DeploymentSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DeploymentSpec is the specification of the desired behavior of the Deployment.
    derived_from: PodTemplateOwner
    properties:
      minReadySeconds:
        description: >-
          Minimum number of seconds for which a newly created pod should be ready without
          any of its container crashing, for it to be considered available. Defaults to 0
          (pod will be considered available as soon as it is ready)
        type: integer
        required: false
      paused:
        description: >-
          Indicates that the deployment is paused.
        type: boolean
        required: false
      progressDeadlineSeconds:
        description: >-
          The maximum time in seconds for a deployment to make progress before it is
          considered to be failed. The deployment controller will continue to process
          failed deployments and a condition with a ProgressDeadlineExceeded reason will
          be surfaced in the deployment status. Note that progress will not be estimated
          during the time a deployment is paused. Defaults to 600s.
        type: integer
        required: false
      replicas:
        description: >-
          Number of desired pods. This is a pointer to distinguish between explicit zero
          and not specified. Defaults to 1.
        type: integer
        required: false
      revisionHistoryLimit:
        description: >-
          The number of old ReplicaSets to retain to allow rollback. This is a pointer to
          distinguish between explicit zero and not specified. Defaults to 10.
        type: integer
        required: false
      selector:
        description: >-
          Label selector for pods. Existing ReplicaSets whose pods are selected by this
          will be the ones affected by this deployment. It must match the pod template's
          labels.
        type: LabelSelector
        required: false
      strategy:
        description: >-
          The deployment strategy to use to replace existing pods with new ones.
        type: DeploymentStrategy
        required: false
      template:
        description: >-
          Template describes the pods that will be created.
        type: PodTemplateSpec

  DeploymentStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DeploymentStatus is the most recently observed status of the Deployment.
    properties:
      availableReplicas:
        description: >-
          Total number of available pods (ready for at least minReadySeconds) targeted by
          this deployment.
        type: integer
        required: false
      collisionCount:
        description: >-
          Count of hash collisions for the Deployment. The Deployment controller uses this
          field as a collision avoidance mechanism when it needs to create the name for
          the newest ReplicaSet.
        type: integer
        required: false
      conditions:
        description: >-
          Represents the latest available observations of a deployment's current state.
        type: list
        entry_schema: DeploymentCondition
        required: false
      observedGeneration:
        description: >-
          The generation observed by the deployment controller.
        type: integer
        required: false
      readyReplicas:
        description: >-
          Total number of ready pods targeted by this deployment.
        type: integer
        required: false
      replicas:
        description: >-
          Total number of non-terminated pods targeted by this deployment (their labels
          match the selector).
        type: integer
        required: false
      unavailableReplicas:
        description: >-
          Total number of unavailable pods targeted by this deployment. This is the total
          number of pods that are still required for the deployment to have 100% available
          capacity. They may either be pods that are running but not yet available or pods
          that still have not been created.
        type: integer
        required: false
      updatedReplicas:
        description: >-
          Total number of non-terminated pods targeted by this deployment that have the
          desired template spec.
        type: integer
        required: false

  DeploymentStrategy:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DeploymentStrategy describes how to replace existing pods with new ones.
    properties:
      rollingUpdate:
        description: >-
          Rolling update config params. Present only if DeploymentStrategyType =
          RollingUpdate.
        type: RollingUpdateDeployment
        required: false
      type:
        description: >-
          Type of deployment. Can be "Recreate" or "RollingUpdate". Default is
          RollingUpdate.
        type: string
        required: false

  DiscoveryEndpointPort:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EndpointPort represents a Port used by an EndpointSlice
    properties:
      appProtocol:
        description: >-
          The application protocol for this port. This field follows standard Kubernetes
          label syntax. Un-prefixed names are reserved for IANA standard service names (as
          per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard
          protocols should use prefixed names such as mycompany.com/my-custom-protocol.
        type: string
        required: false
      name:
        description: >-
          The name of this port. All ports in an EndpointSlice must have a unique name. If
          the EndpointSlice is dervied from a Kubernetes service, this corresponds to the
          Service.ports[].name. Name must either be an empty string or pass DNS_LABEL
          validation: * must be no more than 63 characters long. * must consist of lower
          case alphanumeric characters or '-'. * must start and end with an alphanumeric
          character. Default is empty string.
        type: string
        required: false
      port:
        description: >-
          The port number of the endpoint. If this is not specified, ports are not
          restricted and must be interpreted in the context of the specific consumer.
        type: integer
        required: false
      protocol:
        description: >-
          The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
        type: string
        required: false

  DownwardAPIProjection:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents downward API info for projecting into a projected volume. Note that
      this is identical to a downwardAPI volume source without the default mode.
    properties:
      items:
        description: >-
          Items is a list of DownwardAPIVolume file
        type: list
        entry_schema: DownwardAPIVolumeFile
        required: false

  DownwardAPIVolumeFile:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DownwardAPIVolumeFile represents information to create the file containing the
      pod field
    properties:
      fieldRef:
        description: >-
          Required: Selects a field of the pod: only annotations, labels, name and
          namespace are supported.
        type: ObjectFieldSelector
        required: false
      mode:
        description: >-
          Optional: mode bits used to set permissions on this file, must be an octal value
          between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both
          octal and decimal values, JSON requires decimal values for mode bits. If not
          specified, the volume defaultMode will be used. This might be in conflict with
          other options that affect the file mode, like fsGroup, and the result can be
          other mode bits set.
        type: FileMode
        required: false
      path:
        description: >-
          Required: Path is the relative path name of the file to be created. Must not be
          absolute or contain the '..' path. Must be utf-8 encoded. The first item of the
          relative path must not start with '..'
        type: string
      resourceFieldRef:
        description: >-
          Selects a resource of the container: only resources limits and requests
          (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently
          supported.
        type: ResourceFieldSelector
        required: false

  DownwardAPIVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      DownwardAPIVolumeSource represents a volume containing downward API info.
      Downward API volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: >-
          Optional: mode bits to use on created files by default. Must be a Optional: mode
          bits used to set permissions on created files by default. Must be an octal value
          between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both
          octal and decimal values, JSON requires decimal values for mode bits. Defaults
          to 0644. Directories within the path are not affected by this setting. This
          might be in conflict with other options that affect the file mode, like fsGroup,
          and the result can be other mode bits set.
        type: FileMode
        required: false
      items:
        description: >-
          Items is a list of downward API volume file
        type: list
        entry_schema: DownwardAPIVolumeFile
        required: false

  EmptyDirVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents an empty directory for a pod. Empty directory volumes support
      ownership management and SELinux relabeling.
    properties:
      medium:
        description: >-
          What type of storage medium should back this directory. The default is "" which
          means to use the node's default medium. Must be an empty string (default) or
          Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        type: string
        required: false
        constraints:
          - valid_values: [ '', Memory ]
      sizeLimit:
        description: >-
          Total amount of local storage required for this EmptyDir volume. The size limit
          is also applicable for memory medium. The maximum usage on memory medium
          EmptyDir would be the minimum value between the SizeLimit specified here and the
          sum of memory limits of all containers in a pod. The default is nil which means
          that the limit is undefined. More info:
          http://kubernetes.io/docs/user-guide/volumes#emptydir
        type: Quantity
        required: false

  Endpoint:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Endpoint represents a single logical "backend" implementing a service.
    properties:
      addresses:
        description: >-
          addresses of this endpoint. The contents of this field are interpreted according
          to the corresponding EndpointSlice addressType field. Consumers must handle
          different types of addresses in the context of their own capabilities. This must
          contain at least one address but no more than 100.
        type: list
        entry_schema: string
      conditions:
        description: >-
          conditions contains information about the current status of the endpoint.
        type: EndpointConditions
        required: false
      deprecatedTopology:
        description: >-
          deprecatedTopology contains topology information part of the v1beta1 API. This
          field is deprecated, and will be removed when the v1beta1 API is removed (no
          sooner than kubernetes v1.24). While this field can hold values, it is not
          writable through the v1 API, and any attempts to write to it will be silently
          ignored. Topology information can be found in the zone and nodeName fields
          instead.
        type: map
        entry_schema: string
        required: false
      hints:
        description: >-
          hints contains information associated with how an endpoint should be consumed.
        type: EndpointHints
        required: false
      hostname:
        description: >-
          hostname of this endpoint. This field may be used by consumers of endpoints to
          distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints
          which use the same hostname should be considered fungible (e.g. multiple A
          values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
        type: Hostname
        required: false
      nodeName:
        description: >-
          nodeName represents the name of the Node hosting this endpoint. This can be used
          to determine endpoints local to a Node. This field can be enabled with the
          EndpointSliceNodeName feature gate.
        type: string
        required: false
      targetRef:
        description: >-
          targetRef is a reference to a Kubernetes object that represents this endpoint.
        type: ObjectReference
        required: false
      zone:
        description: >-
          zone is the name of the Zone this endpoint exists in.
        type: string
        required: false

  EndpointAddress:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EndpointAddress is a tuple that describes single IP address.
    properties:
      hostname:
        description: >-
          The Hostname of this endpoint
        type: string
        required: false
      ip:
        description: >-
          The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local
          (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted
          but not fully supported on all platforms. Also, certain kubernetes components,
          like kube-proxy, are not IPv6 ready.
        type: IPAddress
      nodeName:
        description: >-
          Optional: Node hosting this endpoint. This can be used to determine endpoints
          local to a node.
        type: string
        required: false
      targetRef:
        description: >-
          Reference to object providing the endpoint.
        type: ObjectReference
        required: false

  EndpointConditions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EndpointConditions represents the current condition of an endpoint.
    properties:
      ready:
        description: >-
          ready indicates that this endpoint is prepared to receive traffic, according to
          whatever system is managing the endpoint. A nil value indicates an unknown
          state. In most cases consumers should interpret this unknown state as ready. For
          compatibility reasons, ready should never be "true" for terminating endpoints.
        type: boolean
        required: false
      serving:
        description: >-
          serving is identical to ready except that it is set regardless of the
          terminating state of endpoints. This condition should be set to true for a ready
          endpoint that is terminating. If nil, consumers should defer to the ready
          condition. This field can be enabled with the EndpointSliceTerminatingCondition
          feature gate.
        type: boolean
        required: false
      terminating:
        description: >-
          terminating indicates that this endpoint is terminating. A nil value indicates
          an unknown state. Consumers should interpret this unknown state to mean that the
          endpoint is not terminating. This field can be enabled with the
          EndpointSliceTerminatingCondition feature gate.
        type: boolean
        required: false

  EndpointHints:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EndpointHints provides hints describing how an endpoint should be consumed.
    properties:
      forZones:
        description: >-
          forZones indicates the zone(s) this endpoint should be consumed by to enable
          topology aware routing.
        type: list
        entry_schema: ForZone
        required: false

  EndpointPort:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EndpointPort is a tuple that describes a single port.
    properties:
      appProtocol:
        description: >-
          The application protocol for this port. This field follows standard Kubernetes
          label syntax. Un-prefixed names are reserved for IANA standard service names (as
          per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard
          protocols should use prefixed names such as mycompany.com/my-custom-protocol.
        type: string
        required: false
      name:
        description: >-
          The name of this port. This must match the 'name' field in the corresponding
          ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
        type: string
        required: false
      port:
        description: >-
          The port number of the endpoint.
        type: Port
      protocol:
        description: >-
          The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
        type: string
        required: false
        constraints:
          - valid_values: [ UDP, TCP, SCTP ]

  EndpointSubset:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EndpointSubset is a group of addresses with a common set of ports. The expanded
      set of endpoints is the Cartesian product of Addresses x Ports. For example,
      given:
       {
       Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
       Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
       }
      The resulting set of endpoints can be viewed as:
       a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
       b: [ 10.10.1.1:309, 10.10.2.2:309 ]
    properties:
      addresses:
        description: >-
          IP addresses which offer the related ports that are marked as ready. These
          endpoints should be considered safe for load balancers and clients to utilize.
        type: list
        entry_schema: EndpointAddress
        required: false
      notReadyAddresses:
        description: >-
          IP addresses which offer the related ports but are not currently marked as ready
          because they have not yet finished starting, have recently failed a readiness
          check, or have recently failed a liveness check.
        type: list
        entry_schema: EndpointAddress
        required: false
      ports:
        description: >-
          Port numbers available on the related IP addresses.
        type: list
        entry_schema: EndpointPort
        required: false

  EnvFromSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EnvFromSource represents the source of a set of ConfigMaps
    properties:
      configMapRef:
        description: >-
          The ConfigMap to select from
        type: ConfigMapEnvSource
        required: false
      prefix:
        description: >-
          An optional identifier to prepend to each key in the ConfigMap. Must be a
          C_IDENTIFIER.
        type: string
        required: false
      secretRef:
        description: >-
          The Secret to select from
        type: SecretEnvSource
        required: false

  EnvVar:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EnvVar represents an environment variable present in a Container.
    properties:
      name:
        description: >-
          Name of the environment variable. Must be a C_IDENTIFIER.
        type: string
      value:
        description: >-
          Variable references $(VAR_NAME) are expanded using the previously defined
          environment variables in the container and any service environment variables. If
          a variable cannot be resolved, the reference in the input string will be
          unchanged. Double $$ are reduced to a single $, which allows for escaping the
          $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal
          "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether
          the variable exists or not. Defaults to "".
        type: string
        required: false
      valueFrom:
        description: >-
          Source for the environment variable's value. Cannot be used if value is not
          empty.
        type: EnvVarSource
        required: false

  EnvVarSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EnvVarSource represents a source for the value of an EnvVar.
    properties:
      configMapKeyRef:
        description: >-
          Selects a key of a ConfigMap.
        type: ConfigMapKeySelector
        required: false
      fieldRef:
        description: >-
          Selects a field of the pod: supports metadata.name, metadata.namespace,
          `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName,
          spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        type: ObjectFieldSelector
        required: false
      resourceFieldRef:
        description: >-
          Selects a resource of the container: only resources limits and requests
          (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu,
          requests.memory and requests.ephemeral-storage) are currently supported.
        type: ResourceFieldSelector
        required: false
      secretKeyRef:
        description: >-
          Selects a key of a secret in the pod's namespace
        type: SecretKeySelector
        required: false

  EphemeralContainer:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      An EphemeralContainer is a container that may be added temporarily to an
      existing pod for user-initiated activities such as debugging. Ephemeral
      containers have no resource or scheduling guarantees, and they will not be
      restarted when they exit or when a pod is removed or restarted. If an ephemeral
      container causes a pod to exceed its resource allocation, the pod may be
      evicted. Ephemeral containers may not be added by directly updating the pod
      spec. They must be added via the pod's ephemeralcontainers subresource, and they
      will appear in the pod spec once added. This is an alpha feature enabled by the
      EphemeralContainers feature flag.
    properties:
      args:
        description: >-
          Arguments to the entrypoint. The docker image's CMD is used if this is not
          provided. Variable references $(VAR_NAME) are expanded using the container's
          environment. If a variable cannot be resolved, the reference in the input string
          will be unchanged. Double $$ are reduced to a single $, which allows for
          escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string
          literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of
          whether the variable exists or not. Cannot be updated. More info:
          https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        type: list
        entry_schema: string
        required: false
      command:
        description: >-
          Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is
          used if this is not provided. Variable references $(VAR_NAME) are expanded using
          the container's environment. If a variable cannot be resolved, the reference in
          the input string will be unchanged. Double $$ are reduced to a single $, which
          allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the
          string literal "$(VAR_NAME)". Escaped references will never be expanded,
          regardless of whether the variable exists or not. Cannot be updated. More info:
          https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        type: list
        entry_schema: string
        required: false
      env:
        description: >-
          List of environment variables to set in the container. Cannot be updated.
        type: list
        entry_schema: EnvVar
        required: false
      envFrom:
        description: >-
          List of sources to populate environment variables in the container. The keys
          defined within a source must be a C_IDENTIFIER. All invalid keys will be
          reported as an event when the container is starting. When a key exists in
          multiple sources, the value associated with the last source will take
          precedence. Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
        type: list
        entry_schema: EnvFromSource
        required: false
      image:
        description: >-
          Docker image name. More info:
          https://kubernetes.io/docs/concepts/containers/images
        type: string
        required: false
      imagePullPolicy:
        description: >-
          Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if
          :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More
          info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        type: string
        required: false
      lifecycle:
        description: >-
          Lifecycle is not allowed for ephemeral containers.
        type: Lifecycle
        required: false
      livenessProbe:
        description: >-
          Probes are not allowed for ephemeral containers.
        type: Probe
        required: false
      name:
        description: >-
          Name of the ephemeral container specified as a DNS_LABEL. This name must be
          unique among all containers, init containers and ephemeral containers.
        type: string
      ports:
        description: >-
          Ports are not allowed for ephemeral containers.
        type: list
        entry_schema: ContainerPort
        required: false
      readinessProbe:
        description: >-
          Probes are not allowed for ephemeral containers.
        type: Probe
        required: false
      resources:
        description: >-
          Resources are not allowed for ephemeral containers. Ephemeral containers use
          spare resources already allocated to the pod.
        type: ResourceRequirements
        required: false
      securityContext:
        description: >-
          Optional: SecurityContext defines the security options the ephemeral container
          should be run with. If set, the fields of SecurityContext override the
          equivalent fields of PodSecurityContext.
        type: SecurityContext
        required: false
      startupProbe:
        description: >-
          Probes are not allowed for ephemeral containers.
        type: Probe
        required: false
      stdin:
        description: >-
          Whether this container should allocate a buffer for stdin in the container
          runtime. If this is not set, reads from stdin in the container will always
          result in EOF. Default is false.
        type: boolean
        required: false
      stdinOnce:
        description: >-
          Whether the container runtime should close the stdin channel after it has been
          opened by a single attach. When stdin is true the stdin stream will remain open
          across multiple attach sessions. If stdinOnce is set to true, stdin is opened on
          container start, is empty until the first client attaches to stdin, and then
          remains open and accepts data until the client disconnects, at which time stdin
          is closed and remains closed until the container is restarted. If this flag is
          false, a container processes that reads from stdin will never receive an EOF.
          Default is false
        type: boolean
        required: false
      targetContainerName:
        description: >-
          If set, the name of the container from PodSpec that this ephemeral container
          targets. The ephemeral container will be run in the namespaces (IPC, PID, etc)
          of this container. If not set then the ephemeral container is run in whatever
          namespaces are shared for the pod. Note that the container runtime must support
          this feature.
        type: string
        required: false
      terminationMessagePath:
        description: >-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem. Message written is
          intended to be brief final status, such as an assertion failure message. Will be
          truncated by the node if greater than 4096 bytes. The total message length
          across all containers will be limited to 12kb. Defaults to /dev/termination-log.
          Cannot be updated.
        type: string
        required: false
      terminationMessagePolicy:
        description: >-
          Indicate how the termination message should be populated. File will use the
          contents of terminationMessagePath to populate the container status message on
          both success and failure. FallbackToLogsOnError will use the last chunk of
          container log output if the termination message file is empty and the container
          exited with an error. The log output is limited to 2048 bytes or 80 lines,
          whichever is smaller. Defaults to File. Cannot be updated.
        type: string
        required: false
      tty:
        description: >-
          Whether this container should allocate a TTY for itself, also requires 'stdin'
          to be true. Default is false.
        type: boolean
        required: false
      volumeDevices:
        description: >-
          volumeDevices is the list of block devices to be used by the container.
        type: list
        entry_schema: VolumeDevice
        required: false
      volumeMounts:
        description: >-
          Pod volumes to mount into the container's filesystem. Cannot be updated.
        type: list
        entry_schema: VolumeMount
        required: false
      workingDir:
        description: >-
          Container's working directory. If not specified, the container runtime's default
          will be used, which might be configured in the container image. Cannot be
          updated.
        type: string
        required: false

  EphemeralVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents an ephemeral volume that is handled by a normal storage driver.
    properties:
      volumeClaimTemplate:
        description: >-
          Will be used to create a stand-alone PVC to provision the volume. The pod in
          which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e.
          the PVC will be deleted together with the pod. The name of the PVC will be `<pod
          name>-<volume name>` where `<volume name>` is the name from the
          `PodSpec.Volumes` array entry. Pod validation will reject the pod if the
          concatenated name is not valid for a PVC (for example, too long).

          An existing PVC with that name that is not owned by the pod will *not* be used
          for the pod to avoid using an unrelated volume by mistake. Starting the pod is
          then blocked until the unrelated PVC is removed. If such a pre-created PVC is
          meant to be used by the pod, the PVC has to updated with an owner reference to
          the pod once the pod exists. Normally this should not be necessary, but it may
          be useful when manually reconstructing a broken cluster.

          This field is read-only and no changes will be made by Kubernetes to the PVC
          after it has been created.

          Required, must not be nil.
        type: PersistentVolumeClaimTemplate
        required: false

  EventSeries:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EventSeries contain information on series of events, i.e. thing that was/is
      happening continuously for some time.
    properties:
      count:
        description: >-
          Number of occurrences in this series up to the last heartbeat time
        type: integer
        required: false
      lastObservedTime:
        description: >-
          Time of the last occurrence observed
        type: timestamp
        required: false

  EventSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EventSource contains information for an event.
    properties:
      component:
        description: >-
          Component from which the event is generated.
        type: string
        required: false
      host:
        description: >-
          Node name on which the event is generated.
        type: string
        required: false

  EventsEventSeries:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      EventSeries contain information on series of events, i.e. thing that was/is
      happening continuously for some time. How often to update the EventSeries is up
      to the event reporters. The default event reporter in
      "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is
      updated on heartbeats and can guide customized reporter implementations.
    properties:
      count:
        description: >-
          count is the number of occurrences in this series up to the last heartbeat time.
        type: integer
      lastObservedTime:
        description: >-
          lastObservedTime is the time when last Event from the series was seen before
          last heartbeat.
        type: timestamp

  ExecAction:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ExecAction describes a "run in container" action.
    properties:
      command:
        description: >-
          Command is the command line to execute inside the container, the working
          directory for the command is root ('/') in the container's filesystem. The
          command is simply exec'd, it is not run inside a shell, so traditional shell
          instructions ('|', etc) won't work. To use a shell, you need to explicitly call
          out to that shell. Exit status of 0 is treated as live/healthy and non-zero is
          unhealthy.
        type: list
        entry_schema: string
        required: false

  ExternalDocumentation:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ExternalDocumentation allows referencing an external resource for extended
      documentation.
    properties:
      description:
        type: string
        required: false
      url:
        type: string
        required: false

  ExternalMetricSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ExternalMetricSource indicates how to scale on a metric not associated with any
      Kubernetes object (for example length of queue in cloud messaging service, or
      QPS from loadbalancer running outside of cluster).
    properties:
      metric:
        description: >-
          metric identifies the target metric by name and selector
        type: MetricIdentifier
      target:
        description: >-
          target specifies the target value for the given metric
        type: MetricTarget

  ExternalMetricStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ExternalMetricStatus indicates the current value of a global metric not
      associated with any Kubernetes object.
    properties:
      current:
        description: >-
          current contains the current value for the given metric
        type: MetricValueStatus
      metric:
        description: >-
          metric identifies the target metric by name and selector
        type: MetricIdentifier

  ExternalNameSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    derived_from: ServiceSpec
    properties:
      externalName:
        description: >-
          externalName is the external reference that discovery mechanisms will return as
          an alias for this service (e.g. a DNS CNAME record). No proxying will be
          involved. Must be a lowercase RFC-1123 hostname
          (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
        type: string
        required: false
      type:
        type: string
        default: ExternalName

  FCVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as
      read/write once. Fibre Channel volumes support ownership management and SELinux
      relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.
        type: string
        required: false
      lun:
        description: >-
          Optional: FC target lun number
        type: integer
        required: false
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        type: boolean
        required: false
      targetWWNs:
        description: >-
          Optional: FC target worldwide names (WWNs)
        type: list
        entry_schema: string
        required: false
      wwids:
        description: >-
          Optional: FC volume world wide identifiers (wwids) Either wwids or combination
          of targetWWNs and lun must be set, but not both simultaneously.
        type: list
        entry_schema: string
        required: false

  FSGroupStrategyOptions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      FSGroupStrategyOptions defines the strategy type and options used to create the
      strategy.
    properties:
      ranges:
        description: >-
          ranges are the allowed ranges of fs groups. If you would like to force a single
          fs group then supply a single range with the same start and end. Required for
          MustRunAs.
        type: list
        entry_schema: IDRange
        required: false
      rule:
        description: >-
          rule is the strategy that will dictate what FSGroup is used in the
          SecurityContext.
        type: string
        required: false

  FieldsV1:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

      Each key is either a '.' representing the field itself, and will always map to
      an empty set, or a string representing a sub-field or item. The string will
      follow one of these four formats: 'f:<name>', where <name> is the name of a
      field in a struct, or key in a map 'v:<value>', where <value> is the exact json
      formatted value of a list item 'i:<index>', where <index> is position of a item
      in a list 'k:<keys>', where <keys> is a map of a list item's key fields to their
      unique values If a key maps to an empty Fields value, the field that key
      represents is part of the set.

      The exact format is defined in sigs.k8s.io/structured-merge-diff

  FlexPersistentVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      FlexPersistentVolumeSource represents a generic persistent volume resource that
      is provisioned/attached using an exec based plugin.
    properties:
      driver:
        description: >-
          Driver is the name of the driver to use for this volume.
        type: string
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on
          FlexVolume script.
        type: string
        required: false
      options:
        description: >-
          Optional: Extra command options if any.
        type: map
        entry_schema: string
        required: false
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        type: boolean
        required: false
      secretRef:
        description: >-
          Optional: SecretRef is reference to the secret object containing sensitive
          information to pass to the plugin scripts. This may be empty if no secret object
          is specified. If the secret object contains more than one secret, all secrets
          are passed to the plugin scripts.
        type: SecretReference
        required: false

  FlexVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      FlexVolume represents a generic volume resource that is provisioned/attached
      using an exec based plugin.
    properties:
      driver:
        description: >-
          Driver is the name of the driver to use for this volume.
        type: string
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on
          FlexVolume script.
        type: string
        required: false
      options:
        description: >-
          Optional: Extra command options if any.
        type: map
        entry_schema: string
        required: false
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        type: boolean
        required: false
      secretRef:
        description: >-
          Optional: SecretRef is reference to the secret object containing sensitive
          information to pass to the plugin scripts. This may be empty if no secret object
          is specified. If the secret object contains more than one secret, all secrets
          are passed to the plugin scripts.
        type: LocalObjectReference
        required: false

  FlockerVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Flocker volume mounted by the Flocker agent. One and only one of
      datasetName and datasetUUID should be set. Flocker volumes do not support
      ownership management or SELinux relabeling.
    properties:
      datasetName:
        description: >-
          Name of the dataset stored as metadata -> name on the dataset for Flocker should
          be considered as deprecated
        type: string
        required: false
      datasetUUID:
        description: >-
          UUID of the dataset. This is unique identifier of a Flocker dataset
        type: string
        required: false

  FlowControlSubject:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Subject matches the originator of a request, as identified by the request
      authentication system. There are three ways of matching an originator; by user,
      group, or service account.
    properties:
      group:
        description: >-
          `group` matches based on user group name.
        type: GroupSubject
        required: false
      kind:
        description: >-
          `kind` indicates which one of the other fields is non-empty. Required
        type: string
      serviceAccount:
        description: >-
          `serviceAccount` matches ServiceAccounts.
        type: ServiceAccountSubject
        required: false
      user:
        description: >-
          `user` matches based on username.
        type: UserSubject
        required: false

  FlowDistinguisherMethod:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      FlowDistinguisherMethod specifies the method of a flow distinguisher.
    properties:
      type:
        description: >-
          `type` is the type of flow distinguisher method The supported types are "ByUser"
          and "ByNamespace". Required.
        type: string

  FlowSchemaCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      FlowSchemaCondition describes conditions for a FlowSchema.
    properties:
      lastTransitionTime:
        description: >-
          `lastTransitionTime` is the last time the condition transitioned from one status
          to another.
        type: timestamp
        required: false
      message:
        description: >-
          `message` is a human-readable message indicating details about last transition.
        type: string
        required: false
      reason:
        description: >-
          `reason` is a unique, one-word, CamelCase reason for the condition's last
          transition.
        type: string
        required: false
      status:
        description: >-
          `status` is the status of the condition. Can be True, False, Unknown. Required.
        type: string
        required: false
      type:
        description: >-
          `type` is the type of the condition. Required.
        type: string
        required: false

  FlowSchemaSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      FlowSchemaSpec describes how the FlowSchema's specification looks like.
    properties:
      distinguisherMethod:
        description: >-
          `distinguisherMethod` defines how to compute the flow distinguisher for requests
          that match this schema. `nil` specifies that the distinguisher is disabled and
          thus will always be the empty string.
        type: FlowDistinguisherMethod
        required: false
      matchingPrecedence:
        description: >-
          `matchingPrecedence` is used to choose among the FlowSchemas that match a given
          request. The chosen FlowSchema is among those with the numerically lowest (which
          we take to be logically highest) MatchingPrecedence. Each MatchingPrecedence
          value must be ranged in [1,10000]. Note that if the precedence is not specified,
          it will be set to 1000 as default.
        type: integer
        required: false
      priorityLevelConfiguration:
        description: >-
          `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in
          the cluster. If the reference cannot be resolved, the FlowSchema will be ignored
          and marked as invalid in its status. Required.
        type: PriorityLevelConfigurationReference
      rules:
        description: >-
          `rules` describes which requests will match this flow schema. This FlowSchema
          matches a request if and only if at least one member of rules matches the
          request. if it is an empty slice, there will be no requests matching the
          FlowSchema.
        type: list
        entry_schema: PolicyRulesWithSubjects
        required: false

  FlowSchemaStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      FlowSchemaStatus represents the current state of a FlowSchema.
    properties:
      conditions:
        description: >-
          `conditions` is a list of the current states of FlowSchema.
        type: list
        entry_schema: FlowSchemaCondition
        required: false

  ForZone:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ForZone provides information about which zones should consume this endpoint.
    properties:
      name:
        description: >-
          name represents the name of the zone.
        type: string

  GCEPersistentDiskVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Persistent Disk resource in Google Compute Engine.

      A GCE PD must exist before mounting to a container. The disk must also be in the
      same GCE project and zone as the kubelet. A GCE PD can only be mounted as
      read/write once or read-only many times. GCE PDs support ownership management
      and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that the
          filesystem type is supported by the host operating system. Examples: "ext4",
          "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: string
        required: false
      partition:
        description: >-
          The partition in the volume that you want to mount. If omitted, the default is
          to mount by volume name. Examples: For volume /dev/sda1, you specify the
          partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you
          can leave the property empty). More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: integer
        required: false
      pdName:
        description: >-
          Unique name of the PD resource in GCE. Used to identify the disk in GCE. More
          info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
          false. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: boolean
        required: false

  GitRepoVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a volume that is populated with the contents of a git repository. Git
      repo volumes do not support ownership management. Git repo volumes support
      SELinux relabeling.

      DEPRECATED: GitRepo is deprecated. To provision a container with a git repo,
      mount an EmptyDir into an InitContainer that clones the repo using git, then
      mount the EmptyDir into the Pod's container.
    properties:
      directory:
        description: >-
          Target directory name. Must not contain or start with '..'. If '.' is supplied,
          the volume directory will be the git repository. Otherwise, if specified, the
          volume will contain the git repository in the subdirectory with the given name.
        type: string
        required: false
      repository:
        description: >-
          Repository URL
        type: string
      revision:
        description: >-
          Commit hash for the specified revision.
        type: string
        required: false

  GlusterfsPersistentVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes
      do not support ownership management or SELinux relabeling.
    properties:
      endpoints:
        description: >-
          EndpointsName is the endpoint name that details Glusterfs topology. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      endpointsNamespace:
        description: >-
          EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this
          field is empty, the EndpointNamespace defaults to the same namespace as the
          bound PVC. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
        required: false
      path:
        description: >-
          Path is the Glusterfs volume path. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the Glusterfs volume to be mounted with read-only
          permissions. Defaults to false. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: boolean
        required: false

  GlusterfsVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes
      do not support ownership management or SELinux relabeling.
    properties:
      endpoints:
        description: >-
          EndpointsName is the endpoint name that details Glusterfs topology. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      path:
        description: >-
          Path is the Glusterfs volume path. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the Glusterfs volume to be mounted with read-only
          permissions. Defaults to false. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: boolean
        required: false

  GroupSubject:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      GroupSubject holds detailed information for group-kind subject.
    properties:
      name:
        description: >-
          name is the user group that matches, or "*" to match all user groups. See
          https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go
          for some well-known group names. Required.
        type: string

  GroupVersionForDiscovery:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      GroupVersion contains the "group/version" and "version" string of a version. It
      is made a struct to keep extensibility.
    properties:
      groupVersion:
        description: >-
          groupVersion specifies the API group and version in the form "group/version"
        type: string
      version:
        description: >-
          version specifies the version in the form of "version". This is to save the
          clients the trouble of splitting the GroupVersion.
        type: string

  HPAScalingPolicy:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HPAScalingPolicy is a single policy which must hold true for a specified past
      interval.
    properties:
      periodSeconds:
        description: >-
          PeriodSeconds specifies the window of time for which the policy should hold
          true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30
          min).
        type: integer
      type:
        description: >-
          Type is used to specify the scaling policy.
        type: string
      value:
        description: >-
          Value contains the amount of change which is permitted by the policy. It must be
          greater than zero
        type: integer

  HPAScalingRules:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HPAScalingRules configures the scaling behavior for one direction. These Rules
      are applied after calculating DesiredReplicas from metrics for the HPA. They can
      limit the scaling velocity by specifying scaling policies. They can prevent
      flapping by specifying the stabilization window, so that the number of replicas
      is not set instantly, instead, the safest value from the stabilization window is
      chosen.
    properties:
      policies:
        description: >-
          policies is a list of potential scaling polices which can be used during
          scaling. At least one policy must be specified, otherwise the HPAScalingRules
          will be discarded as invalid
        type: list
        entry_schema: HPAScalingPolicy
        required: false
      selectPolicy:
        description: >-
          selectPolicy is used to specify which policy should be used. If not set, the
          default value MaxPolicySelect is used.
        type: string
        required: false
      stabilizationWindowSeconds:
        description: >-
          StabilizationWindowSeconds is the number of seconds for which past
          recommendations should be considered while scaling up or scaling down.
          StabilizationWindowSeconds must be greater than or equal to zero and less than
          or equal to 3600 (one hour). If not set, use the default values: - For scale up:
          0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization
          window is 300 seconds long).
        type: integer
        required: false
        constraints:
          - in_range: [ 0, 3600 ]

  HTTPGetAction:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HTTPGetAction describes an action based on HTTP Get requests.
    properties:
      host:
        description: >-
          Host name to connect to, defaults to the pod IP. You probably want to set "Host"
          in httpHeaders instead.
        type: string
        required: false
      httpHeaders:
        description: >-
          Custom headers to set in the request. HTTP allows repeated headers.
        type: list
        entry_schema: HTTPHeader
        required: false
      path:
        description: >-
          Path to access on the HTTP server.
        type: string
        required: false
      port:
        description: >-
          Name or number of the port to access on the container. Number must be in the
          range 1 to 65535. Name must be an IANA_SVC_NAME.
        type: IntOrString
      scheme:
        description: >-
          Scheme to use for connecting to the host. Defaults to HTTP.
        type: string
        required: false

  HTTPHeader:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HTTPHeader describes a custom header to be used in HTTP probes
    properties:
      name:
        description: >-
          The header field name
        type: string
      value:
        description: >-
          The header field value
        type: string

  HTTPIngressPath:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HTTPIngressPath associates a path with a backend. Incoming urls matching the
      path are forwarded to the backend.
    properties:
      backend:
        description: >-
          Backend defines the referenced service endpoint to which the traffic will be
          forwarded to.
        type: IngressBackend
      path:
        description: >-
          Path is matched against the path of an incoming request. Currently it can
          contain characters disallowed from the conventional "path" part of a URL as
          defined by RFC 3986. Paths must begin with a '/' and must be present when using
          PathType with value "Exact" or "Prefix".
        type: string
        required: false
      pathType:
        description: >-
          PathType determines the interpretation of the Path matching. PathType can be one
          of the following values: * Exact: Matches the URL path exactly. * Prefix:
          Matches based on a URL path prefix split by '/'. Matching is
           done on a path element by element basis. A path element refers is the
           list of labels in the path split by the '/' separator. A request is a
           match for path p if every p is an element-wise prefix of p of the
           request path. Note that if the last element of the path is a substring
           of the last element in request path, it is not a match (e.g. /foo/bar
           matches /foo/bar/baz, but does not match /foo/barbaz).
          * ImplementationSpecific: Interpretation of the Path matching is up to
           the IngressClass. Implementations can treat this as a separate PathType
           or treat it identically to Prefix or Exact path types.
          Implementations are required to support all path types.
        type: string

  HTTPIngressRuleValue:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HTTPIngressRuleValue is a list of http selectors pointing to backends. In the
      example: http://<host>/<path>?<searchpart> -> backend where where parts of the
      url correspond to RFC 3986, this resource will be used to match against
      everything after the last '/' and before the first '?' or '#'.
    properties:
      paths:
        description: >-
          A collection of paths that map requests to backends.
        type: list
        entry_schema: HTTPIngressPath

  Handler:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Handler defines a specific action that should be taken
    properties:
      exec:
        description: >-
          One and only one of the following should be specified. Exec specifies the action
          to take.
        type: ExecAction
        required: false
      httpGet:
        description: >-
          HTTPGet specifies the http request to perform.
        type: HTTPGetAction
        required: false
      tcpSocket:
        description: >-
          TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        type: TCPSocketAction
        required: false

  HorizontalPodAutoscalerBehavior:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in
      both Up and Down directions (scaleUp and scaleDown fields respectively).
    properties:
      scaleDown:
        description: >-
          scaleDown is scaling policy for scaling Down. If not set, the default value is
          to allow to scale down to minReplicas pods, with a 300 second stabilization
          window (i.e., the highest recommendation for the last 300sec is used).
        type: HPAScalingRules
        required: false
      scaleUp:
        description: >-
          scaleUp is scaling policy for scaling Up. If not set, the default value is the
          higher of:
           * increase no more than 4 pods per 60 seconds
           * double the number of pods per 60 seconds
          No stabilization is used.
        type: HPAScalingRules
        required: false

  HorizontalPodAutoscalerCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HorizontalPodAutoscalerCondition describes the state of a
      HorizontalPodAutoscaler at a certain point.
    properties:
      lastTransitionTime:
        description: >-
          lastTransitionTime is the last time the condition transitioned from one status
          to another
        type: timestamp
        required: false
      message:
        description: >-
          message is a human-readable explanation containing details about the transition
        type: string
        required: false
      reason:
        description: >-
          reason is the reason for the condition's last transition.
        type: string
        required: false
      status:
        description: >-
          status is the status of the condition (True, False, Unknown)
        type: string
      type:
        description: >-
          type describes the current condition
        type: string

  HorizontalPodAutoscalerSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HorizontalPodAutoscalerSpec describes the desired functionality of the
      HorizontalPodAutoscaler.
    properties:
      behavior:
        description: >-
          behavior configures the scaling behavior of the target in both Up and Down
          directions (scaleUp and scaleDown fields respectively). If not set, the default
          HPAScalingRules for scale up and scale down are used.
        type: HorizontalPodAutoscalerBehavior
        required: false
      maxReplicas:
        description: >-
          maxReplicas is the upper limit for the number of replicas to which the
          autoscaler can scale up. It cannot be less that minReplicas.
        type: integer
      metrics:
        description: >-
          metrics contains the specifications for which to use to calculate the desired
          replica count (the maximum replica count across all metrics will be used). The
          desired replica count is calculated multiplying the ratio between the target
          value and the current value by the current number of pods. Ergo, metrics used
          must decrease as the pod count is increased, and vice-versa. See the individual
          metric source types for more information about how each type of metric must
          respond. If not set, the default metric will be set to 80% average CPU
          utilization.
        type: list
        entry_schema: MetricSpec
        required: false
      minReplicas:
        description: >-
          minReplicas is the lower limit for the number of replicas to which the
          autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0
          if the alpha feature gate HPAScaleToZero is enabled and at least one Object or
          External metric is configured. Scaling is active as long as at least one metric
          value is available.
        type: integer
        required: false
      scaleTargetRef:
        description: >-
          scaleTargetRef points to the target resource to scale, and is used to the pods
          for which metrics should be collected, as well as to actually change the replica
          count.
        type: CrossVersionObjectReference
      targetCPUUtilizationPercentage:
        type: Factor

  HorizontalPodAutoscalerStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HorizontalPodAutoscalerStatus describes the current status of a horizontal pod
      autoscaler.
    properties:
      conditions:
        description: >-
          conditions is the set of conditions required for this autoscaler to scale its
          target, and indicates whether or not those conditions are met.
        type: list
        entry_schema: HorizontalPodAutoscalerCondition
      currentCPUUtilizationPercentage:
        type: Factor
      currentMetrics:
        description: >-
          currentMetrics is the last read state of the metrics used by this autoscaler.
        type: list
        entry_schema: MetricStatus
        required: false
      currentReplicas:
        description: >-
          currentReplicas is current number of replicas of pods managed by this
          autoscaler, as last seen by the autoscaler.
        type: integer
      desiredReplicas:
        description: >-
          desiredReplicas is the desired number of replicas of pods managed by this
          autoscaler, as last calculated by the autoscaler.
        type: integer
      lastScaleTime:
        description: >-
          lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of
          pods, used by the autoscaler to control how often the number of pods is changed.
        type: timestamp
        required: false
      observedGeneration:
        description: >-
          observedGeneration is the most recent generation observed by this autoscaler.
        type: integer
        required: false

  HostAlias:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HostAlias holds the mapping between IP and hostnames that will be injected as an
      entry in the pod's hosts file.
    properties:
      hostnames:
        description: >-
          Hostnames for the above IP address.
        type: list
        entry_schema: string
        required: false
      ip:
        description: >-
          IP address of the host file entry.
        type: IPAddress
        required: false

  HostPathVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a host path mapped into a pod. Host path volumes do not support
      ownership management or SELinux relabeling.
    properties:
      path:
        description: >-
          Path of the directory on the host. If the path is a symlink, it will follow the
          link to the real path. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type: string
      type:
        description: >-
          Type for HostPath Volume Defaults to "" More info:
          https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type: string
        required: false

  HostPortRange:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      HostPortRange defines a range of host ports that will be enabled by a policy for
      pods to use. It requires both the start and end to be defined.
    properties:
      max:
        description: >-
          max is the end of the range, inclusive.
        type: integer
      min:
        description: >-
          min is the start of the range, inclusive.
        type: integer

  IDRange:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IDRange provides a min/max of an allowed range of IDs.
    properties:
      max:
        description: >-
          max is the end of the range, inclusive.
        type: integer
      min:
        description: >-
          min is the start of the range, inclusive.
        type: integer

  IPBlock:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IPBlock describes a particular CIDR (Ex. "192.168.1.1/24","2001:db9::/64") that
      is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except
      entry describes CIDRs that should not be included within this rule.
    properties:
      cidr:
        description: >-
          CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
          or "2001:db9::/64"
        type: IPSubnet
      except:
        description: >-
          Except is a slice of CIDRs that should not be included within an IP Block Valid
          examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected
          if they are outside the CIDR range
        type: list
        entry_schema: IPSubnet
        required: false

  ISCSIPersistentVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be
      mounted as read/write once. ISCSI volumes support ownership management and
      SELinux relabeling.
    properties:
      chapAuthDiscovery:
        description: >-
          whether support iSCSI Discovery CHAP authentication
        type: boolean
        required: false
      chapAuthSession:
        description: >-
          whether support iSCSI Session CHAP authentication
        type: boolean
        required: false
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that the
          filesystem type is supported by the host operating system. Examples: "ext4",
          "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        type: string
        required: false
      initiatorName:
        description: >-
          Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface
          simultaneously, new iSCSI interface <target portal>:<volume name> will be
          created for the connection.
        type: string
        required: false
      iqn:
        description: >-
          Target iSCSI Qualified Name.
        type: string
      iscsiInterface:
        description: >-
          iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        type: string
        required: false
      lun:
        description: >-
          iSCSI Target Lun number.
        type: integer
      portals:
        description: >-
          iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
        type: list
        entry_schema: string
        required: false
      readOnly:
        description: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
          false.
        type: boolean
        required: false
      secretRef:
        description: >-
          CHAP Secret for iSCSI target and initiator authentication
        type: SecretReference
        required: false
      targetPortal:
        description: >-
          iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is
          other than default (typically TCP ports 860 and 3260).
        type: string

  ISCSIVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once.
      ISCSI volumes support ownership management and SELinux relabeling.
    properties:
      chapAuthDiscovery:
        description: >-
          whether support iSCSI Discovery CHAP authentication
        type: boolean
        required: false
      chapAuthSession:
        description: >-
          whether support iSCSI Session CHAP authentication
        type: boolean
        required: false
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that the
          filesystem type is supported by the host operating system. Examples: "ext4",
          "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        type: string
        required: false
      initiatorName:
        description: >-
          Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface
          simultaneously, new iSCSI interface <target portal>:<volume name> will be
          created for the connection.
        type: string
        required: false
      iqn:
        description: >-
          Target iSCSI Qualified Name.
        type: string
      iscsiInterface:
        description: >-
          iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        type: string
        required: false
      lun:
        description: >-
          iSCSI Target Lun number.
        type: integer
      portals:
        description: >-
          iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
        type: list
        entry_schema: string
        required: false
      readOnly:
        description: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
          false.
        type: boolean
        required: false
      secretRef:
        description: >-
          CHAP Secret for iSCSI target and initiator authentication
        type: LocalObjectReference
        required: false
      targetPortal:
        description: >-
          iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is
          other than default (typically TCP ports 860 and 3260).
        type: string

  Info:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Info contains versioning information. how we'll want to distribute that
      information.
    properties:
      buildDate:
        type: string
      compiler:
        type: string
      gitCommit:
        type: string
      gitTreeState:
        type: string
      gitVersion:
        type: string
      goVersion:
        type: string
      major:
        type: string
      minor:
        type: string
      platform:
        type: string

  IngressBackend:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IngressBackend describes all endpoints for a given service and port.
    properties:
      resource:
        description: >-
          Resource is an ObjectRef to another Kubernetes resource in the namespace of the
          Ingress object. If resource is specified, a service.Name and service.Port must
          not be specified. This is a mutually exclusive setting with "Service".
        type: TypedLocalObjectReference
        required: false
      service:
        description: >-
          Service references a Service as a Backend. This is a mutually exclusive setting
          with "Resource".
        type: IngressServiceBackend
        required: false

  IngressClassParametersReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IngressClassParametersReference identifies an API object. This can be used to
      specify a cluster or namespace-scoped resource.
    properties:
      apiGroup:
        description: >-
          APIGroup is the group for the resource being referenced. If APIGroup is not
          specified, the specified Kind must be in the core API group. For any other
          third-party types, APIGroup is required.
        type: string
        required: false
      kind:
        description: >-
          Kind is the type of resource being referenced.
        type: string
      name:
        description: >-
          Name is the name of resource being referenced.
        type: string
      namespace:
        description: >-
          Namespace is the namespace of the resource being referenced. This field is
          required when scope is set to "Namespace" and must be unset when scope is set to
          "Cluster".
        type: string
        required: false
      scope:
        description: >-
          Scope represents if this refers to a cluster or namespace scoped resource. This
          may be set to "Cluster" (default) or "Namespace". Field can be enabled with
          IngressClassNamespacedParams feature gate.
        type: string
        required: false

  IngressClassSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IngressClassSpec provides information about the class of an Ingress.
    properties:
      controller:
        description: >-
          Controller refers to the name of the controller that should handle this class.
          This allows for different "flavors" that are controlled by the same controller.
          For example, you may have different Parameters for the same implementing
          controller. This should be specified as a domain-prefixed path no more than 250
          characters in length, e.g. "acme.io/ingress-controller". This field is
          immutable.
        type: string
        required: false
      parameters:
        description: >-
          Parameters is a link to a custom resource containing additional configuration
          for the controller. This is optional if the controller does not require extra
          parameters.
        type: IngressClassParametersReference
        required: false

  IngressRule:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IngressRule represents the rules mapping the paths under a specified host to the
      related backend services. Incoming requests are first evaluated for a host
      match, then routed to the backend associated with the matching IngressRuleValue.
    properties:
      host:
        description: >-
          Host is the fully qualified domain name of a network host, as defined by RFC
          3986. Note the following deviations from the "host" part of the URI as defined
          in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only
          apply to
           the IP in the Spec of the parent Ingress.
          2. The `:` delimiter is not respected because ports are not allowed.
           Currently the port of an Ingress is implicitly :80 for http and
           :443 for https.
          Both these may change in the future. Incoming requests are matched against the
          host before the IngressRuleValue. If the host is unspecified, the Ingress routes
          all traffic based on the specified IngressRuleValue.

          Host can be "precise" which is a domain name without the terminating dot of a
          network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed
          with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must
          appear by itself as the first DNS label and matches only a single label. You
          cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be
          matched against the Host field in the following way: 1. If Host is precise, the
          request matches this rule if the http host header is equal to Host. 2. If Host
          is a wildcard, then the request matches this rule if the http host header is to
          equal to the suffix (removing the first label) of the wildcard rule.
        type: string
        required: false
      http:
        type: HTTPIngressRuleValue
        required: false

  IngressServiceBackend:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IngressServiceBackend references a Kubernetes Service as a Backend.
    properties:
      name:
        description: >-
          Name is the referenced service. The service must exist in the same namespace as
          the Ingress object.
        type: string
      port:
        description: >-
          Port of the referenced service. A port name or port number is required for a
          IngressServiceBackend.
        type: ServiceBackendPort
        required: false

  IngressSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IngressSpec describes the Ingress the user wishes to exist.
    properties:
      defaultBackend:
        description: >-
          DefaultBackend is the backend that should handle requests that don't match any
          rule. If Rules are not specified, DefaultBackend must be specified. If
          DefaultBackend is not set, the handling of requests that do not match any of the
          rules will be up to the Ingress controller.
        type: IngressBackend
        required: false
      ingressClassName:
        description: >-
          IngressClassName is the name of the IngressClass cluster resource. The
          associated IngressClass defines which controller will implement the resource.
          This replaces the deprecated `kubernetes.io/ingress.class` annotation. For
          backwards compatibility, when that annotation is set, it must be given
          precedence over this field. The controller may emit a warning if the field and
          annotation have different values. Implementations of this API should ignore
          Ingresses without a class specified. An IngressClass resource may be marked as
          default, which can be used to set a default value for this field. For more
          information, refer to the IngressClass documentation.
        type: string
        required: false
      rules:
        description: >-
          A list of host rules used to configure the Ingress. If unspecified, or no rule
          matches, all traffic is sent to the default backend.
        type: list
        entry_schema: IngressRule
        required: false
      tls:
        description: >-
          TLS configuration. Currently the Ingress only supports a single TLS port, 443.
          If multiple members of this list specify different hosts, they will be
          multiplexed on the same port according to the hostname specified through the SNI
          TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        type: list
        entry_schema: IngressTLS
        required: false

  IngressStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IngressStatus describe the current state of the Ingress.
    properties:
      loadBalancer:
        description: >-
          LoadBalancer contains the current status of the load-balancer.
        type: LoadBalancerStatus
        required: false

  IngressTLS:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IngressTLS describes the transport layer security associated with an Ingress.
    properties:
      hosts:
        description: >-
          Hosts are a list of hosts included in the TLS certificate. The values in this
          list must match the name/s used in the tlsSecret. Defaults to the wildcard host
          setting for the loadbalancer controller fulfilling this Ingress, if left
          unspecified.
        type: list
        entry_schema: string
        required: false
      secretName:
        description: >-
          SecretName is the name of the secret used to terminate TLS traffic on port 443.
          Field is left optional to allow TLS routing based on SNI hostname alone. If the
          SNI host in a listener conflicts with the "Host" header field used by an
          IngressRule, the SNI host is used for termination and value of the Host header
          is used for routing.
        type: string
        required: false

  IntOrString:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IntOrString is a type that can hold an int32 or a string. When used in JSON or
      YAML marshalling and unmarshalling, it produces or consumes the inner type. This
      allows you to have, for example, a JSON field that can accept a name or number.

  JSON:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      JSON represents any valid JSON value. These types are supported: bool, int64,
      float64, string, []interface{}, map[string]interface{} and nil.

  JSONSchemaProps:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      JSONSchemaProps is a JSON-Schema following Specification Draft 4
      (http://json-schema.org/).
    properties:
      $ref:
        type: string
        required: false
      $schema:
        type: string
        required: false
      additionalItems:
        type: JSONSchemaPropsOrBool
        required: false
      additionalProperties:
        type: JSONSchemaPropsOrBool
        required: false
      allOf:
        type: list
        entry_schema: JSONSchemaProps
        required: false
      anyOf:
        type: list
        entry_schema: JSONSchemaProps
        required: false
      default:
        description: >-
          default is a default value for undefined object fields. Defaulting is a beta
          feature under the CustomResourceDefaulting feature gate. Defaulting requires
          spec.preserveUnknownFields to be false.
        type: JSON
        required: false
      definitions:
        type: map
        entry_schema: JSONSchemaProps
        required: false
      dependencies:
        type: map
        entry_schema: JSONSchemaPropsOrStringArray
        required: false
      description:
        type: string
        required: false
      enum:
        type: list
        entry_schema: JSON
        required: false
      example:
        type: JSON
        required: false
      exclusiveMaximum:
        type: boolean
        required: false
      exclusiveMinimum:
        type: boolean
        required: false
      externalDocs:
        type: ExternalDocumentation
        required: false
      format:
        description: >-
          format is an OpenAPI v3 format string. Unknown formats are ignored. The
          following formats are validated:

          - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI
          as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed
          by Golang net/mail.ParseAddress - hostname: a valid representation for an
          Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an
          IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang
          net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC
          address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase
          defined by the regex
          (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3:
          an UUID3 that allows uppercase defined by the regex
          (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4:
          an UUID4 that allows uppercase defined by the regex
          (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ -
          uuid5: an UUID5 that allows uppercase defined by the regex
          (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ -
          isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" -
          isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number
          string like "978-0321751041" - creditcard: a credit card number defined by the
          regex
          ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$
          with any non digit characters mixed in - ssn: a U.S. social security number
          following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color
          code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ -
          rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64
          encoded binary data - password: any kind of string - date: a date string like
          "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string
          like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala
          duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z"
          as defined by date-time in RFC3339.
        type: string
        required: false
      id:
        type: string
        required: false
      items:
        type: JSONSchemaPropsOrArray
        required: false
      maxItems:
        type: integer
        required: false
      maxLength:
        type: integer
        required: false
      maxProperties:
        type: integer
        required: false
      maximum:
        type: float
        required: false
      minItems:
        type: integer
        required: false
      minLength:
        type: integer
        required: false
      minProperties:
        type: integer
        required: false
      minimum:
        type: float
        required: false
      multipleOf:
        type: float
        required: false
      not:
        type: JSONSchemaProps
        required: false
      nullable:
        type: boolean
        required: false
      oneOf:
        type: list
        entry_schema: JSONSchemaProps
        required: false
      pattern:
        type: string
        required: false
      patternProperties:
        type: map
        entry_schema: JSONSchemaProps
        required: false
      properties:
        type: map
        entry_schema: JSONSchemaProps
        required: false
      required:
        type: list
        entry_schema: string
        required: false
      title:
        type: string
        required: false
      type:
        type: string
        required: false
      uniqueItems:
        type: boolean
        required: false
      x-kubernetes-embedded-resource:
        description: >-
          x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes
          runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is
          allowed to further restrict the embedded object. kind, apiVersion and metadata
          are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to
          be true, but does not have to be if the object is fully specified (up to kind,
          apiVersion, metadata).
        type: boolean
        required: false
      x-kubernetes-int-or-string:
        description: >-
          x-kubernetes-int-or-string specifies that this value is either an integer or a
          string. If this is true, an empty type is allowed and type as child of anyOf is
          permitted if following one of the following patterns:

          1) anyOf:
           - type: integer
           - type: string
          2) allOf:
           - anyOf:
           - type: integer
           - type: string
           - ... zero or more
        type: boolean
        required: false
      x-kubernetes-list-map-keys:
        description: >-
          x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type
          `map` by specifying the keys used as the index of the map.

          This tag MUST only be used on lists that have the "x-kubernetes-list-type"
          extension set to "map". Also, the values specified for this attribute must be a
          scalar typed field of the child structure (no nesting is supported).

          The properties specified must either be required or have a default value, to
          ensure those properties are present for all list items.
        type: list
        entry_schema: string
        required: false
      x-kubernetes-list-type:
        description: >-
          x-kubernetes-list-type annotates an array to further describe its topology. This
          extension must only be used on lists and may have 3 possible values:

          1) `atomic`: the list is treated as a single entity, like a scalar.
           Atomic lists will be entirely replaced when updated. This extension
           may be used on any type of list (struct, scalar, ...).
          2) `set`:
           Sets are lists that must not have multiple items with the same value. Each
           value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
           array with x-kubernetes-list-type `atomic`.
          3) `map`:
           These lists are like maps in that their elements have a non-index key
           used to identify them. Order is preserved upon merge. The map tag
           must only be used on a list with elements of type object.
          Defaults to atomic for arrays.
        type: string
        required: false
        constraints:
          - valid_values: [ atomic, set, map ]
      x-kubernetes-map-type:
        description: >-
          x-kubernetes-map-type annotates an object to further describe its topology. This
          extension must only be used when type is object and may have 2 possible values:

          1) `granular`:
           These maps are actual maps (key-value pairs) and each fields are independent
           from each other (they can each be manipulated by separate actors). This is
           the default behaviour for all maps.
          2) `atomic`: the list is treated as a single entity, like a scalar.
           Atomic maps will be entirely replaced when updated.
        type: string
        required: false
        constraints:
          - valid_values: [ granular, atomic ]
      x-kubernetes-preserve-unknown-fields:
        description: >-
          x-kubernetes-preserve-unknown-fields stops the API server decoding step from
          pruning fields which are not specified in the validation schema. This affects
          fields recursively, but switches back to normal pruning behaviour if nested
          properties or additionalProperties are specified in the schema. This can either
          be true or undefined. False is forbidden.
        type: boolean
        required: false

  JSONSchemaPropsOrArray:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps
      or an array of JSONSchemaProps. Mainly here for serialization purposes.

  JSONSchemaPropsOrBool:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to
      true for the boolean property.

  JSONSchemaPropsOrStringArray:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.

  JobCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      JobCondition describes current state of a job.
    properties:
      lastProbeTime:
        description: >-
          Last time the condition was checked.
        type: timestamp
        required: false
      lastTransitionTime:
        description: >-
          Last time the condition transit from one status to another.
        type: timestamp
        required: false
      message:
        description: >-
          Human readable message indicating details about last transition.
        type: string
        required: false
      reason:
        description: >-
          (brief) reason for the condition's last transition.
        type: string
        required: false
      status:
        description: >-
          Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: >-
          Type of job condition, Complete or Failed.
        type: string

  JobSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      JobSpec describes how the job execution will look like.
    derived_from: PodTemplateOwner
    properties:
      activeDeadlineSeconds:
        description: >-
          Specifies the duration in seconds relative to the startTime that the job may be
          continuously active before the system tries to terminate it; value must be
          positive integer. If a Job is suspended (at creation or through an update), this
          timer will effectively be stopped and reset when the Job is resumed again.
        type: integer
        required: false
      backoffLimit:
        description: >-
          Specifies the number of retries before marking this job failed. Defaults to 6
        type: integer
        required: false
      completionMode:
        description: >-
          CompletionMode specifies how Pod completions are tracked. It can be `NonIndexed`
          (default) or `Indexed`.

          `NonIndexed` means that the Job is considered complete when there have been
          .spec.completions successfully completed Pods. Each Pod completion is homologous
          to each other.

          `Indexed` means that the Pods of a Job get an associated completion index from 0
          to (.spec.completions - 1), available in the annotation
          batch.kubernetes.io/job-completion-index. The Job is considered complete when
          there is one successfully completed Pod for each index. When value is `Indexed`,
          .spec.completions must be specified and `.spec.parallelism` must be less than or
          equal to 10^5. In addition, The Pod name takes the form
          `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form
          `$(job-name)-$(index)`.

          This field is beta-level. More completion modes can be added in the future. If
          the Job controller observes a mode that it doesn't recognize, the controller
          skips updates for the Job.
        type: string
        required: false
      completions:
        description: >-
          Specifies the desired number of successfully finished pods the job should be run
          with. Setting to nil means that the success of any pod signals the success of
          all pods, and allows parallelism to have any positive value. Setting to 1 means
          that parallelism is limited to 1 and the success of that pod signals the success
          of the job. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        type: integer
        required: false
      manualSelector:
        description: >-
          manualSelector controls generation of pod labels and pod selectors. Leave
          `manualSelector` unset unless you are certain what you are doing. When false or
          unset, the system pick labels unique to this job and appends those labels to the
          pod template. When true, the user is responsible for picking unique labels and
          specifying the selector. Failure to pick a unique label may cause this and other
          jobs to not function correctly. However, You may see `manualSelector=true` in
          jobs that were created with the old `extensions/v1beta1` API. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
        type: boolean
        required: false
      parallelism:
        description: >-
          Specifies the maximum desired number of pods the job should run at any given
          time. The actual number of pods running in steady state will be less than this
          number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e.
          when the work left to do is less than max parallelism. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        type: integer
        required: false
      selector:
        description: >-
          A label query over pods that should match the pod count. Normally, the system
          sets this field for you. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        type: LabelSelector
        required: false
      suspend:
        description: >-
          Suspend specifies whether the Job controller should create Pods or not. If a Job
          is created with suspend set to true, no Pods are created by the Job controller.
          If a Job is suspended after creation (i.e. the flag goes from false to true),
          the Job controller will delete all active Pods associated with this Job. Users
          must design their workload to gracefully handle this. Suspending a Job will
          reset the StartTime field of the Job, effectively resetting the
          ActiveDeadlineSeconds timer too. Defaults to false.

          This field is beta-level, gated by SuspendJob feature flag (enabled by default).
        type: boolean
        required: false
      template:
        description: >-
          Describes the pod that will be created when executing a job. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        type: PodTemplateSpec
      ttlSecondsAfterFinished:
        description: >-
          ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution
          (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after
          the Job finishes, it is eligible to be automatically deleted. When the Job is
          being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If
          this field is unset, the Job won't be automatically deleted. If this field is
          set to zero, the Job becomes eligible to be deleted immediately after it
          finishes. This field is alpha-level and is only honored by servers that enable
          the TTLAfterFinished feature.
        type: integer
        required: false

  JobStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      JobStatus represents the current state of a Job.
    properties:
      active:
        description: >-
          The number of actively running pods.
        type: integer
        required: false
      completedIndexes:
        description: >-
          CompletedIndexes holds the completed indexes when .spec.completionMode =
          "Indexed" in a text format. The indexes are represented as decimal integers
          separated by commas. The numbers are listed in increasing order. Three or more
          consecutive numbers are compressed and represented by the first and last element
          of the series, separated by a hyphen. For example, if the completed indexes are
          1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
        type: string
        required: false
      completionTime:
        description: >-
          Represents time when the job was completed. It is not guaranteed to be set in
          happens-before order across separate operations. It is represented in RFC3339
          form and is in UTC. The completion time is only set when the job finishes
          successfully.
        type: timestamp
        required: false
      conditions:
        description: >-
          The latest available observations of an object's current state. When a Job
          fails, one of the conditions will have type "Failed" and status true. When a Job
          is suspended, one of the conditions will have type "Suspended" and status true;
          when the Job is resumed, the status of this condition will become false. When a
          Job is completed, one of the conditions will have type "Complete" and status
          true. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        type: list
        entry_schema: JobCondition
        required: false
      failed:
        description: >-
          The number of pods which reached phase Failed.
        type: integer
        required: false
      startTime:
        description: >-
          Represents time when the job controller started processing a job. When a Job is
          created in the suspended state, this field is not set until the first time it is
          resumed. This field is reset every time a Job is resumed from suspension. It is
          represented in RFC3339 form and is in UTC.
        type: timestamp
        required: false
      succeeded:
        description: >-
          The number of pods which reached phase Succeeded.
        type: integer
        required: false
      uncountedTerminatedPods:
        description: >-
          UncountedTerminatedPods holds the UIDs of Pods that have terminated but the job
          controller hasn't yet accounted for in the status counters.

          The job controller creates pods with a finalizer. When a pod terminates
          (succeeded or failed), the controller does three steps to account for it in the
          job status: (1) Add the pod UID to the arrays in this field. (2) Remove the pod
          finalizer. (3) Remove the pod UID from the arrays while increasing the
          corresponding
           counter.

          This field is alpha-level. The job controller only makes use of this field when
          the feature gate PodTrackingWithFinalizers is enabled. Old jobs might not be
          tracked using this field, in which case the field remains null.
        type: UncountedTerminatedPods
        required: false

  JobTemplateSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      JobTemplateSpec describes the data a Job should have when created from a
      template
    properties:
      spec:
        description: >-
          Specification of the desired behavior of the job. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        type: JobSpec
        required: false

  KeyToPath:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Maps a string key to a path within a volume.
    properties:
      key:
        description: >-
          The key to project.
        type: string
      mode:
        description: >-
          Optional: mode bits used to set permissions on this file. Must be an octal value
          between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both
          octal and decimal values, JSON requires decimal values for mode bits. If not
          specified, the volume defaultMode will be used. This might be in conflict with
          other options that affect the file mode, like fsGroup, and the result can be
          other mode bits set.
        type: FileMode
        required: false
      path:
        description: >-
          The relative path of the file to map the key to. May not be an absolute path.
          May not contain the path element '..'. May not start with the string '..'.
        type: string

  KubeAggregatorServiceReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ServiceReference holds a reference to Service.legacy.k8s.io
    properties:
      name:
        description: >-
          Name is the name of the service
        type: string
        required: false
      namespace:
        description: >-
          Namespace is the namespace of the service
        type: string
        required: false
      port:
        description: >-
          If specified, the port on the service that hosting webhook. Default to 443 for
          backward compatibility. `port` should be a valid port number (1-65535,
          inclusive).
        type: integer
        required: false

  LabelSelector:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A label selector is a label query over a set of resources. The result of
      matchLabels and matchExpressions are ANDed. An empty label selector matches all
      objects. A null label selector matches no objects.
    properties:
      matchExpressions:
        description: >-
          matchExpressions is a list of label selector requirements. The requirements are
          ANDed.
        type: list
        entry_schema: LabelSelectorRequirement
        required: false
      matchLabels:
        description: >-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the
          matchLabels map is equivalent to an element of matchExpressions, whose key field
          is "key", the operator is "In", and the values array contains only "value". The
          requirements are ANDed.
        type: map
        entry_schema: string
        required: false

  LabelSelectorRequirement:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A label selector requirement is a selector that contains values, a key, and an
      operator that relates the key and values.
    properties:
      key:
        description: >-
          key is the label key that the selector applies to.
        type: string
      operator:
        description: >-
          operator represents a key's relationship to a set of values. Valid operators are
          In, NotIn, Exists and DoesNotExist.
        type: string
        constraints:
          - valid_values: [ In, NotIn, Exists, DoesNotExist ]
      values:
        description: >-
          values is an array of string values. If the operator is In or NotIn, the values
          array must be non-empty. If the operator is Exists or DoesNotExist, the values
          array must be empty. This array is replaced during a strategic merge patch.
        type: list
        entry_schema: string
        required: false

  LeaseSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      LeaseSpec is a specification of a Lease.
    properties:
      acquireTime:
        description: >-
          acquireTime is a time when the current lease was acquired.
        type: timestamp
        required: false
      holderIdentity:
        description: >-
          holderIdentity contains the identity of the holder of a current lease.
        type: string
        required: false
      leaseDurationSeconds:
        description: >-
          leaseDurationSeconds is a duration that candidates for a lease need to wait to
          force acquire it. This is measure against time of last observed RenewTime.
        type: integer
        required: false
      leaseTransitions:
        description: >-
          leaseTransitions is the number of transitions of a lease between holders.
        type: integer
        required: false
      renewTime:
        description: >-
          renewTime is a time when the current holder of a lease has last updated the
          lease.
        type: timestamp
        required: false

  Lifecycle:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Lifecycle describes actions that the management system should take in response
      to container lifecycle events. For the PostStart and PreStop lifecycle handlers,
      management of the container blocks until the action is complete, unless the
      container process fails, in which case the handler is aborted.
    properties:
      postStart:
        description: >-
          PostStart is called immediately after a container is created. If the handler
          fails, the container is terminated and restarted according to its restart
          policy. Other management of the container blocks until the hook completes. More
          info:
          https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        type: Handler
        required: false
      preStop:
        description: >-
          PreStop is called immediately before a container is terminated due to an API
          request or management event such as liveness/startup probe failure, preemption,
          resource contention, etc. The handler is not called if the container crashes or
          exits. The reason for termination is passed to the handler. The Pod's
          termination grace period countdown begins before the PreStop hooked is executed.
          Regardless of the outcome of the handler, the container will eventually
          terminate within the Pod's termination grace period. Other management of the
          container blocks until the hook completes or until the termination grace period
          is reached. More info:
          https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        type: Handler
        required: false

  LimitRangeItem:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      LimitRangeItem defines a min/max usage limit for any resource that matches on
      kind.
    properties:
      default:
        description: >-
          Default resource requirement limit value by resource name if resource limit is
          omitted.
        type: map
        entry_schema: Quantity
        required: false
      defaultRequest:
        description: >-
          DefaultRequest is the default resource requirement request value by resource
          name if resource request is omitted.
        type: map
        entry_schema: Quantity
        required: false
      max:
        description: >-
          Max usage constraints on this kind by resource name.
        type: map
        entry_schema: Quantity
        required: false
      maxLimitRequestRatio:
        description: >-
          MaxLimitRequestRatio if specified, the named resource must have a request and
          limit that are both non-zero where limit divided by request is less than or
          equal to the enumerated value; this represents the max burst for the named
          resource.
        type: map
        entry_schema: Quantity
        required: false
      min:
        description: >-
          Min usage constraints on this kind by resource name.
        type: map
        entry_schema: Quantity
        required: false
      type:
        description: >-
          Type of resource that this limit applies to.
        type: string

  LimitRangeSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      LimitRangeSpec defines a min/max usage limit for resources that match on kind.
    properties:
      limits:
        description: >-
          Limits is the list of LimitRangeItem objects that are enforced.
        type: list
        entry_schema: LimitRangeItem

  LimitResponse:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      LimitResponse defines how to handle requests that can not be executed right now.
    properties:
      queuing:
        description: >-
          `queuing` holds the configuration parameters for queuing. This field may be
          non-empty only if `type` is `"Queue"`.
        type: QueuingConfiguration
        required: false
      type:
        description: >-
          `type` is "Queue" or "Reject". "Queue" means that requests that can not be
          executed upon arrival are held in a queue until they can be executed or a
          queuing limit is reached. "Reject" means that requests that can not be executed
          upon arrival are rejected. Required.
        type: string

  LimitedPriorityLevelConfiguration:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      LimitedPriorityLevelConfiguration specifies how to handle requests that are
      subject to limits. It addresses two issues:
       * How are requests for this priority level limited?
       * What should be done with requests that exceed the limit?
    properties:
      assuredConcurrencyShares:
        description: >-
          `assuredConcurrencyShares` (ACS) configures the execution limit, which is a
          limit on the number of requests of this priority level that may be exeucting at
          a given time. ACS must be a positive number. The server's concurrency limit
          (SCL) is divided among the concurrency-controlled priority levels in proportion
          to their assured concurrency shares. This produces the assured concurrency value
          (ACV) --- the number of requests that may be executing at a time --- for each
          such priority level:

           ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )

          bigger numbers of ACS mean more reserved concurrent requests (at the expense of
          every other PL). This field has a default value of 30.
        type: integer
        required: false
      limitResponse:
        description: >-
          `limitResponse` indicates what to do with requests that can not be executed
          right now
        type: LimitResponse
        required: false

  LoadBalancerIngress:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      LoadBalancerIngress represents the status of a load-balancer ingress point:
      traffic intended for the service should be sent to an ingress point.
    properties:
      hostname:
        description: >-
          Hostname is set for load-balancer ingress points that are DNS based (typically
          AWS load-balancers)
        type: string
        required: false
      ip:
        description: >-
          IP is set for load-balancer ingress points that are IP based (typically GCE or
          OpenStack load-balancers)
        type: IPAddress
        required: false
      ports:
        description: >-
          Ports is a list of records of service ports If used, every port defined in the
          service should have an entry in it
        type: list
        entry_schema: PortStatus
        required: false

  LoadBalancerSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    derived_from: ServiceSpec
    properties:
      allocateLoadBalancerNodePorts:
        description: >-
          allocateLoadBalancerNodePorts defines if NodePorts will be automatically
          allocated for services with type LoadBalancer. Default is "true". It may be set
          to "false" if the cluster load-balancer does not rely on NodePorts. If the
          caller requests specific NodePorts (by specifying a value), those requests will
          be respected, regardless of this field. This field may only be set for services
          with type LoadBalancer and will be cleared if the type is changed to any other
          type. This field is beta-level and is only honored by servers that enable the
          ServiceLBNodePortControl feature.
        type: boolean
        required: false
      loadBalancerClass:
        description: >-
          loadBalancerClass is the class of the load balancer implementation this Service
          belongs to. If specified, the value of this field must be a label-style
          identifier, with an optional prefix, e.g. "internal-vip" or
          "example.com/internal-vip". Unprefixed names are reserved for end-users. This
          field can only be set when the Service type is 'LoadBalancer'. If not set, the
          default load balancer implementation is used, today this is typically done
          through the cloud provider integration, but should apply for any default
          implementation. If set, it is assumed that a load balancer implementation is
          watching for Services with a matching class. Any default load balancer
          implementation (e.g. cloud providers) should ignore Services that set this
          field. This field can only be set when creating or updating a Service to type
          'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a
          service is updated to a non 'LoadBalancer' type.
        type: string
        required: false
      loadBalancerIP:
        description: >-
          Only applies to Service Type: LoadBalancer LoadBalancer will get created with
          the IP specified in this field. This feature depends on whether the underlying
          cloud-provider supports specifying the loadBalancerIP when a load balancer is
          created. This field will be ignored if the cloud-provider does not support the
          feature.
        type: string
        required: false
      loadBalancerSourceRanges:
        description: >-
          If specified and supported by the platform, this will restrict traffic through
          the cloud-provider load-balancer will be restricted to the specified client IPs.
          This field will be ignored if the cloud-provider does not support the feature."
          More info:
          https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
        type: list
        entry_schema: string
        required: false
      type:
        type: string
        default: LoadBalancer

  LoadBalancerStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      LoadBalancerStatus represents the status of a load-balancer.
    properties:
      ingress:
        description: >-
          Ingress is a list containing ingress points for the load-balancer. Traffic
          intended for the service should be sent to these ingress points.
        type: list
        entry_schema: LoadBalancerIngress
        required: false

  LocalObjectReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      LocalObjectReference contains enough information to let you locate the
      referenced object inside the same namespace.
    properties:
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        required: false

  LocalVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Local represents directly-attached storage with node affinity (Beta feature)
    properties:
      fsType:
        description: >-
          Filesystem type to mount. It applies only when the Path is a block device. Must
          be a filesystem type supported by the host operating system. Ex. "ext4", "xfs",
          "ntfs". The default value is to auto-select a fileystem if unspecified.
        type: string
        required: false
      path:
        description: >-
          The full path to the volume on the node. It can be either a directory or block
          device (disk, partition, ...).
        type: string

  ManagedFieldsEntry:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the
      resource that the fieldset applies to.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the version of this resource that this field set applies to.
          The format is "group/version" just like the top-level APIVersion field. It is
          necessary to track the version of a field set because it cannot be automatically
          converted.
        type: string
        required: false
      fieldsType:
        description: >-
          FieldsType is the discriminator for the different fields format and version.
          There is currently only one possible value: "FieldsV1"
        type: string
        required: false
      fieldsV1:
        description: >-
          FieldsV1 holds the first JSON version format as described in the "FieldsV1"
          type.
        type: FieldsV1
        required: false
      manager:
        description: >-
          Manager is an identifier of the workflow managing these fields.
        type: string
        required: false
      operation:
        description: >-
          Operation is the type of operation which lead to this ManagedFieldsEntry being
          created. The only valid values for this field are 'Apply' and 'Update'.
        type: string
        required: false
        constraints:
          - valid_values: [ Apply, Update ]
      subresource:
        description: >-
          Subresource is the name of the subresource used to update that object, or empty
          string if the object was updated through the main resource. The value of this
          field is used to distinguish between managers, even if they share the same name.
          For example, a status update will be distinct from a regular update using the
          same manager name. Note that the APIVersion field is not related to the
          Subresource field and it always corresponds to the version of the main resource.
        type: string
        required: false
      time:
        description: >-
          Time is timestamp of when these fields were set. It should always be empty if
          Operation is 'Apply'
        type: timestamp
        required: false

  MetricIdentifier:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      MetricIdentifier defines the name and optionally selector for a metric
    properties:
      name:
        description: >-
          name is the name of the given metric
        type: string
      selector:
        description: >-
          selector is the string-encoded form of a standard kubernetes label selector for
          the given metric When set, it is passed as an additional parameter to the
          metrics server for more specific metrics scoping. When unset, just the
          metricName will be used to gather metrics.
        type: LabelSelector
        required: false

  MetricSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      MetricSpec specifies how to scale based on a single metric (only `type` and one
      other matching field should be set at once).
    properties:
      containerResource:
        description: >-
          container resource refers to a resource metric (such as those specified in
          requests and limits) known to Kubernetes describing a single container in each
          pod of the current scale target (e.g. CPU or memory). Such metrics are built in
          to Kubernetes, and have special scaling options on top of those available to
          normal per-pod metrics using the "pods" source. This is an alpha feature and can
          be enabled by the HPAContainerMetrics feature flag.
        type: ContainerResourceMetricSource
        required: false
      external:
        description: >-
          external refers to a global metric that is not associated with any Kubernetes
          object. It allows autoscaling based on information coming from components
          running outside of cluster (for example length of queue in cloud messaging
          service, or QPS from loadbalancer running outside of cluster).
        type: ExternalMetricSource
        required: false
      object:
        description: >-
          object refers to a metric describing a single kubernetes object (for example,
          hits-per-second on an Ingress object).
        type: ObjectMetricSource
        required: false
      pods:
        description: >-
          pods refers to a metric describing each pod in the current scale target (for
          example, transactions-processed-per-second). The values will be averaged
          together before being compared to the target value.
        type: PodsMetricSource
        required: false
      resource:
        description: >-
          resource refers to a resource metric (such as those specified in requests and
          limits) known to Kubernetes describing each pod in the current scale target
          (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
          scaling options on top of those available to normal per-pod metrics using the
          "pods" source.
        type: ResourceMetricSource
        required: false
      type:
        description: >-
          type is the type of metric source. It should be one of "ContainerResource",
          "External", "Object", "Pods" or "Resource", each mapping to a matching field in
          the object. Note: "ContainerResource" type is available on when the feature-gate
          HPAContainerMetrics is enabled
        type: string

  MetricStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      MetricStatus describes the last-read state of a single metric.
    properties:
      containerResource:
        description: >-
          container resource refers to a resource metric (such as those specified in
          requests and limits) known to Kubernetes describing a single container in each
          pod in the current scale target (e.g. CPU or memory). Such metrics are built in
          to Kubernetes, and have special scaling options on top of those available to
          normal per-pod metrics using the "pods" source.
        type: ContainerResourceMetricStatus
        required: false
      external:
        description: >-
          external refers to a global metric that is not associated with any Kubernetes
          object. It allows autoscaling based on information coming from components
          running outside of cluster (for example length of queue in cloud messaging
          service, or QPS from loadbalancer running outside of cluster).
        type: ExternalMetricStatus
        required: false
      object:
        description: >-
          object refers to a metric describing a single kubernetes object (for example,
          hits-per-second on an Ingress object).
        type: ObjectMetricStatus
        required: false
      pods:
        description: >-
          pods refers to a metric describing each pod in the current scale target (for
          example, transactions-processed-per-second). The values will be averaged
          together before being compared to the target value.
        type: PodsMetricStatus
        required: false
      resource:
        description: >-
          resource refers to a resource metric (such as those specified in requests and
          limits) known to Kubernetes describing each pod in the current scale target
          (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
          scaling options on top of those available to normal per-pod metrics using the
          "pods" source.
        type: ResourceMetricStatus
        required: false
      type:
        description: >-
          type is the type of metric source. It will be one of "ContainerResource",
          "External", "Object", "Pods" or "Resource", each corresponds to a matching field
          in the object. Note: "ContainerResource" type is available on when the
          feature-gate HPAContainerMetrics is enabled
        type: string

  MetricTarget:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      MetricTarget defines the target value, average value, or average utilization of
      a specific metric
    properties:
      averageUtilization:
        description: >-
          averageUtilization is the target value of the average of the resource metric
          across all relevant pods, represented as a percentage of the requested value of
          the resource for the pods. Currently only valid for Resource metric source type
        type: Factor
        required: false
      averageValue:
        description: >-
          averageValue is the target value of the average of the metric across all
          relevant pods (as a quantity)
        type: Quantity
        required: false
      type:
        description: >-
          type represents whether the metric type is Utilization, Value, or AverageValue
        type: string
      value:
        description: >-
          value is the target value of the metric (as a quantity).
        type: Quantity
        required: false

  MetricValueStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      MetricValueStatus holds the current value for a metric
    properties:
      averageUtilization:
        description: >-
          currentAverageUtilization is the current value of the average of the resource
          metric across all relevant pods, represented as a percentage of the requested
          value of the resource for the pods.
        type: Factor
        required: false
      averageValue:
        description: >-
          averageValue is the current value of the average of the metric across all
          relevant pods (as a quantity)
        type: Quantity
        required: false
      value:
        description: >-
          value is the current value of the metric (as a quantity).
        type: Quantity
        required: false

  MutatingWebhook:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      MutatingWebhook describes an admission webhook and the resources and operations
      it applies to.
    properties:
      admissionReviewVersions:
        description: >-
          AdmissionReviewVersions is an ordered list of preferred `AdmissionReview`
          versions the Webhook expects. API server will try to use first version in the
          list which it supports. If none of the versions specified in this list supported
          by API server, validation will fail for this object. If a persisted webhook
          configuration specifies allowed versions and does not include any versions known
          to the API Server, calls to the webhook will fail and be subject to the failure
          policy.
        type: list
        entry_schema: string
      clientConfig:
        description: >-
          ClientConfig defines how to communicate with the hook. Required
        type: AdmissionRegistrationWebhookClientConfig
      failurePolicy:
        description: >-
          FailurePolicy defines how unrecognized errors from the admission endpoint are
          handled - allowed values are Ignore or Fail. Defaults to Fail.
        type: string
        required: false
        constraints:
          - valid_values: [ Ignore, Fail ]
      matchPolicy:
        description: >-
          matchPolicy defines how the "rules" list is used to match incoming requests.
          Allowed values are "Exact" or "Equivalent".

          - Exact: match a request only if it exactly matches a specified rule. For
          example, if deployments can be modified via apps/v1, apps/v1beta1, and
          extensions/v1beta1, but "rules" only included `apiGroups:["apps"],
          apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or
          extensions/v1beta1 would not be sent to the webhook.

          - Equivalent: match a request if modifies a resource listed in rules, even via
          another API group or version. For example, if deployments can be modified via
          apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included
          `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request
          to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to
          the webhook.

          Defaults to "Equivalent"
        type: string
        required: false
        constraints:
          - valid_values: [ Exact, Equivalent ]
      name:
        description: >-
          The name of the admission webhook. Name should be fully qualified, e.g.,
          imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and
          kubernetes.io is the name of the organization. Required.
        type: string
      namespaceSelector:
        description: >-
          NamespaceSelector decides whether to run the webhook on an object based on
          whether the namespace for that object matches the selector. If the object itself
          is a namespace, the matching is performed on object.metadata.labels. If the
          object is another cluster scoped resource, it never skips the webhook.

          For example, to run the webhook on any objects whose namespace is not associated
          with "runlevel" of "0" or "1"; you will set the selector as follows:
          "namespaceSelector": {
           "matchExpressions": [
           {
           "key": "runlevel",
           "operator": "NotIn",
           "values": [
           "0",
           "1"
           ]
           }
           ]
          }

          If instead you want to only run the webhook on any objects whose namespace is
          associated with the "environment" of "prod" or "staging"; you will set the
          selector as follows: "namespaceSelector": {
           "matchExpressions": [
           {
           "key": "environment",
           "operator": "In",
           "values": [
           "prod",
           "staging"
           ]
           }
           ]
          }

          See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
          for more examples of label selectors.

          Default to the empty LabelSelector, which matches everything.
        type: LabelSelector
        required: false
      objectSelector:
        description: >-
          ObjectSelector decides whether to run the webhook based on if the object has
          matching labels. objectSelector is evaluated against both the oldObject and
          newObject that would be sent to the webhook, and is considered to match if
          either object matches the selector. A null object (oldObject in the case of
          create, or newObject in the case of delete) or an object that cannot have labels
          (like a DeploymentRollback or a PodProxyOptions object) is not considered to
          match. Use the object selector only if the webhook is opt-in, because end users
          may skip the admission webhook by setting the labels. Default to the empty
          LabelSelector, which matches everything.
        type: LabelSelector
        required: false
      reinvocationPolicy:
        description: >-
          reinvocationPolicy indicates whether this webhook should be called multiple
          times as part of a single admission evaluation. Allowed values are "Never" and
          "IfNeeded".

          Never: the webhook will not be called more than once in a single admission
          evaluation.

          IfNeeded: the webhook will be called at least one additional time as part of the
          admission evaluation if the object being admitted is modified by other admission
          plugins after the initial webhook call. Webhooks that specify this option *must*
          be idempotent, able to process objects they previously admitted. Note: * the
          number of additional invocations is not guaranteed to be exactly one. * if
          additional invocations result in further modifications to the object, webhooks
          are not guaranteed to be invoked again. * webhooks that use this option may be
          reordered to minimize the number of additional invocations. * to validate an
          object after all mutations are guaranteed complete, use a validating admission
          webhook instead.

          Defaults to "Never".
        type: string
        required: false
        constraints:
          - valid_values: [ Never, IfNeeded ]
      rules:
        description: >-
          Rules describes what operations on what resources/subresources the webhook cares
          about. The webhook cares about an operation if it matches _any_ Rule. However,
          in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks
          from putting the cluster in a state which cannot be recovered from without
          completely disabling the plugin, ValidatingAdmissionWebhooks and
          MutatingAdmissionWebhooks are never called on admission requests for
          ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
        type: list
        entry_schema: RuleWithOperations
        required: false
      sideEffects:
        description: >-
          SideEffects states whether this webhook has side effects. Acceptable values are:
          None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or
          Unknown). Webhooks with side effects MUST implement a reconciliation system,
          since a request may be rejected by a future step in the admission chain and the
          side effects therefore need to be undone. Requests with the dryRun attribute
          will be auto-rejected if they match a webhook with sideEffects == Unknown or
          Some.
        type: string
        constraints:
          - valid_values: [ None, NoneOnDryRun ]
      timeoutSeconds:
        description: >-
          TimeoutSeconds specifies the timeout for this webhook. After the timeout passes,
          the webhook call will be ignored or the API call will fail based on the failure
          policy. The timeout value must be between 1 and 30 seconds. Default to 10
          seconds.
        type: integer
        required: false
        constraints:
          - in_range: [ 1, 30 ]

  NFSVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not
      support ownership management or SELinux relabeling.
    properties:
      path:
        description: >-
          Path that is exported by the NFS server. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the NFS export to be mounted with read-only
          permissions. Defaults to false. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: boolean
        required: false
      server:
        description: >-
          Server is the hostname or IP address of the NFS server. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string

  NamespaceCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NamespaceCondition contains details about state of namespace.
    properties:
      lastTransitionTime:
        type: timestamp
        required: false
      message:
        type: string
        required: false
      reason:
        type: string
        required: false
      status:
        description: >-
          Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: >-
          Type of namespace controller condition.
        type: string

  NamespaceSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NamespaceSpec describes the attributes on a Namespace.
    properties:
      finalizers:
        description: >-
          Finalizers is an opaque list of values that must be empty to permanently remove
          object from storage. More info:
          https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
        type: list
        entry_schema: string
        required: false

  NamespaceStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NamespaceStatus is information about the current status of a Namespace.
    properties:
      conditions:
        description: >-
          Represents the latest available observations of a namespace's current state.
        type: list
        entry_schema: NamespaceCondition
        required: false
      phase:
        description: >-
          Phase is the current lifecycle phase of the namespace. More info:
          https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
        type: string
        required: false

  NetworkPolicyEgressRule:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NetworkPolicyEgressRule describes a particular set of traffic that is allowed
      out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match
      both ports and to. This type is beta-level in 1.8
    properties:
      ports:
        description: >-
          List of destination ports for outgoing traffic. Each item in this list is
          combined using a logical OR. If this field is empty or missing, this rule
          matches all ports (traffic not restricted by port). If this field is present and
          contains at least one item, then this rule allows traffic only if the traffic
          matches at least one port in the list.
        type: list
        entry_schema: NetworkPolicyPort
        required: false
      to:
        description: >-
          List of destinations for outgoing traffic of pods selected for this rule. Items
          in this list are combined using a logical OR operation. If this field is empty
          or missing, this rule matches all destinations (traffic not restricted by
          destination). If this field is present and contains at least one item, this rule
          allows traffic only if the traffic matches at least one item in the to list.
        type: list
        entry_schema: NetworkPolicyPeer
        required: false

  NetworkPolicyIngressRule:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NetworkPolicyIngressRule describes a particular set of traffic that is allowed
      to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match
      both ports and from.
    properties:
      from:
        description: >-
          List of sources which should be able to access the pods selected for this rule.
          Items in this list are combined using a logical OR operation. If this field is
          empty or missing, this rule matches all sources (traffic not restricted by
          source). If this field is present and contains at least one item, this rule
          allows traffic only if the traffic matches at least one item in the from list.
        type: list
        entry_schema: NetworkPolicyPeer
        required: false
      ports:
        description: >-
          List of ports which should be made accessible on the pods selected for this
          rule. Each item in this list is combined using a logical OR. If this field is
          empty or missing, this rule matches all ports (traffic not restricted by port).
          If this field is present and contains at least one item, then this rule allows
          traffic only if the traffic matches at least one port in the list.
        type: list
        entry_schema: NetworkPolicyPort
        required: false

  NetworkPolicyPeer:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain
      combinations of fields are allowed
    properties:
      ipBlock:
        description: >-
          IPBlock defines policy on a particular IPBlock. If this field is set then
          neither of the other fields can be.
        type: IPBlock
        required: false
      namespaceSelector:
        description: >-
          Selects Namespaces using cluster-scoped labels. This field follows standard
          label selector semantics; if present but empty, it selects all namespaces.

          If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the
          Pods matching PodSelector in the Namespaces selected by NamespaceSelector.
          Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
        type: LabelSelector
        required: false
      podSelector:
        description: >-
          This is a label selector which selects Pods. This field follows standard label
          selector semantics; if present but empty, it selects all pods.

          If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
          the Pods matching PodSelector in the Namespaces selected by NamespaceSelector.
          Otherwise it selects the Pods matching PodSelector in the policy's own
          Namespace.
        type: LabelSelector
        required: false

  NetworkPolicyPort:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NetworkPolicyPort describes a port to allow traffic on
    properties:
      endPort:
        description: >-
          If set, indicates that the range of ports from port to endPort, inclusive,
          should be allowed by the policy. This field cannot be defined if the port field
          is not defined or if the port field is defined as a named (string) port. The
          endPort must be equal or greater than port. This feature is in Beta state and is
          enabled by default. It can be disabled using the Feature Gate
          "NetworkPolicyEndPort".
        type: integer
        required: false
      port:
        description: >-
          The port on the given protocol. This can either be a numerical or named port on
          a pod. If this field is not provided, this matches all port names and numbers.
          If present, only traffic on the specified protocol AND port will be matched.
        type: IntOrString
        required: false
      protocol:
        description: >-
          The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified,
          this field defaults to TCP.
        type: string
        required: false

  NetworkPolicySpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NetworkPolicySpec provides the specification of a NetworkPolicy
    properties:
      egress:
        description: >-
          List of egress rules to be applied to the selected pods. Outgoing traffic is
          allowed if there are no NetworkPolicies selecting the pod (and cluster policy
          otherwise allows the traffic), OR if the traffic matches at least one egress
          rule across all of the NetworkPolicy objects whose podSelector matches the pod.
          If this field is empty then this NetworkPolicy limits all outgoing traffic (and
          serves solely to ensure that the pods it selects are isolated by default). This
          field is beta-level in 1.8
        type: list
        entry_schema: NetworkPolicyEgressRule
        required: false
      ingress:
        description: >-
          List of ingress rules to be applied to the selected pods. Traffic is allowed to
          a pod if there are no NetworkPolicies selecting the pod (and cluster policy
          otherwise allows the traffic), OR if the traffic source is the pod's local node,
          OR if the traffic matches at least one ingress rule across all of the
          NetworkPolicy objects whose podSelector matches the pod. If this field is empty
          then this NetworkPolicy does not allow any traffic (and serves solely to ensure
          that the pods it selects are isolated by default)
        type: list
        entry_schema: NetworkPolicyIngressRule
        required: false
      podSelector:
        description: >-
          Selects the pods to which this NetworkPolicy object applies. The array of
          ingress rules is applied to any pods selected by this field. Multiple network
          policies can select the same set of pods. In this case, the ingress rules for
          each are combined additively. This field is NOT optional and follows standard
          label selector semantics. An empty podSelector matches all pods in this
          namespace.
        type: LabelSelector
      policyTypes:
        description: >-
          List of rule types that the NetworkPolicy relates to. Valid options are
          ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not
          specified, it will default based on the existence of Ingress or Egress rules;
          policies that contain an Egress section are assumed to affect Egress, and all
          policies (whether or not they contain an Ingress section) are assumed to affect
          Ingress. If you want to write an egress-only policy, you must explicitly specify
          policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies
          that no egress is allowed, you must specify a policyTypes value that include
          "Egress" (since such a policy would not include an Egress section and would
          otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
        type: list
        entry_schema: string
        required: false

  NodeAddress:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NodeAddress contains information for the node's address.
    properties:
      address:
        description: >-
          The node address.
        type: string
      type:
        description: >-
          Node address type, one of Hostname, ExternalIP or InternalIP.
        type: string

  NodeAffinity:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Node affinity is a group of node affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the affinity
          expressions specified by this field, but it may choose a node that violates one
          or more of the expressions. The node that is most preferred is the one with the
          greatest sum of weights, i.e. for each node that meets all of the scheduling
          requirements (resource request, requiredDuringScheduling affinity expressions,
          etc.), compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node matches the corresponding matchExpressions; the
          node(s) with the highest sum are the most preferred.
        type: list
        entry_schema: PreferredSchedulingTerm
        required: false
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the affinity requirements specified by this field are not met at scheduling
          time, the pod will not be scheduled onto the node. If the affinity requirements
          specified by this field cease to be met at some point during pod execution (e.g.
          due to an update), the system may or may not try to eventually evict the pod
          from its node.
        type: NodeSelector
        required: false

  NodeCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NodeCondition contains condition information for a node.
    properties:
      lastHeartbeatTime:
        description: >-
          Last time we got an update on a given condition.
        type: timestamp
        required: false
      lastTransitionTime:
        description: >-
          Last time the condition transit from one status to another.
        type: timestamp
        required: false
      message:
        description: >-
          Human readable message indicating details about last transition.
        type: string
        required: false
      reason:
        description: >-
          (brief) reason for the condition's last transition.
        type: string
        required: false
      status:
        description: >-
          Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: >-
          Type of node condition.
        type: string

  NodeConfigSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NodeConfigSource specifies a source of node configuration. Exactly one subfield
      (excluding metadata) must be non-nil. This API is deprecated since 1.22
    properties:
      configMap:
        description: >-
          ConfigMap is a reference to a Node's ConfigMap
        type: ConfigMapNodeConfigSource
        required: false

  NodeConfigStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NodeConfigStatus describes the status of the config assigned by
      Node.Spec.ConfigSource.
    properties:
      active:
        description: >-
          Active reports the checkpointed config the node is actively using. Active will
          represent either the current version of the Assigned config, or the current
          LastKnownGood config, depending on whether attempting to use the Assigned config
          results in an error.
        type: NodeConfigSource
        required: false
      assigned:
        description: >-
          Assigned reports the checkpointed config the node will try to use. When
          Node.Spec.ConfigSource is updated, the node checkpoints the associated config
          payload to local disk, along with a record indicating intended config. The node
          refers to this record to choose its config checkpoint, and reports this record
          in Assigned. Assigned only updates in the status after the record has been
          checkpointed to disk. When the Kubelet is restarted, it tries to make the
          Assigned config the Active config by loading and validating the checkpointed
          payload identified by Assigned.
        type: NodeConfigSource
        required: false
      error:
        description: >-
          Error describes any problems reconciling the Spec.ConfigSource to the Active
          config. Errors may occur, for example, attempting to checkpoint
          Spec.ConfigSource to the local Assigned record, attempting to checkpoint the
          payload associated with Spec.ConfigSource, attempting to load or validate the
          Assigned config, etc. Errors may occur at different points while syncing config.
          Earlier errors (e.g. download or checkpointing errors) will not result in a
          rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors
          (e.g. loading or validating a checkpointed config) will result in a rollback to
          LastKnownGood. In the latter case, it is usually possible to resolve the error
          by fixing the config assigned in Spec.ConfigSource. You can find additional
          information for debugging by searching the error message in the Kubelet log.
          Error is a human-readable description of the error state; machines can check
          whether or not Error is empty, but should not rely on the stability of the Error
          text across Kubelet versions.
        type: string
        required: false
      lastKnownGood:
        description: >-
          LastKnownGood reports the checkpointed config the node will fall back to when it
          encounters an error attempting to use the Assigned config. The Assigned config
          becomes the LastKnownGood config when the node determines that the Assigned
          config is stable and correct. This is currently implemented as a 10-minute soak
          period starting when the local record of Assigned config is updated. If the
          Assigned config is Active at the end of this period, it becomes the
          LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local
          defaults), the LastKnownGood is also immediately reset to nil, because the local
          default config is always assumed good. You should not make assumptions about the
          node's method of determining config stability and correctness, as this may
          change or become configurable in the future.
        type: NodeConfigSource
        required: false

  NodeDaemonEndpoints:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NodeDaemonEndpoints lists ports opened by daemons running on the Node.
    properties:
      kubeletEndpoint:
        description: >-
          Endpoint on which Kubelet is listening.
        type: DaemonEndpoint
        required: false

  NodePortSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    derived_from: ServiceSpec
    properties:
      type:
        type: string
        default: NodePort

  NodeSelector:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A node selector represents the union of the results of one or more label queries
      over a set of nodes; that is, it represents the OR of the selectors represented
      by the node selector terms.
    properties:
      nodeSelectorTerms:
        description: >-
          Required. A list of node selector terms. The terms are ORed.
        type: list
        entry_schema: NodeSelectorTerm

  NodeSelectorRequirement:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A node selector requirement is a selector that contains values, a key, and an
      operator that relates the key and values.
    properties:
      key:
        description: >-
          The label key that the selector applies to.
        type: string
      operator:
        description: >-
          Represents a key's relationship to a set of values. Valid operators are In,
          NotIn, Exists, DoesNotExist. Gt, and Lt.
        type: string
        constraints:
          - valid_values: [ In, NotIn, Exists, DoesNotExist, Gt, Lt ]
      values:
        description: >-
          An array of string values. If the operator is In or NotIn, the values array must
          be non-empty. If the operator is Exists or DoesNotExist, the values array must
          be empty. If the operator is Gt or Lt, the values array must have a single
          element, which will be interpreted as an integer. This array is replaced during
          a strategic merge patch.
        type: list
        entry_schema: string
        required: false

  NodeSelectorTerm:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A null or empty node selector term matches no objects. The requirements of them
      are ANDed. The TopologySelectorTerm type implements a subset of the
      NodeSelectorTerm.
    properties:
      matchExpressions:
        description: >-
          A list of node selector requirements by node's labels.
        type: list
        entry_schema: NodeSelectorRequirement
        required: false
      matchFields:
        description: >-
          A list of node selector requirements by node's fields.
        type: list
        entry_schema: NodeSelectorRequirement
        required: false

  NodeSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NodeSpec describes the attributes that a node is created with.
    properties:
      configSource:
        description: >-
          Deprecated. If specified, the source of the node's configuration. The
          DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this
          field. This field is deprecated as of 1.22:
          https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
        type: NodeConfigSource
        required: false
      externalID:
        description: >-
          Deprecated. Not all kubelets will set this field. Remove field after 1.13. see:
          https://issues.k8s.io/61966
        type: string
        required: false
      podCIDR:
        description: >-
          PodCIDR represents the pod IP range assigned to the node.
        type: string
        required: false
      podCIDRs:
        description: >-
          podCIDRs represents the IP ranges assigned to the node for usage by Pods on that
          node. If this field is specified, the 0th entry must match the podCIDR field. It
          may contain at most 1 value for each of IPv4 and IPv6.
        type: list
        entry_schema: string
        required: false
      providerID:
        description: >-
          ID of the node assigned by the cloud provider in the format:
          <ProviderName>://<ProviderSpecificNodeID>
        type: string
        required: false
      taints:
        description: >-
          If specified, the node's taints.
        type: list
        entry_schema: Taint
        required: false
      unschedulable:
        description: >-
          Unschedulable controls node schedulability of new pods. By default, node is
          schedulable. More info:
          https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
        type: boolean
        required: false

  NodeStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NodeStatus is information about the current status of a node.
    properties:
      addresses:
        description: >-
          List of addresses reachable to the node. Queried from cloud provider, if
          available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
          Note: This field is declared as mergeable, but the merge key is not sufficiently
          unique, which can cause data corruption when it is merged. Callers should
          instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
        type: list
        entry_schema: NodeAddress
        required: false
      allocatable:
        description: >-
          Allocatable represents the resources of a node that are available for
          scheduling. Defaults to Capacity.
        type: map
        entry_schema: Quantity
        required: false
      capacity:
        description: >-
          Capacity represents the total resources of a node. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
        type: map
        entry_schema: Quantity
        required: false
      conditions:
        description: >-
          Conditions is an array of current observed node conditions. More info:
          https://kubernetes.io/docs/concepts/nodes/node/#condition
        type: list
        entry_schema: NodeCondition
        required: false
      config:
        description: >-
          Status of the config assigned to the node via the dynamic Kubelet config
          feature.
        type: NodeConfigStatus
        required: false
      daemonEndpoints:
        description: >-
          Endpoints of daemons running on the Node.
        type: NodeDaemonEndpoints
        required: false
      images:
        description: >-
          List of container images on this node
        type: list
        entry_schema: ContainerImage
        required: false
      nodeInfo:
        description: >-
          Set of ids/uuids to uniquely identify the node. More info:
          https://kubernetes.io/docs/concepts/nodes/node/#info
        type: NodeSystemInfo
        required: false
      phase:
        description: >-
          NodePhase is the recently observed lifecycle phase of the node. More info:
          https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never
          populated, and now is deprecated.
        type: string
        required: false
      volumesAttached:
        description: >-
          List of volumes that are attached to the node.
        type: list
        entry_schema: AttachedVolume
        required: false
      volumesInUse:
        description: >-
          List of attachable volumes in use (mounted) by the node.
        type: list
        entry_schema: string
        required: false

  NodeSystemInfo:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
    properties:
      architecture:
        description: >-
          The Architecture reported by the node
        type: string
      bootID:
        description: >-
          Boot ID reported by the node.
        type: string
      containerRuntimeVersion:
        description: >-
          ContainerRuntime Version reported by the node through runtime remote API (e.g.
          docker://1.5.0).
        type: string
      kernelVersion:
        description: >-
          Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
        type: string
      kubeProxyVersion:
        description: >-
          KubeProxy Version reported by the node.
        type: string
      kubeletVersion:
        description: >-
          Kubelet Version reported by the node.
        type: string
      machineID:
        description: >-
          MachineID reported by the node. For unique machine identification in the cluster
          this field is preferred. Learn more from man(5) machine-id:
          http://man7.org/linux/man-pages/man5/machine-id.5.html
        type: string
      operatingSystem:
        description: >-
          The Operating System reported by the node
        type: string
      osImage:
        description: >-
          OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7
          (wheezy)).
        type: string
      systemUUID:
        description: >-
          SystemUUID reported by the node. For unique machine identification MachineID is
          preferred. This field is specific to Red Hat hosts
          https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
        type: string

  NonResourceAttributes:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NonResourceAttributes includes the authorization attributes available for
      non-resource requests to the Authorizer interface
    properties:
      path:
        description: >-
          Path is the URL path of the request
        type: string
        required: false
      verb:
        description: >-
          Verb is the standard HTTP verb
        type: string
        required: false

  NonResourcePolicyRule:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NonResourcePolicyRule is a predicate that matches non-resource requests
      according to their verb and the target non-resource URL. A NonResourcePolicyRule
      matches a request if and only if both (a) at least one member of verbs matches
      the request and (b) at least one member of nonResourceURLs matches the request.
    properties:
      nonResourceURLs:
        description: >-
          `nonResourceURLs` is a set of url prefixes that a user should have access to and
          may not be empty. For example:
           - "/healthz" is legal
           - "/hea*" is illegal
           - "/hea" is legal but matches nothing
           - "/hea/*" also matches nothing
           - "/healthz/*" matches all per-component health checks.
          "*" matches all non-resource urls. if it is present, it must be the only entry.
          Required.
        type: list
        entry_schema: string
      verbs:
        description: >-
          `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs.
          If it is present, it must be the only entry. Required.
        type: list
        entry_schema: string

  NonResourceRule:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      NonResourceRule holds information that describes a rule for the non-resource
    properties:
      nonResourceURLs:
        description: >-
          NonResourceURLs is a set of partial urls that a user should have access to. *s
          are allowed, but only as the full, final step in the path. "*" means all.
        type: list
        entry_schema: string
        required: false
      verbs:
        description: >-
          Verb is a list of kubernetes non-resource API verbs, like: get, post, put,
          delete, patch, head, options. "*" means all.
        type: list
        entry_schema: string

  ObjectFieldSelector:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ObjectFieldSelector selects an APIVersioned field of an object.
    properties:
      apiVersion:
        description: >-
          Version of the schema the FieldPath is written in terms of, defaults to "v1".
        type: string
        required: false
      fieldPath:
        description: >-
          Path of the field to select in the specified API version.
        type: string

  ObjectMetricSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ObjectMetricSource indicates how to scale on a metric describing a kubernetes
      object (for example, hits-per-second on an Ingress object).
    properties:
      describedObject:
        type: CrossVersionObjectReference
      metric:
        description: >-
          metric identifies the target metric by name and selector
        type: MetricIdentifier
      target:
        description: >-
          target specifies the target value for the given metric
        type: MetricTarget

  ObjectMetricStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ObjectMetricStatus indicates the current value of a metric describing a
      kubernetes object (for example, hits-per-second on an Ingress object).
    properties:
      current:
        description: >-
          current contains the current value for the given metric
        type: MetricValueStatus
      describedObject:
        type: CrossVersionObjectReference
      metric:
        description: >-
          metric identifies the target metric by name and selector
        type: MetricIdentifier

  ObjectReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ObjectReference contains enough information to let you inspect or modify the
      referred object.
    properties:
      apiVersion:
        description: >-
          API version of the referent.
        type: string
        required: false
      fieldPath:
        description: >-
          If referring to a piece of an object instead of an entire object, this string
          should contain a valid JSON/Go field access statement, such as
          desiredState.manifest.containers[2]. For example, if the object reference is to
          a container within a pod, this would take on a value like:
          "spec.containers{name}" (where "name" refers to the name of the container that
          triggered the event) or if no container name is specified "spec.containers[2]"
          (container with index 2 in this pod). This syntax is chosen only to have some
          well-defined way of referencing a part of an object.
        type: string
        required: false
      kind:
        description: >-
          Kind of the referent. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        required: false
      namespace:
        description: >-
          Namespace of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        type: string
        required: false
      resourceVersion:
        description: >-
          Specific resourceVersion to which this reference is made, if any. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        type: string
        required: false
      uid:
        description: >-
          UID of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        type: string
        required: false

  Overhead:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Overhead structure represents the resource overhead associated with running a
      pod.
    properties:
      podFixed:
        description: >-
          PodFixed represents the fixed resource overhead associated with running a pod.
        type: map
        entry_schema: Quantity
        required: false

  OwnerReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      OwnerReference contains enough information to let you identify an owning object.
      An owning object must be in the same namespace as the dependent, or be
      cluster-scoped, so there is no namespace field.
    properties:
      apiVersion:
        description: >-
          API version of the referent.
        type: string
      blockOwnerDeletion:
        description: >-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner
          cannot be deleted from the key-value store until this reference is removed.
          Defaults to false. To set this field, a user needs "delete" permission of the
          owner, otherwise 422 (Unprocessable Entity) will be returned.
        type: boolean
        required: false
      controller:
        description: >-
          If true, this reference points to the managing controller.
        type: boolean
        required: false
      kind:
        description: >-
          Kind of the referent. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
      name:
        description: >-
          Name of the referent. More info:
          http://kubernetes.io/docs/user-guide/identifiers#names
        type: string
      uid:
        description: >-
          UID of the referent. More info:
          http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string

  Patch:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Patch is provided to give a concrete name and type to the Kubernetes PATCH
      request body.

  PersistentVolumeClaim:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PersistentVolumeClaim is a user's request for and claim to a persistent volume
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and may
          reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        type: string
        required: false
      kind:
        description: >-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to. Cannot
          be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      spec:
        description: >-
          Spec defines the desired characteristics of a volume requested by a pod author.
          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: PersistentVolumeClaimSpec
        required: false
      status:
        description: >-
          Status represents the current information/status of a persistent volume claim.
          Read-only. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: PersistentVolumeClaimStatus
        required: false

  PersistentVolumeClaimCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PersistentVolumeClaimCondition contails details about state of pvc
    properties:
      lastProbeTime:
        description: >-
          Last time we probed the condition.
        type: timestamp
        required: false
      lastTransitionTime:
        description: >-
          Last time the condition transitioned from one status to another.
        type: timestamp
        required: false
      message:
        description: >-
          Human-readable message indicating details about last transition.
        type: string
        required: false
      reason:
        description: >-
          Unique, this should be a short, machine understandable string that gives the
          reason for condition's last transition. If it reports "ResizeStarted" that means
          the underlying persistent volume is being resized.
        type: string
        required: false
      status:
        type: string
      type:
        type: string

  PersistentVolumeClaimSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PersistentVolumeClaimSpec describes the common attributes of storage devices and
      allows a Source for provider-specific attributes
    properties:
      accessModes:
        description: >-
          AccessModes contains the desired access modes the volume should have. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        type: list
        entry_schema: string
        required: false
      dataSource:
        description: >-
          This field can be used to specify either: * An existing VolumeSnapshot object
          (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC
          (PersistentVolumeClaim) If the provisioner or an external controller can support
          the specified data source, it will create a new volume based on the contents of
          the specified data source. If the AnyVolumeDataSource feature gate is enabled,
          this field will always have the same contents as the DataSourceRef field.
        type: TypedLocalObjectReference
        required: false
      dataSourceRef:
        description: >-
          Specifies the object from which to populate the volume with data, if a non-empty
          volume is desired. This may be any local object from a non-empty API group (non
          core object) or a PersistentVolumeClaim object. When this field is specified,
          volume binding will only succeed if the type of the specified object matches
          some installed volume populator or dynamic provisioner. This field will replace
          the functionality of the DataSource field and as such if both fields are
          non-empty, they must have the same value. For backwards compatibility, both
          fields (DataSource and DataSourceRef) will be set to the same value
          automatically if one of them is empty and the other is non-empty. There are two
          important differences between DataSource and DataSourceRef: * While DataSource
          only allows two specific types of objects, DataSourceRef
           allows any non-core object, as well as PersistentVolumeClaim objects.
          * While DataSource ignores disallowed values (dropping them), DataSourceRef
           preserves all values, and generates an error if a disallowed value is
           specified.
          (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be
          enabled.
        type: TypedLocalObjectReference
        required: false
      resources:
        description: >-
          Resources represents the minimum resources the volume should have. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        type: ResourceRequirements
        required: false
      selector:
        description: >-
          A label query over volumes to consider for binding.
        type: LabelSelector
        required: false
      storageClassName:
        description: >-
          Name of the StorageClass required by the claim. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        type: string
        required: false
      volumeMode:
        description: >-
          volumeMode defines what type of volume is required by the claim. Value of
          Filesystem is implied when not included in claim spec.
        type: string
        required: false
      volumeName:
        description: >-
          VolumeName is the binding reference to the PersistentVolume backing this claim.
        type: string
        required: false

  PersistentVolumeClaimStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PersistentVolumeClaimStatus is the current status of a persistent volume claim.
    properties:
      accessModes:
        description: >-
          AccessModes contains the actual access modes the volume backing the PVC has.
          More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        type: list
        entry_schema: string
        required: false
      capacity:
        description: >-
          Represents the actual resources of the underlying volume.
        type: map
        entry_schema: Quantity
        required: false
      conditions:
        description: >-
          Current Condition of persistent volume claim. If underlying persistent volume is
          being resized then the Condition will be set to 'ResizeStarted'.
        type: list
        entry_schema: PersistentVolumeClaimCondition
        required: false
      phase:
        description: >-
          Phase represents the current phase of PersistentVolumeClaim.
        type: string
        required: false

  PersistentVolumeClaimTemplate:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects
      as part of an EphemeralVolumeSource.
    properties:
      spec:
        description: >-
          The specification for the PersistentVolumeClaim. The entire content is copied
          unchanged into the PVC that gets created from this template. The same fields as
          in a PersistentVolumeClaim are also valid here.
        type: PersistentVolumeClaimSpec

  PersistentVolumeClaimVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PersistentVolumeClaimVolumeSource references the user's PVC in the same
      namespace. This volume finds the bound PV and mounts that volume for the pod. A
      PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type
      of volume that is owned by someone else (the system).
    properties:
      claimName:
        description: >-
          ClaimName is the name of a PersistentVolumeClaim in the same namespace as the
          pod using this volume. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: string
      readOnly:
        description: >-
          Will force the ReadOnly setting in VolumeMounts. Default false.
        type: boolean
        required: false

  PersistentVolumeSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PersistentVolumeSpec is the specification of a persistent volume.
    properties:
      accessModes:
        description: >-
          AccessModes contains all ways the volume can be mounted. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
        type: list
        entry_schema: string
        required: false
      awsElasticBlockStore:
        description: >-
          AWSElasticBlockStore represents an AWS Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        type: AWSElasticBlockStoreVolumeSource
        required: false
      azureDisk:
        description: >-
          AzureDisk represents an Azure Data Disk mount on the host and bind mount to the
          pod.
        type: AzureDiskVolumeSource
        required: false
      azureFile:
        description: >-
          AzureFile represents an Azure File Service mount on the host and bind mount to
          the pod.
        type: AzureFilePersistentVolumeSource
        required: false
      capacity:
        description: >-
          A description of the persistent volume's resources and capacity. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
        type: map
        entry_schema: Quantity
        required: false
      cephfs:
        description: >-
          CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        type: CephFSPersistentVolumeSource
        required: false
      cinder:
        description: >-
          Cinder represents a cinder volume attached and mounted on kubelets host machine.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        type: CinderPersistentVolumeSource
        required: false
      claimRef:
        description: >-
          ClaimRef is part of a bi-directional binding between PersistentVolume and
          PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is
          the authoritative bind between PV and PVC. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
        type: ObjectReference
        required: false
      csi:
        description: >-
          CSI represents storage that is handled by an external CSI driver (Beta feature).
        type: CSIPersistentVolumeSource
        required: false
      fc:
        description: >-
          FC represents a Fibre Channel resource that is attached to a kubelet's host
          machine and then exposed to the pod.
        type: FCVolumeSource
        required: false
      flexVolume:
        description: >-
          FlexVolume represents a generic volume resource that is provisioned/attached
          using an exec based plugin.
        type: FlexPersistentVolumeSource
        required: false
      flocker:
        description: >-
          Flocker represents a Flocker volume attached to a kubelet's host machine and
          exposed to the pod for its usage. This depends on the Flocker control service
          being running
        type: FlockerVolumeSource
        required: false
      gcePersistentDisk:
        description: >-
          GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's
          host machine and then exposed to the pod. Provisioned by an admin. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: GCEPersistentDiskVolumeSource
        required: false
      glusterfs:
        description: >-
          Glusterfs represents a Glusterfs volume that is attached to a host and exposed
          to the pod. Provisioned by an admin. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md
        type: GlusterfsPersistentVolumeSource
        required: false
      hostPath:
        description: >-
          HostPath represents a directory on the host. Provisioned by a developer or
          tester. This is useful for single-node development and testing only! On-host
          storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type: HostPathVolumeSource
        required: false
      iscsi:
        description: >-
          ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host
          machine and then exposed to the pod. Provisioned by an admin.
        type: ISCSIPersistentVolumeSource
        required: false
      local:
        description: >-
          Local represents directly-attached storage with node affinity
        type: LocalVolumeSource
        required: false
      mountOptions:
        description: >-
          A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply
          fail if one is invalid. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
        type: list
        entry_schema: string
        required: false
      nfs:
        description: >-
          NFS represents an NFS mount on the host. Provisioned by an admin. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: NFSVolumeSource
        required: false
      nodeAffinity:
        description: >-
          NodeAffinity defines constraints that limit what nodes this volume can be
          accessed from. This field influences the scheduling of pods that use this
          volume.
        type: VolumeNodeAffinity
        required: false
      persistentVolumeReclaimPolicy:
        description: >-
          What happens to a persistent volume when released from its claim. Valid options
          are Retain (default for manually created PersistentVolumes), Delete (default for
          dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle
          must be supported by the volume plugin underlying this PersistentVolume. More
          info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
        type: string
        required: false
      photonPersistentDisk:
        description: >-
          PhotonPersistentDisk represents a PhotonController persistent disk attached and
          mounted on kubelets host machine
        type: PhotonPersistentDiskVolumeSource
        required: false
      portworxVolume:
        description: >-
          PortworxVolume represents a portworx volume attached and mounted on kubelets
          host machine
        type: PortworxVolumeSource
        required: false
      quobyte:
        description: >-
          Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        type: QuobyteVolumeSource
        required: false
      rbd:
        description: >-
          RBD represents a Rados Block Device mount on the host that shares a pod's
          lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        type: RBDPersistentVolumeSource
        required: false
      scaleIO:
        description: >-
          ScaleIO represents a ScaleIO persistent volume attached and mounted on
          Kubernetes nodes.
        type: ScaleIOPersistentVolumeSource
        required: false
      storageClassName:
        description: >-
          Name of StorageClass to which this persistent volume belongs. Empty value means
          that this volume does not belong to any StorageClass.
        type: string
        required: false
      storageos:
        description: >-
          StorageOS represents a StorageOS volume that is attached to the kubelet's host
          machine and mounted into the pod More info:
          https://examples.k8s.io/volumes/storageos/README.md
        type: StorageOSPersistentVolumeSource
        required: false
      volumeMode:
        description: >-
          volumeMode defines if a volume is intended to be used with a formatted
          filesystem or to remain in raw block state. Value of Filesystem is implied when
          not included in spec.
        type: string
        required: false
      vsphereVolume:
        description: >-
          VsphereVolume represents a vSphere volume attached and mounted on kubelets host
          machine
        type: VsphereVirtualDiskVolumeSource
        required: false

  PersistentVolumeStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PersistentVolumeStatus is the current status of a persistent volume.
    properties:
      message:
        description: >-
          A human-readable message indicating details about why the volume is in this
          state.
        type: string
        required: false
      phase:
        description: >-
          Phase indicates if a volume is available, bound to a claim, or released by a
          claim. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
        type: string
        required: false
      reason:
        description: >-
          Reason is a brief CamelCase string that describes any failure and is meant for
          machine parsing and tidy display in the CLI.
        type: string
        required: false

  PhotonPersistentDiskVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Photon Controller persistent disk resource.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.
        type: string
        required: false
      pdID:
        description: >-
          ID that identifies Photon Controller persistent disk
        type: string

  PodAffinity:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Pod affinity is a group of inter pod affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the affinity
          expressions specified by this field, but it may choose a node that violates one
          or more of the expressions. The node that is most preferred is the one with the
          greatest sum of weights, i.e. for each node that meets all of the scheduling
          requirements (resource request, requiredDuringScheduling affinity expressions,
          etc.), compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding
          podAffinityTerm; the node(s) with the highest sum are the most preferred.
        type: list
        entry_schema: WeightedPodAffinityTerm
        required: false
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the affinity requirements specified by this field are not met at scheduling
          time, the pod will not be scheduled onto the node. If the affinity requirements
          specified by this field cease to be met at some point during pod execution (e.g.
          due to a pod label update), the system may or may not try to eventually evict
          the pod from its node. When there are multiple elements, the lists of nodes
          corresponding to each podAffinityTerm are intersected, i.e. all terms must be
          satisfied.
        type: list
        entry_schema: PodAffinityTerm
        required: false

  PodAffinityTerm:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Defines a set of pods (namely those matching the labelSelector relative to the
      given namespace(s)) that this pod should be co-located (affinity) or not
      co-located (anti-affinity) with, where co-located is defined as running on a
      node whose value of the label with key <topologyKey> matches that of any node on
      which a pod of the set of pods is running
    properties:
      labelSelector:
        description: >-
          A label query over a set of resources, in this case pods.
        type: LabelSelector
        required: false
      namespaceSelector:
        description: >-
          A label query over the set of namespaces that the term applies to. The term is
          applied to the union of the namespaces selected by this field and the ones
          listed in the namespaces field. null selector and null or empty namespaces list
          means "this pod's namespace". An empty selector ({}) matches all namespaces.
          This field is beta-level and is only honored when PodAffinityNamespaceSelector
          feature is enabled.
        type: LabelSelector
        required: false
      namespaces:
        description: >-
          namespaces specifies a static list of namespace names that the term applies to.
          The term is applied to the union of the namespaces listed in this field and the
          ones selected by namespaceSelector. null or empty namespaces list and null
          namespaceSelector means "this pod's namespace"
        type: list
        entry_schema: string
        required: false
      topologyKey:
        description: >-
          This pod should be co-located (affinity) or not co-located (anti-affinity) with
          the pods matching the labelSelector in the specified namespaces, where
          co-located is defined as running on a node whose value of the label with key
          topologyKey matches that of any node on which any of the selected pods is
          running. Empty topologyKey is not allowed.
        type: string

  PodAntiAffinity:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Pod anti affinity is a group of inter pod anti affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the
          anti-affinity expressions specified by this field, but it may choose a node that
          violates one or more of the expressions. The node that is most preferred is the
          one with the greatest sum of weights, i.e. for each node that meets all of the
          scheduling requirements (resource request, requiredDuringScheduling
          anti-affinity expressions, etc.), compute a sum by iterating through the
          elements of this field and adding "weight" to the sum if the node has pods which
          matches the corresponding podAffinityTerm; the node(s) with the highest sum are
          the most preferred.
        type: list
        entry_schema: WeightedPodAffinityTerm
        required: false
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the anti-affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node. If the
          anti-affinity requirements specified by this field cease to be met at some point
          during pod execution (e.g. due to a pod label update), the system may or may not
          try to eventually evict the pod from its node. When there are multiple elements,
          the lists of nodes corresponding to each podAffinityTerm are intersected, i.e.
          all terms must be satisfied.
        type: list
        entry_schema: PodAffinityTerm
        required: false

  PodCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodCondition contains details for the current condition of this pod.
    properties:
      lastProbeTime:
        description: >-
          Last time we probed the condition.
        type: timestamp
        required: false
      lastTransitionTime:
        description: >-
          Last time the condition transitioned from one status to another.
        type: timestamp
        required: false
      message:
        description: >-
          Human-readable message indicating details about last transition.
        type: string
        required: false
      reason:
        description: >-
          Unique, one-word, CamelCase reason for the condition's last transition.
        type: string
        required: false
      status:
        description: >-
          Status is the status of the condition. Can be True, False, Unknown. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        type: string
      type:
        description: >-
          Type is the type of the condition. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        type: string

  PodDNSConfig:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodDNSConfig defines the DNS parameters of a pod in addition to those generated
      from DNSPolicy.
    properties:
      nameservers:
        description: >-
          A list of DNS name server IP addresses. This will be appended to the base
          nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        type: list
        entry_schema: IPAddress
        required: false
      options:
        description: >-
          A list of DNS resolver options. This will be merged with the base options
          generated from DNSPolicy. Duplicated entries will be removed. Resolution options
          given in Options will override those that appear in the base DNSPolicy.
        type: list
        entry_schema: PodDNSConfigOption
        required: false
      searches:
        description: >-
          A list of DNS search domains for host-name lookup. This will be appended to the
          base search paths generated from DNSPolicy. Duplicated search paths will be
          removed.
        type: list
        entry_schema: string
        required: false

  PodDNSConfigOption:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodDNSConfigOption defines DNS resolver options of a pod.
    properties:
      name:
        description: >-
          Required.
        type: string
        required: false
      value:
        type: string
        required: false

  PodDisruptionBudgetSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
    properties:
      maxUnavailable:
        description: >-
          An eviction is allowed if at most "maxUnavailable" pods selected by "selector"
          are unavailable after the eviction, i.e. even in absence of the evicted pod. For
          example, one can prevent all voluntary evictions by specifying 0. This is a
          mutually exclusive setting with "minAvailable".
        type: IntOrString
        required: false
      minAvailable:
        description: >-
          An eviction is allowed if at least "minAvailable" pods selected by "selector"
          will still be available after the eviction, i.e. even in the absence of the
          evicted pod. So for example you can prevent all voluntary evictions by
          specifying "100%".
        type: IntOrString
        required: false
      selector:
        description: >-
          Label query over pods whose evictions are managed by the disruption budget. A
          null selector will match no pods, while an empty ({}) selector will select all
          pods within the namespace.
        type: LabelSelector
        required: false

  PodDisruptionBudgetStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodDisruptionBudgetStatus represents information about the status of a
      PodDisruptionBudget. Status may trail the actual state of a system.
    properties:
      conditions:
        description: >-
          Conditions contain conditions for PDB. The disruption controller sets the
          DisruptionAllowed condition. The following are known values for the reason field
          (additional reasons could be added in the future): - SyncFailed: The controller
          encountered an error and wasn't able to compute
           the number of allowed disruptions. Therefore no disruptions are
           allowed and the status of the condition will be False.
          - InsufficientPods: The number of pods are either at or below the number
           required by the PodDisruptionBudget. No disruptions are
           allowed and the status of the condition will be False.
          - SufficientPods: There are more pods than required by the PodDisruptionBudget.
           The condition will be True, and the number of allowed
           disruptions are provided by the disruptionsAllowed property.
        type: list
        entry_schema: Condition
        required: false
      currentHealthy:
        description: >-
          current number of healthy pods
        type: integer
      desiredHealthy:
        description: >-
          minimum desired number of healthy pods
        type: integer
      disruptedPods:
        description: >-
          DisruptedPods contains information about pods whose eviction was processed by
          the API server eviction subresource handler but has not yet been observed by the
          PodDisruptionBudget controller. A pod will be in this map from the time when the
          API server processed the eviction request to the time when the pod is seen by
          PDB controller as having been marked for deletion (or after a timeout). The key
          in the map is the name of the pod and the value is the time when the API server
          processed the eviction request. If the deletion didn't occur and a pod is still
          there it will be removed from the list automatically by PodDisruptionBudget
          controller after some time. If everything goes smooth this map should be empty
          for the most of the time. Large number of entries in the map may indicate
          problems with pod deletions.
        type: map
        entry_schema: timestamp
        required: false
      disruptionsAllowed:
        description: >-
          Number of pod disruptions that are currently allowed.
        type: integer
      expectedPods:
        description: >-
          total number of pods counted by this disruption budget
        type: integer
      observedGeneration:
        description: >-
          Most recent generation observed when updating this PDB status.
          DisruptionsAllowed and other status information is valid only if
          observedGeneration equals to PDB's object generation.
        type: integer
        required: false

  PodIP:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      IP address information for entries in the (plural) PodIPs field. Each entry
      includes:
       IP: An IP address allocated to the pod. Routable at least within the cluster.
    properties:
      ip:
        description: >-
          ip is an IP address (IPv4 or IPv6) assigned to the pod
        type: string
        required: false

  PodReadinessGate:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodReadinessGate contains the reference to a pod condition
    properties:
      conditionType:
        description: >-
          ConditionType refers to a condition in the pod's condition list with matching
          type.
        type: string

  PodSecurityContext:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodSecurityContext holds pod-level security attributes and common container
      settings. Some fields are also present in container.securityContext. Field
      values of container.securityContext take precedence over field values of
      PodSecurityContext.
    properties:
      fsGroup:
        description: >-
          A special supplemental group that applies to all containers in a pod. Some
          volume types allow the Kubelet to change the ownership of that volume to be
          owned by the pod:

          1. The owning GID will be the FSGroup 2. The setgid bit is set (new files
          created in the volume will be owned by FSGroup) 3. The permission bits are OR'd
          with rw-rw----

          If unset, the Kubelet will not modify the ownership and permissions of any
          volume.
        type: integer
        required: false
      fsGroupChangePolicy:
        description: >-
          fsGroupChangePolicy defines behavior of changing ownership and permission of the
          volume before being exposed inside Pod. This field will only apply to volume
          types which support fsGroup based ownership(and permissions). It will have no
          effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid
          values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        type: string
        required: false
        constraints:
          - valid_values: [ OnRootMismatch, Always ]
      runAsGroup:
        description: >-
          The GID to run the entrypoint of the container process. Uses runtime default if
          unset. May also be set in SecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence for
          that container.
        type: integer
        required: false
      runAsNonRoot:
        description: >-
          Indicates that the container must run as a non-root user. If true, the Kubelet
          will validate the image at runtime to ensure that it does not run as UID 0
          (root) and fail to start the container if it does. If unset or false, no such
          validation will be performed. May also be set in SecurityContext. If set in both
          SecurityContext and PodSecurityContext, the value specified in SecurityContext
          takes precedence.
        type: boolean
        required: false
      runAsUser:
        description: >-
          The UID to run the entrypoint of the container process. Defaults to user
          specified in image metadata if unspecified. May also be set in SecurityContext.
          If set in both SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence for that container.
        type: integer
        required: false
      seLinuxOptions:
        description: >-
          The SELinux context to be applied to all containers. If unspecified, the
          container runtime will allocate a random SELinux context for each container. May
          also be set in SecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence for
          that container.
        type: SELinuxOptions
        required: false
      seccompProfile:
        description: >-
          The seccomp options to use by the containers in this pod.
        type: SeccompProfile
        required: false
      supplementalGroups:
        description: >-
          A list of groups applied to the first process run in each container, in addition
          to the container's primary GID. If unspecified, no groups will be added to any
          container.
        type: list
        entry_schema: integer
        required: false
      sysctls:
        description: >-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with
          unsupported sysctls (by the container runtime) might fail to launch.
        type: list
        entry_schema: Sysctl
        required: false
      windowsOptions:
        description: >-
          The Windows specific settings applied to all containers. If unspecified, the
          options within a container's SecurityContext will be used. If set in both
          SecurityContext and PodSecurityContext, the value specified in SecurityContext
          takes precedence.
        type: WindowsSecurityContextOptions
        required: false

  PodSecurityPolicySpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodSecurityPolicySpec defines the policy enforced.
    properties:
      allowPrivilegeEscalation:
        description: >-
          allowPrivilegeEscalation determines if a pod can request to allow privilege
          escalation. If unspecified, defaults to true.
        type: boolean
        required: false
      allowedCSIDrivers:
        description: >-
          AllowedCSIDrivers is an allowlist of inline CSI drivers that must be explicitly
          set to be embedded within a pod spec. An empty value indicates that any CSI
          driver can be used for inline ephemeral volumes. This is a beta field, and is
          only honored if the API server enables the CSIInlineVolume feature gate.
        type: list
        entry_schema: AllowedCSIDriver
        required: false
      allowedCapabilities:
        description: >-
          allowedCapabilities is a list of capabilities that can be requested to add to
          the container. Capabilities in this field may be added at the pod author's
          discretion. You must not list a capability in both allowedCapabilities and
          requiredDropCapabilities.
        type: list
        entry_schema: string
        required: false
      allowedFlexVolumes:
        description: >-
          allowedFlexVolumes is an allowlist of Flexvolumes. Empty or nil indicates that
          all Flexvolumes may be used. This parameter is effective only when the usage of
          the Flexvolumes is allowed in the "volumes" field.
        type: list
        entry_schema: AllowedFlexVolume
        required: false
      allowedHostPaths:
        description: >-
          allowedHostPaths is an allowlist of host paths. Empty indicates that all host
          paths may be used.
        type: list
        entry_schema: AllowedHostPath
        required: false
      allowedProcMountTypes:
        description: >-
          AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil
          indicates that only the DefaultProcMountType may be used. This requires the
          ProcMountType feature flag to be enabled.
        type: list
        entry_schema: string
        required: false
      allowedUnsafeSysctls:
        description: >-
          allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to
          none. Each entry is either a plain sysctl name or ends in "*" in which case it
          is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls
          are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to
          avoid rejection.

          Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows
          "foo.bar", "foo.baz", etc.
        type: list
        entry_schema: string
        required: false
      defaultAddCapabilities:
        description: >-
          defaultAddCapabilities is the default set of capabilities that will be added to
          the container unless the pod spec specifically drops the capability. You may not
          list a capability in both defaultAddCapabilities and requiredDropCapabilities.
          Capabilities added here are implicitly allowed, and need not be included in the
          allowedCapabilities list.
        type: list
        entry_schema: string
        required: false
      defaultAllowPrivilegeEscalation:
        description: >-
          defaultAllowPrivilegeEscalation controls the default setting for whether a
          process can gain more privileges than its parent process.
        type: boolean
        required: false
      forbiddenSysctls:
        description: >-
          forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none.
          Each entry is either a plain sysctl name or ends in "*" in which case it is
          considered as a prefix of forbidden sysctls. Single * means all sysctls are
          forbidden.

          Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids
          "foo.bar", "foo.baz", etc.
        type: list
        entry_schema: string
        required: false
      fsGroup:
        description: >-
          fsGroup is the strategy that will dictate what fs group is used by the
          SecurityContext.
        type: FSGroupStrategyOptions
      hostIPC:
        description: >-
          hostIPC determines if the policy allows the use of HostIPC in the pod spec.
        type: boolean
        required: false
      hostNetwork:
        description: >-
          hostNetwork determines if the policy allows the use of HostNetwork in the pod
          spec.
        type: boolean
        required: false
      hostPID:
        description: >-
          hostPID determines if the policy allows the use of HostPID in the pod spec.
        type: boolean
        required: false
      hostPorts:
        description: >-
          hostPorts determines which host port ranges are allowed to be exposed.
        type: list
        entry_schema: HostPortRange
        required: false
      privileged:
        description: >-
          privileged determines if a pod can request to be run as privileged.
        type: boolean
        required: false
      readOnlyRootFilesystem:
        description: >-
          readOnlyRootFilesystem when set to true will force containers to run with a read
          only root file system. If the container specifically requests to run with a
          non-read only root file system the PSP should deny the pod. If set to false the
          container may run with a read only root file system if it wishes but it will not
          be forced to.
        type: boolean
        required: false
      requiredDropCapabilities:
        description: >-
          requiredDropCapabilities are the capabilities that will be dropped from the
          container. These are required to be dropped and cannot be added.
        type: list
        entry_schema: string
        required: false
      runAsGroup:
        description: >-
          RunAsGroup is the strategy that will dictate the allowable RunAsGroup values
          that may be set. If this field is omitted, the pod's RunAsGroup can take any
          value. This field requires the RunAsGroup feature gate to be enabled.
        type: RunAsGroupStrategyOptions
        required: false
      runAsUser:
        description: >-
          runAsUser is the strategy that will dictate the allowable RunAsUser values that
          may be set.
        type: RunAsUserStrategyOptions
      runtimeClass:
        description: >-
          runtimeClass is the strategy that will dictate the allowable RuntimeClasses for
          a pod. If this field is omitted, the pod's runtimeClassName field is
          unrestricted. Enforcement of this field depends on the RuntimeClass feature gate
          being enabled.
        type: RuntimeClassStrategyOptions
        required: false
      seLinux:
        description: >-
          seLinux is the strategy that will dictate the allowable labels that may be set.
        type: SELinuxStrategyOptions
      supplementalGroups:
        description: >-
          supplementalGroups is the strategy that will dictate what supplemental groups
          are used by the SecurityContext.
        type: SupplementalGroupsStrategyOptions
      volumes:
        description: >-
          volumes is an allowlist of volume plugins. Empty indicates that no volumes may
          be used. To allow all volumes you may use '*'.
        type: list
        entry_schema: string
        required: false

  PodSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodSpec is a description of a pod.
    properties:
      activeDeadlineSeconds:
        description: >-
          Optional duration in seconds the pod may be active on the node relative to
          StartTime before the system will actively try to mark it failed and kill
          associated containers. Value must be a positive integer.
        type: integer
        required: false
      affinity:
        description: >-
          If specified, the pod's scheduling constraints
        type: Affinity
        required: false
      automountServiceAccountToken:
        description: >-
          AutomountServiceAccountToken indicates whether a service account token should be
          automatically mounted.
        type: boolean
        required: false
      containers:
        description: >-
          List of containers belonging to the pod. Containers cannot currently be added or
          removed. There must be at least one container in a Pod. Cannot be updated.
        type: list
        entry_schema: Container
      dnsConfig:
        description: >-
          Specifies the DNS parameters of a pod. Parameters specified here will be merged
          to the generated DNS configuration based on DNSPolicy.
        type: PodDNSConfig
        required: false
      dnsPolicy:
        description: >-
          Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are
          'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters
          given in DNSConfig will be merged with the policy selected with DNSPolicy. To
          have DNS options set along with hostNetwork, you have to specify DNS policy
          explicitly to 'ClusterFirstWithHostNet'.
        type: string
        required: false
        constraints:
          - valid_values: [ ClusterFirstWithHostNet, ClusterFirst, Default, None ]
      enableServiceLinks:
        description: >-
          EnableServiceLinks indicates whether information about services should be
          injected into pod's environment variables, matching the syntax of Docker links.
          Optional: Defaults to true.
        type: boolean
        required: false
      ephemeralContainers:
        description: >-
          List of ephemeral containers run in this pod. Ephemeral containers may be run in
          an existing pod to perform user-initiated actions such as debugging. This list
          cannot be specified when creating a pod, and it cannot be modified by updating
          the pod spec. In order to add an ephemeral container to an existing pod, use the
          pod's ephemeralcontainers subresource. This field is alpha-level and is only
          honored by servers that enable the EphemeralContainers feature.
        type: list
        entry_schema: EphemeralContainer
        required: false
      hostAliases:
        description: >-
          HostAliases is an optional list of hosts and IPs that will be injected into the
          pod's hosts file if specified. This is only valid for non-hostNetwork pods.
        type: list
        entry_schema: HostAlias
        required: false
      hostIPC:
        description: >-
          Use the host's ipc namespace. Optional: Default to false.
        type: boolean
        required: false
      hostNetwork:
        description: >-
          Host networking requested for this pod. Use the host's network namespace. If
          this option is set, the ports that will be used must be specified. Default to
          false.
        type: boolean
        required: false
      hostPID:
        description: >-
          Use the host's pid namespace. Optional: Default to false.
        type: boolean
        required: false
      hostname:
        description: >-
          Specifies the hostname of the Pod If not specified, the pod's hostname will be
          set to a system-defined value.
        type: string
        required: false
      imagePullSecrets:
        description: >-
          ImagePullSecrets is an optional list of references to secrets in the same
          namespace to use for pulling any of the images used by this PodSpec. If
          specified, these secrets will be passed to individual puller implementations for
          them to use. For example, in the case of docker, only DockerConfig type secrets
          are honored. More info:
          https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
        type: list
        entry_schema: LocalObjectReference
        required: false
      initContainers:
        description: >-
          List of initialization containers belonging to the pod. Init containers are
          executed in order prior to containers being started. If any init container
          fails, the pod is considered to have failed and is handled according to its
          restartPolicy. The name for an init container or normal container must be unique
          among all containers. Init containers may not have Lifecycle actions, Readiness
          probes, Liveness probes, or Startup probes. The resourceRequirements of an init
          container are taken into account during scheduling by finding the highest
          request/limit for each resource type, and then using the max of of that value or
          the sum of the normal containers. Limits are applied to init containers in a
          similar fashion. Init containers cannot currently be added or removed. Cannot be
          updated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        type: list
        entry_schema: Container
        required: false
      nodeName:
        description: >-
          NodeName is a request to schedule this pod onto a specific node. If it is
          non-empty, the scheduler simply schedules this pod onto that node, assuming that
          it fits resource requirements.
        type: string
        required: false
      nodeSelector:
        description: >-
          NodeSelector is a selector which must be true for the pod to fit on a node.
          Selector which must match a node's labels for the pod to be scheduled on that
          node. More info:
          https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        type: map
        entry_schema: string
        required: false
      overhead:
        description: >-
          Overhead represents the resource overhead associated with running a pod for a
          given RuntimeClass. This field will be autopopulated at admission time by the
          RuntimeClass admission controller. If the RuntimeClass admission controller is
          enabled, overhead must not be set in Pod create requests. The RuntimeClass
          admission controller will reject Pod create requests which have the overhead
          already set. If RuntimeClass is configured and selected in the PodSpec, Overhead
          will be set to the value defined in the corresponding RuntimeClass, otherwise it
          will remain unset and treated as zero. More info:
          https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This
          field is beta-level as of Kubernetes v1.18, and is only honored by servers that
          enable the PodOverhead feature.
        type: map
        entry_schema: Quantity
        required: false
      preemptionPolicy:
        description: >-
          PreemptionPolicy is the Policy for preempting pods with lower priority. One of
          Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This
          field is beta-level, gated by the NonPreemptingPriority feature-gate.
        type: string
        required: false
      priority:
        description: >-
          The priority value. Various system components use this field to find the
          priority of the pod. When Priority Admission Controller is enabled, it prevents
          users from setting this field. The admission controller populates this field
          from PriorityClassName. The higher the value, the higher the priority.
        type: integer
        required: false
      priorityClassName:
        description: >-
          If specified, indicates the pod's priority. "system-node-critical" and
          "system-cluster-critical" are two special keywords which indicate the highest
          priorities with the former being the highest priority. Any other name must be
          defined by creating a PriorityClass object with that name. If not specified, the
          pod priority will be default or zero if there is no default.
        type: string
        required: false
      readinessGates:
        description: >-
          If specified, all readiness gates will be evaluated for pod readiness. A pod is
          ready when all its containers are ready AND all conditions specified in the
          readiness gates have status equal to "True" More info:
          https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
        type: list
        entry_schema: PodReadinessGate
        required: false
      restartPolicy:
        description: >-
          Restart policy for all containers within the pod. One of Always, OnFailure,
          Never. Default to Always. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
        type: string
        required: false
      runtimeClassName:
        description: >-
          RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which
          should be used to run this pod. If no RuntimeClass resource matches the named
          class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass
          will be used, which is an implicit class with an empty definition that uses the
          default runtime handler. More info:
          https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class This is a beta
          feature as of Kubernetes v1.14.
        type: string
        required: false
      schedulerName:
        description: >-
          If specified, the pod will be dispatched by specified scheduler. If not
          specified, the pod will be dispatched by default scheduler.
        type: string
        required: false
      securityContext:
        description: >-
          SecurityContext holds pod-level security attributes and common container
          settings. Optional: Defaults to empty. See type description for default values
          of each field.
        type: PodSecurityContext
        required: false
      serviceAccount:
        description: >-
          DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
          Deprecated: Use serviceAccountName instead.
        type: string
        required: false
      serviceAccountName:
        description: >-
          ServiceAccountName is the name of the ServiceAccount to use to run this pod.
          More info:
          https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
        type: string
        required: false
      setHostnameAsFQDN:
        description: >-
          If true the pod's hostname will be configured as the pod's FQDN, rather than the
          leaf name (the default). In Linux containers, this means setting the FQDN in the
          hostname field of the kernel (the nodename field of struct utsname). In Windows
          containers, this means setting the registry value of hostname for the registry
          key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to
          FQDN. If a pod does not have FQDN, this has no effect. Default to false.
        type: boolean
        required: false
      shareProcessNamespace:
        description: >-
          Share a single process namespace between all of the containers in a pod. When
          this is set containers will be able to view and signal processes from other
          containers in the same pod, and the first process in each container will not be
          assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional:
          Default to false.
        type: boolean
        required: false
      subdomain:
        description: >-
          If specified, the fully qualified Pod hostname will be
          "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified,
          the pod will not have a domainname at all.
        type: string
        required: false
      terminationGracePeriodSeconds:
        description: >-
          Optional duration in seconds the pod needs to terminate gracefully. May be
          decreased in delete request. Value must be non-negative integer. The value zero
          indicates stop immediately via the kill signal (no opportunity to shut down). If
          this value is nil, the default grace period will be used instead. The grace
          period is the duration in seconds after the processes running in the pod are
          sent a termination signal and the time when the processes are forcibly halted
          with a kill signal. Set this value longer than the expected cleanup time for
          your process. Defaults to 30 seconds.
        type: integer
        required: false
      tolerations:
        description: >-
          If specified, the pod's tolerations.
        type: list
        entry_schema: Toleration
        required: false
      topologySpreadConstraints:
        description: >-
          TopologySpreadConstraints describes how a group of pods ought to spread across
          topology domains. Scheduler will schedule pods in a way which abides by the
          constraints. All topologySpreadConstraints are ANDed.
        type: list
        entry_schema: TopologySpreadConstraint
        required: false
      volumes:
        description: >-
          List of volumes that can be mounted by containers belonging to the pod. More
          info: https://kubernetes.io/docs/concepts/storage/volumes
        type: list
        entry_schema: Volume
        required: false

  PodStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodStatus represents information about the status of a pod. Status may trail the
      actual state of a system, especially if the node that hosts the pod cannot
      contact the control plane.
    properties:
      conditions:
        description: >-
          Current service state of pod. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        type: list
        entry_schema: PodCondition
        required: false
      containerStatuses:
        description: >-
          The list has one entry per container in the manifest. Each entry is currently
          the output of `docker inspect`. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        type: list
        entry_schema: ContainerStatus
        required: false
      ephemeralContainerStatuses:
        description: >-
          Status for any ephemeral containers that have run in this pod. This field is
          alpha-level and is only populated by servers that enable the EphemeralContainers
          feature.
        type: list
        entry_schema: ContainerStatus
        required: false
      hostIP:
        description: >-
          IP address of the host to which the pod is assigned. Empty if not yet scheduled.
        type: IPAddress
        required: false
      initContainerStatuses:
        description: >-
          The list has one entry per init container in the manifest. The most recent
          successful init container will have ready = true, the most recently started
          container will have startTime set. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        type: list
        entry_schema: ContainerStatus
        required: false
      message:
        description: >-
          A human readable message indicating details about why the pod is in this
          condition.
        type: string
        required: false
      nominatedNodeName:
        description: >-
          nominatedNodeName is set only when this pod preempts other pods on the node, but
          it cannot be scheduled right away as preemption victims receive their graceful
          termination periods. This field does not guarantee that the pod will be
          scheduled on this node. Scheduler may decide to place the pod elsewhere if other
          nodes become available sooner. Scheduler may also decide to give the resources
          on this node to a higher priority pod that is created after preemption. As a
          result, this field may be different than PodSpec.nodeName when the pod is
          scheduled.
        type: string
        required: false
      phase:
        description: >-
          The phase of a Pod is a simple, high-level summary of where the Pod is in its
          lifecycle. The conditions array, the reason and message fields, and the
          individual container status arrays contain more detail about the pod's status.
          There are five possible phase values:

          Pending: The pod has been accepted by the Kubernetes system, but one or more of
          the container images has not been created. This includes time before being
          scheduled as well as time spent downloading images over the network, which could
          take a while. Running: The pod has been bound to a node, and all of the
          containers have been created. At least one container is still running, or is in
          the process of starting or restarting. Succeeded: All containers in the pod have
          terminated in success, and will not be restarted. Failed: All containers in the
          pod have terminated, and at least one container has terminated in failure. The
          container either exited with non-zero status or was terminated by the system.
          Unknown: For some reason the state of the pod could not be obtained, typically
          due to an error in communicating with the host of the pod.

          More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
        type: string
        required: false
        constraints:
          - valid_values: [ Pending, Running, Succeeded, Unknown ]
      podIP:
        description: >-
          IP address allocated to the pod. Routable at least within the cluster. Empty if
          not yet allocated.
        type: IPAddress
        required: false
      podIPs:
        description: >-
          podIPs holds the IP addresses allocated to the pod. If this field is specified,
          the 0th entry must match the podIP field. Pods may be allocated at most 1 value
          for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
        type: list
        entry_schema: PodIP
        required: false
      qosClass:
        description: >-
          The Quality of Service (QOS) classification assigned to the pod based on
          resource requirements See PodQOSClass type for available QOS classes More info:
          https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
        type: string
        required: false
      reason:
        description: >-
          A brief CamelCase message indicating details about why the pod is in this state.
          e.g. 'Evicted'
        type: string
        required: false
      startTime:
        description: >-
          RFC 3339 date and time at which the object was acknowledged by the Kubelet. This
          is before the Kubelet pulled the container image(s) for the pod.
        type: timestamp
        required: false

  PodTemplateOwner:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
      turandot.copy.1: metadata.labels->spec.selector.matchLabels
      turandot.copy.2: metadata.labels->spec.template.metadata.labels
      turandot.copy.3: metadata.annotations->spec.template.metadata.annotations
    description: >-
      Base for types that contain a pod template.
    properties:
      selector:
        description: >-
          More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
        type: LabelSelector
      template:
        description: >-
          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
        type: PodTemplateSpec

  PodTemplateSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodTemplateSpec describes the data a pod should have when created from a
      template
    properties:
      spec:
        description: >-
          Specification of the desired behavior of the pod. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        type: PodSpec
        required: false

  PodsMetricSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodsMetricSource indicates how to scale on a metric describing each pod in the
      current scale target (for example, transactions-processed-per-second). The
      values will be averaged together before being compared to the target value.
    properties:
      metric:
        description: >-
          metric identifies the target metric by name and selector
        type: MetricIdentifier
      target:
        description: >-
          target specifies the target value for the given metric
        type: MetricTarget

  PodsMetricStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PodsMetricStatus indicates the current value of a metric describing each pod in
      the current scale target (for example, transactions-processed-per-second).
    properties:
      current:
        description: >-
          current contains the current value for the given metric
        type: MetricValueStatus
      metric:
        description: >-
          metric identifies the target metric by name and selector
        type: MetricIdentifier

  PolicyRule:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PolicyRule holds information that describes a policy rule, but does not contain
      information about who the rule applies to or which namespace the rule applies
      to.
    properties:
      apiGroups:
        description: >-
          APIGroups is the name of the APIGroup that contains the resources. If multiple
          API groups are specified, any action requested against one of the enumerated
          resources in any API group will be allowed.
        type: list
        entry_schema: string
        required: false
      nonResourceURLs:
        description: >-
          NonResourceURLs is a set of partial urls that a user should have access to. *s
          are allowed, but only as the full, final step in the path Since non-resource
          URLs are not namespaced, this field is only applicable for ClusterRoles
          referenced from a ClusterRoleBinding. Rules can either apply to API resources
          (such as "pods" or "secrets") or non-resource URL paths (such as "/api"), but
          not both.
        type: list
        entry_schema: string
        required: false
      resourceNames:
        description: >-
          ResourceNames is an optional white list of names that the rule applies to. An
          empty set means that everything is allowed.
        type: list
        entry_schema: string
        required: false
      resources:
        description: >-
          Resources is a list of resources this rule applies to. '*' represents all
          resources.
        type: list
        entry_schema: string
        required: false
      verbs:
        description: >-
          Verbs is a list of Verbs that apply to ALL the ResourceKinds and
          AttributeRestrictions contained in this rule. '*' represents all verbs.
        type: list
        entry_schema: string

  PolicyRulesWithSubjects:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PolicyRulesWithSubjects prescribes a test that applies to a request to an
      apiserver. The test considers the subject making the request, the verb being
      requested, and the resource to be acted upon. This PolicyRulesWithSubjects
      matches a request if and only if both (a) at least one member of subjects
      matches the request and (b) at least one member of resourceRules or
      nonResourceRules matches the request.
    properties:
      nonResourceRules:
        description: >-
          `nonResourceRules` is a list of NonResourcePolicyRules that identify matching
          requests according to their verb and the target non-resource URL.
        type: list
        entry_schema: NonResourcePolicyRule
        required: false
      resourceRules:
        description: >-
          `resourceRules` is a slice of ResourcePolicyRules that identify matching
          requests according to their verb and the target resource. At least one of
          `resourceRules` and `nonResourceRules` has to be non-empty.
        type: list
        entry_schema: ResourcePolicyRule
        required: false
      subjects:
        description: >-
          subjects is the list of normal user, serviceaccount, or group that this rule
          cares about. There must be at least one member in this slice. A slice that
          includes both the system:authenticated and system:unauthenticated user groups
          matches every request. Required.
        type: list
        entry_schema: FlowControlSubject

  PortStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    properties:
      error:
        description: >-
          Error is to record the problem with the service port The format of the error
          shall comply with the following rules: - built-in error values shall be
          specified in this file and those shall use
           CamelCase names
          - cloud provider specific error values must have names that comply with the
           format foo.example.com/CamelCase.
        type: string
        required: false
      port:
        description: >-
          Port is the port number of the service port of which status is recorded here
        type: integer
      protocol:
        description: >-
          Protocol is the protocol of the service port of which status is recorded here
          The supported values are: "TCP", "UDP", "SCTP"
        type: string
        constraints:
          - valid_values: [ TCP, UDP, SCTP ]

  PortworxVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PortworxVolumeSource represents a Portworx volume resource.
    properties:
      fsType:
        description: >-
          FSType represents the filesystem type to mount Must be a filesystem type
          supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred
          to be "ext4" if unspecified.
        type: string
        required: false
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
          VolumeMounts.
        type: boolean
        required: false
      volumeID:
        description: >-
          VolumeID uniquely identifies a Portworx volume
        type: string

  Preconditions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Preconditions must be fulfilled before an operation (update, delete, etc.) is
      carried out.
    properties:
      resourceVersion:
        description: >-
          Specifies the target ResourceVersion
        type: string
        required: false
      uid:
        description: >-
          Specifies the target UID.
        type: string
        required: false

  PreferredSchedulingTerm:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      An empty preferred scheduling term matches all objects with implicit weight 0
      (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e.
      is also a no-op).
    properties:
      preference:
        description: >-
          A node selector term, associated with the corresponding weight.
        type: NodeSelectorTerm
      weight:
        description: >-
          Weight associated with matching the corresponding nodeSelectorTerm, in the range
          1-100.
        type: integer

  PriorityLevelConfigurationCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PriorityLevelConfigurationCondition defines the condition of priority level.
    properties:
      lastTransitionTime:
        description: >-
          `lastTransitionTime` is the last time the condition transitioned from one status
          to another.
        type: timestamp
        required: false
      message:
        description: >-
          `message` is a human-readable message indicating details about last transition.
        type: string
        required: false
      reason:
        description: >-
          `reason` is a unique, one-word, CamelCase reason for the condition's last
          transition.
        type: string
        required: false
      status:
        description: >-
          `status` is the status of the condition. Can be True, False, Unknown. Required.
        type: string
        required: false
      type:
        description: >-
          `type` is the type of the condition. Required.
        type: string
        required: false

  PriorityLevelConfigurationReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PriorityLevelConfigurationReference contains information that points to the
      "request-priority" being used.
    properties:
      name:
        description: >-
          `name` is the name of the priority level configuration being referenced
          Required.
        type: string

  PriorityLevelConfigurationSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PriorityLevelConfigurationSpec specifies the configuration of a priority level.
    properties:
      limited:
        description: >-
          `limited` specifies how requests are handled for a Limited priority level. This
          field must be non-empty if and only if `type` is `"Limited"`.
        type: LimitedPriorityLevelConfiguration
        required: false
      type:
        description: >-
          `type` indicates whether this priority level is subject to limitation on request
          execution. A value of `"Exempt"` means that requests of this priority level are
          not subject to a limit (and thus are never queued) and do not detract from the
          capacity made available to other priority levels. A value of `"Limited"` means
          that (a) requests of this priority level _are_ subject to limits and (b) some of
          the server's limited capacity is made available exclusively to this priority
          level. Required.
        type: string

  PriorityLevelConfigurationStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      PriorityLevelConfigurationStatus represents the current state of a
      "request-priority".
    properties:
      conditions:
        description: >-
          `conditions` is the current state of "request-priority".
        type: list
        entry_schema: PriorityLevelConfigurationCondition
        required: false

  Probe:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Probe describes a health check to be performed against a container to determine
      whether it is alive or ready to receive traffic.
    properties:
      exec:
        description: >-
          One and only one of the following should be specified. Exec specifies the action
          to take.
        type: ExecAction
        required: false
      failureThreshold:
        description: >-
          Minimum consecutive failures for the probe to be considered failed after having
          succeeded. Defaults to 3. Minimum value is 1.
        type: integer
        required: false
      httpGet:
        description: >-
          HTTPGet specifies the http request to perform.
        type: HTTPGetAction
        required: false
      initialDelaySeconds:
        description: >-
          Number of seconds after the container has started before liveness probes are
          initiated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        type: integer
        required: false
      periodSeconds:
        description: >-
          How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
          value is 1.
        type: integer
        required: false
      successThreshold:
        description: >-
          Minimum consecutive successes for the probe to be considered successful after
          having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value
          is 1.
        type: integer
        required: false
        constraints:
          - greater_than: 0
      tcpSocket:
        description: >-
          TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        type: TCPSocketAction
        required: false
      terminationGracePeriodSeconds:
        description: >-
          Optional duration in seconds the pod needs to terminate gracefully upon probe
          failure. The grace period is the duration in seconds after the processes running
          in the pod are sent a termination signal and the time when the processes are
          forcibly halted with a kill signal. Set this value longer than the expected
          cleanup time for your process. If this value is nil, the pod's
          terminationGracePeriodSeconds will be used. Otherwise, this value overrides the
          value provided by the pod spec. Value must be non-negative integer. The value
          zero indicates stop immediately via the kill signal (no opportunity to shut
          down). This is a beta field and requires enabling ProbeTerminationGracePeriod
          feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if
          unset.
        type: integer
        required: false
      timeoutSeconds:
        description: >-
          Number of seconds after which the probe times out. Defaults to 1 second. Minimum
          value is 1. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        type: integer
        required: false

  ProjectedVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a projected volume source
    properties:
      defaultMode:
        description: >-
          Mode bits used to set permissions on created files by default. Must be an octal
          value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts
          both octal and decimal values, JSON requires decimal values for mode bits.
          Directories within the path are not affected by this setting. This might be in
          conflict with other options that affect the file mode, like fsGroup, and the
          result can be other mode bits set.
        type: FileMode
        required: false
      sources:
        description: >-
          list of volume projections
        type: list
        entry_schema: VolumeProjection
        required: false

  Quantity:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Quantity is a fixed-point representation of a number. It provides convenient
      marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64()
      accessors.

      The serialization format is:

      <quantity> ::= <signedNumber><suffix>
       (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
      <digit> ::= 0 | 1 | ... | 9 <digits> ::= <digit> | <digit><digits> <number> ::=
      <digits> | <digits>.<digits> | <digits>. | .<digits> <sign> ::= "+" | "-"
      <signedNumber> ::= <number> | <sign><number> <suffix> ::= <binarySI> |
      <decimalExponent> | <decimalSI> <binarySI> ::= Ki | Mi | Gi | Ti | Pi | Ei
       (International System of units; See:
      http://physics.nist.gov/cuu/Units/binary.html)
      <decimalSI> ::= m | "" | k | M | G | T | P | E
       (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

      No matter which of the three exponent forms is used, no quantity may represent a
      number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
      places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m
      will rounded up to 1m.) This may be extended in the future if we require larger
      or smaller quantities.

      When a Quantity is parsed from a string, it will remember the type of suffix it
      had, and will use the same type again when it is serialized.

      Before serializing, Quantity will be put in "canonical form". This means that
      Exponent/suffix will be adjusted up or down (with a corresponding increase or
      decrease in Mantissa) such that:
       a. No precision is lost
       b. No fractional digits will be emitted
       c. The exponent (or suffix) is as large as possible.
      The sign will be omitted unless the number is negative.

      Examples:
       1.5 will be serialized as "1500m"
       1.5Gi will be serialized as "1536Mi"

      Note that the quantity will NEVER be internally represented by a floating point
      number. That is the whole point of this exercise.

      Non-canonical values will still parse as long as they are well formed, but will
      be re-emitted in their canonical form. (So always use canonical form, or don't
      diff.)

      This format is intended to make it difficult to use these numbers without
      writing some sort of special handling code in the hopes that that will cause
      implementors to also use a fixed point implementation.

  QueuingConfiguration:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      QueuingConfiguration holds the configuration parameters for queuing
    properties:
      handSize:
        description: >-
          `handSize` is a small positive number that configures the shuffle sharding of
          requests into queues. When enqueuing a request at this priority level the
          request's flow identifier (a string pair) is hashed and the hash value is used
          to shuffle the list of queues and deal a hand of the size specified here. The
          request is put into one of the shortest queues in that hand. `handSize` must be
          no larger than `queues`, and should be significantly smaller (so that a few
          heavy flows do not saturate most of the queues). See the user-facing
          documentation for more extensive guidance on setting this field. This field has
          a default value of 8.
        type: integer
        required: false
      queueLengthLimit:
        description: >-
          `queueLengthLimit` is the maximum number of requests allowed to be waiting in a
          given queue of this priority level at a time; excess requests are rejected. This
          value must be positive. If not specified, it will be defaulted to 50.
        type: integer
        required: false
      queues:
        description: >-
          `queues` is the number of queues for this priority level. The queues exist
          independently at each apiserver. The value must be positive. Setting it to 1
          effectively precludes shufflesharding and thus makes the distinguisher method of
          associated flow schemas irrelevant. This field has a default value of 64.
        type: integer
        required: false

  QuobyteVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do
      not support ownership management or SELinux relabeling.
    properties:
      group:
        description: >-
          Group to map volume access to Default is no group
        type: string
        required: false
      readOnly:
        description: >-
          ReadOnly here will force the Quobyte volume to be mounted with read-only
          permissions. Defaults to false.
        type: boolean
        required: false
      registry:
        description: >-
          Registry represents a single or multiple Quobyte Registry services specified as
          a string as host:port pair (multiple entries are separated with commas) which
          acts as the central registry for volumes
        type: string
      tenant:
        description: >-
          Tenant owning the given Quobyte volume in the Backend Used with dynamically
          provisioned Quobyte volumes, value is set by the plugin
        type: string
        required: false
      user:
        description: >-
          User to map volume access to Defaults to serivceaccount user
        type: string
        required: false
      volume:
        description: >-
          Volume is a string that references an already created Quobyte volume by name.
        type: string

  RBDPersistentVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD
      volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that the
          filesystem type is supported by the host operating system. Examples: "ext4",
          "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#rbd
        type: string
        required: false
      image:
        description: >-
          The rados image name. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
      keyring:
        description: >-
          Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More
          info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
        required: false
      monitors:
        description: >-
          A collection of Ceph monitors. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: list
        entry_schema: string
      pool:
        description: >-
          The rados pool name. Default is rbd. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
        required: false
      readOnly:
        description: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
          false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: boolean
        required: false
      secretRef:
        description: >-
          SecretRef is name of the authentication secret for RBDUser. If provided
          overrides keyring. Default is nil. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: SecretReference
        required: false
      user:
        description: >-
          The rados user name. Default is admin. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
        required: false

  RBDVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD
      volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that the
          filesystem type is supported by the host operating system. Examples: "ext4",
          "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#rbd
        type: string
        required: false
      image:
        description: >-
          The rados image name. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
      keyring:
        description: >-
          Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More
          info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
        required: false
      monitors:
        description: >-
          A collection of Ceph monitors. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: list
        entry_schema: string
      pool:
        description: >-
          The rados pool name. Default is rbd. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
        required: false
      readOnly:
        description: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
          false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: boolean
        required: false
      secretRef:
        description: >-
          SecretRef is name of the authentication secret for RBDUser. If provided
          overrides keyring. Default is nil. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: LocalObjectReference
        required: false
      user:
        description: >-
          The rados user name. Default is admin. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
        required: false

  RawExtension:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      RawExtension is used to hold extensions in external versions.

      To use this, make a field which has RawExtension as its type in your external,
      versioned struct, and Object in your internal struct. You also need to register
      your various plugin types.

      // Internal package: type MyAPIObject struct {
      	runtime.TypeMeta `json:",inline"`
      	MyPlugin runtime.Object `json:"myPlugin"`
      } type PluginA struct {
      	AOption string `json:"aOption"`
      }

      // External package: type MyAPIObject struct {
      	runtime.TypeMeta `json:",inline"`
      	MyPlugin runtime.RawExtension `json:"myPlugin"`
      } type PluginA struct {
      	AOption string `json:"aOption"`
      }

      // On the wire, the JSON will look something like this: {
      	"kind":"MyAPIObject",
      	"apiVersion":"v1",
      	"myPlugin": {
       "kind":"PluginA",
       "aOption":"foo",
      	},
      }

      So what happens? Decode first uses json or yaml to unmarshal the serialized data
      into your external MyAPIObject. That causes the raw JSON to be stored, but not
      unpacked. The next step is to copy (using pkg/conversion) into the internal
      struct. The runtime package's DefaultScheme has conversion functions installed
      which will unpack the JSON stored in RawExtension, turning it into the correct
      object type, and storing it in the Object. (TODO: In the case where the object
      is of an unknown type, a runtime.Unknown object will be created and stored.)

  ReplicaSetCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ReplicaSetCondition describes the state of a replica set at a certain point.
    properties:
      lastTransitionTime:
        description: >-
          The last time the condition transitioned from one status to another.
        type: timestamp
        required: false
      message:
        description: >-
          A human readable message indicating details about the transition.
        type: string
        required: false
      reason:
        description: >-
          The reason for the condition's last transition.
        type: string
        required: false
      status:
        description: >-
          Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: >-
          Type of replica set condition.
        type: string

  ReplicaSetSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ReplicaSetSpec is the specification of a ReplicaSet.
    derived_from: PodTemplateOwner
    properties:
      minReadySeconds:
        description: >-
          Minimum number of seconds for which a newly created pod should be ready without
          any of its container crashing, for it to be considered available. Defaults to 0
          (pod will be considered available as soon as it is ready)
        type: integer
        required: false
      replicas:
        description: >-
          Replicas is the number of desired replicas. This is a pointer to distinguish
          between explicit zero and unspecified. Defaults to 1. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
        type: integer
        required: false
      selector:
        description: >-
          Selector is a label query over pods that should match the replica count. Label
          keys and values that must match in order to be controlled by this replica set.
          It must match the pod template's labels. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        type: LabelSelector
      template:
        description: >-
          Template is the object that describes the pod that will be created if
          insufficient replicas are detected. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
        type: PodTemplateSpec
        required: false

  ReplicaSetStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ReplicaSetStatus represents the current status of a ReplicaSet.
    properties:
      availableReplicas:
        description: >-
          The number of available replicas (ready for at least minReadySeconds) for this
          replica set.
        type: integer
        required: false
      conditions:
        description: >-
          Represents the latest available observations of a replica set's current state.
        type: list
        entry_schema: ReplicaSetCondition
        required: false
      fullyLabeledReplicas:
        description: >-
          The number of pods that have labels matching the labels of the pod template of
          the replicaset.
        type: integer
        required: false
      observedGeneration:
        description: >-
          ObservedGeneration reflects the generation of the most recently observed
          ReplicaSet.
        type: integer
        required: false
      readyReplicas:
        description: >-
          The number of ready replicas for this replica set.
        type: integer
        required: false
      replicas:
        description: >-
          Replicas is the most recently oberved number of replicas. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
        type: integer

  ReplicationControllerCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ReplicationControllerCondition describes the state of a replication controller
      at a certain point.
    properties:
      lastTransitionTime:
        description: >-
          The last time the condition transitioned from one status to another.
        type: timestamp
        required: false
      message:
        description: >-
          A human readable message indicating details about the transition.
        type: string
        required: false
      reason:
        description: >-
          The reason for the condition's last transition.
        type: string
        required: false
      status:
        description: >-
          Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: >-
          Type of replication controller condition.
        type: string

  ReplicationControllerSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ReplicationControllerSpec is the specification of a replication controller.
    properties:
      minReadySeconds:
        description: >-
          Minimum number of seconds for which a newly created pod should be ready without
          any of its container crashing, for it to be considered available. Defaults to 0
          (pod will be considered available as soon as it is ready)
        type: integer
        required: false
      replicas:
        description: >-
          Replicas is the number of desired replicas. This is a pointer to distinguish
          between explicit zero and unspecified. Defaults to 1. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
        type: integer
        required: false
      selector:
        description: >-
          Selector is a label query over pods that should match the Replicas count. If
          Selector is empty, it is defaulted to the labels present on the Pod template.
          Label keys and values that must match in order to be controlled by this
          replication controller, if empty defaulted to labels on Pod template. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        type: map
        entry_schema: string
        required: false
      template:
        description: >-
          Template is the object that describes the pod that will be created if
          insufficient replicas are detected. This takes precedence over a TemplateRef.
          More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
        type: PodTemplateSpec
        required: false

  ReplicationControllerStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ReplicationControllerStatus represents the current status of a replication
      controller.
    properties:
      availableReplicas:
        description: >-
          The number of available replicas (ready for at least minReadySeconds) for this
          replication controller.
        type: integer
        required: false
      conditions:
        description: >-
          Represents the latest available observations of a replication controller's
          current state.
        type: list
        entry_schema: ReplicationControllerCondition
        required: false
      fullyLabeledReplicas:
        description: >-
          The number of pods that have labels matching the labels of the pod template of
          the replication controller.
        type: integer
        required: false
      observedGeneration:
        description: >-
          ObservedGeneration reflects the generation of the most recently observed
          replication controller.
        type: integer
        required: false
      readyReplicas:
        description: >-
          The number of ready replicas for this replication controller.
        type: integer
        required: false
      replicas:
        description: >-
          Replicas is the most recently oberved number of replicas. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
        type: integer

  ResourceAttributes:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ResourceAttributes includes the authorization attributes available for resource
      requests to the Authorizer interface
    properties:
      group:
        description: >-
          Group is the API Group of the Resource. "*" means all.
        type: string
        required: false
      name:
        description: >-
          Name is the name of the resource being requested for a "get" or deleted for a
          "delete". "" (empty) means all.
        type: string
        required: false
      namespace:
        description: >-
          Namespace is the namespace of the action being requested. Currently, there is no
          distinction between no namespace and all namespaces "" (empty) is defaulted for
          LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources ""
          (empty) means "all" for namespace scoped resources from a SubjectAccessReview or
          SelfSubjectAccessReview
        type: string
        required: false
      resource:
        description: >-
          Resource is one of the existing resource types. "*" means all.
        type: string
        required: false
      subresource:
        description: >-
          Subresource is one of the existing resource types. "" means none.
        type: string
        required: false
      verb:
        description: >-
          Verb is a kubernetes resource API verb, like: get, list, watch, create, update,
          delete, proxy. "*" means all.
        type: string
        required: false
      version:
        description: >-
          Version is the API Version of the Resource. "*" means all.
        type: string
        required: false

  ResourceFieldSelector:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ResourceFieldSelector represents container resources (cpu, memory) and their
      output format
    properties:
      containerName:
        description: >-
          Container name: required for volumes, optional for env vars
        type: string
        required: false
      divisor:
        description: >-
          Specifies the output format of the exposed resources, defaults to "1"
        type: Quantity
        required: false
      resource:
        description: >-
          Required: resource to select
        type: string

  ResourceMetricSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ResourceMetricSource indicates how to scale on a resource metric known to
      Kubernetes, as specified in requests and limits, describing each pod in the
      current scale target (e.g. CPU or memory). The values will be averaged together
      before being compared to the target. Such metrics are built in to Kubernetes,
      and have special scaling options on top of those available to normal per-pod
      metrics using the "pods" source. Only one "target" type should be set.
    properties:
      name:
        description: >-
          name is the name of the resource in question.
        type: string
      target:
        description: >-
          target specifies the target value for the given metric
        type: MetricTarget

  ResourceMetricStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ResourceMetricStatus indicates the current value of a resource metric known to
      Kubernetes, as specified in requests and limits, describing each pod in the
      current scale target (e.g. CPU or memory). Such metrics are built in to
      Kubernetes, and have special scaling options on top of those available to normal
      per-pod metrics using the "pods" source.
    properties:
      current:
        description: >-
          current contains the current value for the given metric
        type: MetricValueStatus
      name:
        description: >-
          Name is the name of the resource in question.
        type: string

  ResourcePolicyRule:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ResourcePolicyRule is a predicate that matches some resource requests, testing
      the request's verb and the target resource. A ResourcePolicyRule matches a
      resource request if and only if: (a) at least one member of verbs matches the
      request, (b) at least one member of apiGroups matches the request, (c) at least
      one member of resources matches the request, and (d) least one member of
      namespaces matches the request.
    properties:
      apiGroups:
        description: >-
          `apiGroups` is a list of matching API groups and may not be empty. "*" matches
          all API groups and, if present, must be the only entry. Required.
        type: list
        entry_schema: string
      clusterScope:
        description: >-
          `clusterScope` indicates whether to match requests that do not specify a
          namespace (which happens either because the resource is not namespaced or the
          request targets all namespaces). If this field is omitted or false then the
          `namespaces` field must contain a non-empty list.
        type: boolean
        required: false
      namespaces:
        description: >-
          `namespaces` is a list of target namespaces that restricts matches. A request
          that specifies a target namespace matches only if either (a) this list contains
          that target namespace or (b) this list contains "*". Note that "*" matches any
          specified namespace but does not match a request that _does not specify_ a
          namespace (see the `clusterScope` field for that). This list may be empty, but
          only if `clusterScope` is true.
        type: list
        entry_schema: string
        required: false
      resources:
        description: >-
          `resources` is a list of matching resources (i.e., lowercase and plural) with,
          if desired, subresource. For example, [ "services", "nodes/status" ]. This list
          may not be empty. "*" matches all resources and, if present, must be the only
          entry. Required.
        type: list
        entry_schema: string
      verbs:
        description: >-
          `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs
          and, if present, must be the only entry. Required.
        type: list
        entry_schema: string

  ResourceQuotaSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
    properties:
      hard:
        description: >-
          hard is the set of desired hard limits for each named resource. More info:
          https://kubernetes.io/docs/concepts/policy/resource-quotas/
        type: map
        entry_schema: Quantity
        required: false
      scopeSelector:
        description: >-
          scopeSelector is also a collection of filters like scopes that must match each
          object tracked by a quota but expressed using ScopeSelectorOperator in
          combination with possible values. For a resource to match, both scopes AND
          scopeSelector (if specified in spec), must be matched.
        type: ScopeSelector
        required: false
      scopes:
        description: >-
          A collection of filters that must match each object tracked by a quota. If not
          specified, the quota matches all objects.
        type: list
        entry_schema: string
        required: false

  ResourceQuotaStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ResourceQuotaStatus defines the enforced hard limits and observed use.
    properties:
      hard:
        description: >-
          Hard is the set of enforced hard limits for each named resource. More info:
          https://kubernetes.io/docs/concepts/policy/resource-quotas/
        type: map
        entry_schema: Quantity
        required: false
      used:
        description: >-
          Used is the current observed total usage of the resource in the namespace.
        type: map
        entry_schema: Quantity
        required: false

  ResourceRequirements:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ResourceRequirements describes the compute resource requirements.
    properties:
      limits:
        description: >-
          Limits describes the maximum amount of compute resources allowed. More info:
          https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        type: map
        entry_schema: Quantity
        required: false
      requests:
        description: >-
          Requests describes the minimum amount of compute resources required. If Requests
          is omitted for a container, it defaults to Limits if that is explicitly
          specified, otherwise to an implementation-defined value. More info:
          https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        type: map
        entry_schema: Quantity
        required: false

  ResourceRule:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ResourceRule is the list of actions the subject is allowed to perform on
      resources. The list ordering isn't significant, may contain duplicates, and
      possibly be incomplete.
    properties:
      apiGroups:
        description: >-
          APIGroups is the name of the APIGroup that contains the resources. If multiple
          API groups are specified, any action requested against one of the enumerated
          resources in any API group will be allowed. "*" means all.
        type: list
        entry_schema: string
        required: false
      resourceNames:
        description: >-
          ResourceNames is an optional white list of names that the rule applies to. An
          empty set means that everything is allowed. "*" means all.
        type: list
        entry_schema: string
        required: false
      resources:
        description: >-
          Resources is a list of resources this rule applies to. "*" means all in the
          specified apiGroups.
           "*/foo" represents the subresource 'foo' for all resources in the specified
          apiGroups.
        type: list
        entry_schema: string
        required: false
      verbs:
        description: >-
          Verb is a list of kubernetes resource API verbs, like: get, list, watch, create,
          update, delete, proxy. "*" means all.
        type: list
        entry_schema: string

  RoleRef:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      RoleRef contains information that points to the role being used
    properties:
      apiGroup:
        description: >-
          APIGroup is the group for the resource being referenced
        type: string
      kind:
        description: >-
          Kind is the type of resource being referenced
        type: string
      name:
        description: >-
          Name is the name of resource being referenced
        type: string

  RollingUpdateDaemonSet:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Spec to control the desired behavior of daemon set rolling update.
    properties:
      maxSurge:
        description: >-
          The maximum number of nodes with an existing available DaemonSet pod that can
          have an updated DaemonSet pod during during an update. Value can be an absolute
          number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if
          MaxUnavailable is 0. Absolute number is calculated from percentage by rounding
          up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at
          most 30% of the total number of nodes that should be running the daemon pod
          (i.e. status.desiredNumberScheduled) can have their a new pod created before the
          old pod is marked as deleted. The update starts by launching new pods on 30% of
          nodes. Once an updated pod is available (Ready for at least minReadySeconds) the
          old DaemonSet pod on that node is marked deleted. If the old pod becomes
          unavailable for any reason (Ready transitions to false, is evicted, or is
          drained) an updated pod is immediatedly created on that node without considering
          surge limits. Allowing surge implies the possibility that the resources consumed
          by the daemonset on any given node can double if the readiness check fails, and
          so resource intensive daemonsets should take into account that they may cause
          evictions during disruption. This is beta field and enabled/disabled by
          DaemonSetUpdateSurge feature gate.
        type: Amount
        required: false
      maxUnavailable:
        description: >-
          The maximum number of DaemonSet pods that can be unavailable during the update.
          Value can be an absolute number (ex: 5) or a percentage of total number of
          DaemonSet pods at the start of the update (ex: 10%). Absolute number is
          calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0
          Default value is 1. Example: when this is set to 30%, at most 30% of the total
          number of nodes that should be running the daemon pod (i.e.
          status.desiredNumberScheduled) can have their pods stopped for an update at any
          given time. The update starts by stopping at most 30% of those DaemonSet pods
          and then brings up new DaemonSet pods in their place. Once the new pods are
          available, it then proceeds onto other DaemonSet pods, thus ensuring that at
          least 70% of original number of DaemonSet pods are available at all times during
          the update.
        type: Amount
        required: false

  RollingUpdateDeployment:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Spec to control the desired behavior of rolling update.
    properties:
      maxSurge:
        description: >-
          The maximum number of pods that can be scheduled above the desired number of
          pods. Value can be an absolute number (ex: 5) or a percentage of desired pods
          (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is
          calculated from percentage by rounding up. Defaults to 25%. Example: when this
          is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling
          update starts, such that the total number of old and new pods do not exceed 130%
          of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up
          further, ensuring that total number of pods running at any time during the
          update is at most 130% of desired pods.
        type: Amount
        required: false
      maxUnavailable:
        description: >-
          The maximum number of pods that can be unavailable during the update. Value can
          be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
          Absolute number is calculated from percentage by rounding down. This can not be
          0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old
          ReplicaSet can be scaled down to 70% of desired pods immediately when the
          rolling update starts. Once new pods are ready, old ReplicaSet can be scaled
          down further, followed by scaling up the new ReplicaSet, ensuring that the total
          number of pods available at all times during the update is at least 70% of
          desired pods.
        type: Amount
        required: false

  RollingUpdateStatefulSetStrategy:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      RollingUpdateStatefulSetStrategy is used to communicate parameter for
      RollingUpdateStatefulSetStrategyType.
    properties:
      partition:
        description: >-
          Partition indicates the ordinal at which the StatefulSet should be partitioned.
          Default value is 0.
        type: integer
        required: false

  RuleWithOperations:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      RuleWithOperations is a tuple of Operations and Resources. It is recommended to
      make sure that all the tuple expansions are valid.
    properties:
      apiGroups:
        description: >-
          APIGroups is the API groups the resources belong to. '*' is all groups. If '*'
          is present, the length of the slice must be one. Required.
        type: list
        entry_schema: string
        required: false
      apiVersions:
        description: >-
          APIVersions is the API versions the resources belong to. '*' is all versions. If
          '*' is present, the length of the slice must be one. Required.
        type: list
        entry_schema: string
        required: false
      operations:
        description: >-
          Operations is the operations the admission hook cares about - CREATE, UPDATE,
          DELETE, CONNECT or * for all of those operations and any future admission
          operations that are added. If '*' is present, the length of the slice must be
          one. Required.
        type: list
        entry_schema: string
        required: false
        constraints:
          - min_length: 1
      resources:
        description: >-
          Resources is a list of resources this rule applies to.

          For example: 'pods' means pods. 'pods/log' means the log subresource of pods.
          '*' means all resources, but not subresources. 'pods/*' means all subresources
          of pods. '*/scale' means all scale subresources. '*/*' means all resources and
          their subresources.

          If wildcard is present, the validation rule will ensure resources do not overlap
          with each other.

          Depending on the enclosing object, subresources might not be allowed. Required.
        type: list
        entry_schema: string
        required: false
      scope:
        description: >-
          scope specifies the scope of this rule. Valid values are "Cluster",
          "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will
          match this rule. Namespace API objects are cluster-scoped. "Namespaced" means
          that only namespaced resources will match this rule. "*" means that there are no
          scope restrictions. Subresources match the scope of their parent resource.
          Default is "*".
        type: string
        required: false
        constraints:
          - valid_values: [ Cluster, Namespaced, '*' ]

  RunAsGroupStrategyOptions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      RunAsGroupStrategyOptions defines the strategy type and any options used to
      create the strategy.
    properties:
      ranges:
        description: >-
          ranges are the allowed ranges of gids that may be used. If you would like to
          force a single gid then supply a single range with the same start and end.
          Required for MustRunAs.
        type: list
        entry_schema: IDRange
        required: false
      rule:
        description: >-
          rule is the strategy that will dictate the allowable RunAsGroup values that may
          be set.
        type: string

  RunAsUserStrategyOptions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      RunAsUserStrategyOptions defines the strategy type and any options used to
      create the strategy.
    properties:
      ranges:
        description: >-
          ranges are the allowed ranges of uids that may be used. If you would like to
          force a single uid then supply a single range with the same start and end.
          Required for MustRunAs.
        type: list
        entry_schema: IDRange
        required: false
      rule:
        description: >-
          rule is the strategy that will dictate the allowable RunAsUser values that may
          be set.
        type: string

  RuntimeClassSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters
      that are required to describe the RuntimeClass to the Container Runtime
      Interface (CRI) implementation, as well as any other components that need to
      understand how the pod will be run. The RuntimeClassSpec is immutable.
    properties:
      overhead:
        description: >-
          Overhead represents the resource overhead associated with running a pod for a
          given RuntimeClass. For more details, see
          https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This
          field is beta-level as of Kubernetes v1.18, and is only honored by servers that
          enable the PodOverhead feature.
        type: Overhead
        required: false
      runtimeHandler:
        description: >-
          RuntimeHandler specifies the underlying runtime and configuration that the CRI
          implementation will use to handle pods of this class. The possible values are
          specific to the node & CRI configuration. It is assumed that all handlers are
          available on every node, and handlers of the same name are equivalent on every
          node. For example, a handler called "runc" might specify that the runc OCI
          runtime (using native Linux containers) will be used to run the containers in a
          pod. The RuntimeHandler must be lowercase, conform to the DNS Label (RFC 1123)
          requirements, and is immutable.
        type: string
      scheduling:
        description: >-
          Scheduling holds the scheduling constraints to ensure that pods running with
          this RuntimeClass are scheduled to nodes that support it. If scheduling is nil,
          this RuntimeClass is assumed to be supported by all nodes.
        type: Scheduling
        required: false

  RuntimeClassStrategyOptions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      RuntimeClassStrategyOptions define the strategy that will dictate the allowable
      RuntimeClasses for a pod.
    properties:
      allowedRuntimeClassNames:
        description: >-
          allowedRuntimeClassNames is an allowlist of RuntimeClass names that may be
          specified on a pod. A value of "*" means that any RuntimeClass name is allowed,
          and must be the only item in the list. An empty list requires the
          RuntimeClassName field to be unset.
        type: list
        entry_schema: string
      defaultRuntimeClassName:
        description: >-
          defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The
          default MUST be allowed by the allowedRuntimeClassNames list. A value of nil
          does not mutate the Pod.
        type: string
        required: false

  SELinuxOptions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SELinuxOptions are the labels to be applied to the container
    properties:
      level:
        description: >-
          Level is SELinux level label that applies to the container.
        type: string
        required: false
      role:
        description: >-
          Role is a SELinux role label that applies to the container.
        type: string
        required: false
      type:
        description: >-
          Type is a SELinux type label that applies to the container.
        type: string
        required: false
      user:
        description: >-
          User is a SELinux user label that applies to the container.
        type: string
        required: false

  SELinuxStrategyOptions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SELinuxStrategyOptions defines the strategy type and any options used to create
      the strategy.
    properties:
      rule:
        description: >-
          rule is the strategy that will dictate the allowable labels that may be set.
        type: string
      seLinuxOptions:
        description: >-
          seLinuxOptions required to run as; required for MustRunAs More info:
          https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        type: SELinuxOptions
        required: false

  ScaleIOPersistentVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
        type: string
        required: false
      gateway:
        description: >-
          The host address of the ScaleIO API Gateway.
        type: string
      protectionDomain:
        description: >-
          The name of the ScaleIO Protection Domain for the configured storage.
        type: string
        required: false
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
          VolumeMounts.
        type: boolean
        required: false
      secretRef:
        description: >-
          SecretRef references to the secret for ScaleIO user and other sensitive
          information. If this is not provided, Login operation will fail.
        type: SecretReference
      sslEnabled:
        description: >-
          Flag to enable/disable SSL communication with Gateway, default false
        type: boolean
        required: false
      storageMode:
        description: >-
          Indicates whether the storage for a volume should be ThickProvisioned or
          ThinProvisioned. Default is ThinProvisioned.
        type: string
        required: false
      storagePool:
        description: >-
          The ScaleIO Storage Pool associated with the protection domain.
        type: string
        required: false
      system:
        description: >-
          The name of the storage system as configured in ScaleIO.
        type: string
      volumeName:
        description: >-
          The name of a volume already created in the ScaleIO system that is associated
          with this volume source.
        type: string
        required: false

  ScaleIOVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ScaleIOVolumeSource represents a persistent ScaleIO volume
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        type: string
        required: false
      gateway:
        description: >-
          The host address of the ScaleIO API Gateway.
        type: string
      protectionDomain:
        description: >-
          The name of the ScaleIO Protection Domain for the configured storage.
        type: string
        required: false
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
          VolumeMounts.
        type: boolean
        required: false
      secretRef:
        description: >-
          SecretRef references to the secret for ScaleIO user and other sensitive
          information. If this is not provided, Login operation will fail.
        type: LocalObjectReference
      sslEnabled:
        description: >-
          Flag to enable/disable SSL communication with Gateway, default false
        type: boolean
        required: false
      storageMode:
        description: >-
          Indicates whether the storage for a volume should be ThickProvisioned or
          ThinProvisioned. Default is ThinProvisioned.
        type: string
        required: false
      storagePool:
        description: >-
          The ScaleIO Storage Pool associated with the protection domain.
        type: string
        required: false
      system:
        description: >-
          The name of the storage system as configured in ScaleIO.
        type: string
      volumeName:
        description: >-
          The name of a volume already created in the ScaleIO system that is associated
          with this volume source.
        type: string
        required: false

  ScaleSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ScaleSpec describes the attributes of a scale subresource.
    properties:
      replicas:
        description: >-
          desired number of instances for the scaled object.
        type: integer
        required: false

  ScaleStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ScaleStatus represents the current status of a scale subresource.
    properties:
      replicas:
        description: >-
          actual number of observed instances of the scaled object.
        type: integer
      selector:
        description: >-
          label query over pods that should match the replicas count. This is same as the
          label selector but in the string format to avoid introspection by clients. The
          string will be in the same format as the query-param syntax. More info about
          label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
        type: string
        required: false

  Scheduling:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Scheduling specifies the scheduling constraints for nodes supporting a
      RuntimeClass.
    properties:
      nodeSelector:
        description: >-
          nodeSelector lists labels that must be present on nodes that support this
          RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node
          matched by this selector. The RuntimeClass nodeSelector is merged with a pod's
          existing nodeSelector. Any conflicts will cause the pod to be rejected in
          admission.
        type: map
        entry_schema: string
        required: false
      tolerations:
        description: >-
          tolerations are appended (excluding duplicates) to pods running with this
          RuntimeClass during admission, effectively unioning the set of nodes tolerated
          by the pod and the RuntimeClass.
        type: list
        entry_schema: Toleration
        required: false

  ScopeSelector:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A scope selector represents the AND of the selectors represented by the
      scoped-resource selector requirements.
    properties:
      matchExpressions:
        description: >-
          A list of scope selector requirements by scope of the resources.
        type: list
        entry_schema: ScopedResourceSelectorRequirement
        required: false

  ScopedResourceSelectorRequirement:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A scoped-resource selector requirement is a selector that contains values, a
      scope name, and an operator that relates the scope name and values.
    properties:
      operator:
        description: >-
          Represents a scope's relationship to a set of values. Valid operators are In,
          NotIn, Exists, DoesNotExist.
        type: string
        constraints:
          - valid_values: [ In, NotIn, Exists, DoesNotExist ]
      scopeName:
        description: >-
          The name of the scope that the selector applies to.
        type: string
      values:
        description: >-
          An array of string values. If the operator is In or NotIn, the values array must
          be non-empty. If the operator is Exists or DoesNotExist, the values array must
          be empty. This array is replaced during a strategic merge patch.
        type: list
        entry_schema: string
        required: false

  SeccompProfile:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SeccompProfile defines a pod/container's seccomp profile settings. Only one
      profile source may be set.
    properties:
      localhostProfile:
        description: >-
          localhostProfile indicates a profile defined in a file on the node should be
          used. The profile must be preconfigured on the node to work. Must be a
          descending path, relative to the kubelet's configured seccomp profile location.
          Must only be set if type is "Localhost".
        type: string
        required: false
      type:
        description: >-
          type indicates which kind of seccomp profile will be applied. Valid options are:

          Localhost - a profile defined in a file on the node should be used.
          RuntimeDefault - the container runtime default profile should be used.
          Unconfined - no profile should be applied.
        type: string

  SecretEnvSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SecretEnvSource selects a Secret to populate the environment variables with.

      The contents of the target Secret's Data field will represent the key-value
      pairs as environment variables.
    properties:
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        required: false
      optional:
        description: >-
          Specify whether the Secret must be defined
        type: boolean
        required: false

  SecretKeySelector:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SecretKeySelector selects a key of a Secret.
    properties:
      key:
        description: >-
          The key of the secret to select from. Must be a valid secret key.
        type: string
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        required: false
      optional:
        description: >-
          Specify whether the Secret or its key must be defined
        type: boolean
        required: false

  SecretProjection:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Adapts a secret into a projected volume.

      The contents of the target Secret's Data field will be presented in a projected
      volume as files using the keys in the Data field as the file names. Note that
      this is identical to a secret volume source without the default mode.
    properties:
      items:
        description: >-
          If unspecified, each key-value pair in the Data field of the referenced Secret
          will be projected into the volume as a file whose name is the key and content is
          the value. If specified, the listed keys will be projected into the specified
          paths, and unlisted keys will not be present. If a key is specified which is not
          present in the Secret, the volume setup will error unless it is marked optional.
          Paths must be relative and may not contain the '..' path or start with '..'.
        type: list
        entry_schema: KeyToPath
        required: false
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        required: false
      optional:
        description: >-
          Specify whether the Secret or its key must be defined
        type: boolean
        required: false

  SecretReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SecretReference represents a Secret Reference. It has enough information to
      retrieve secret in any namespace
    properties:
      name:
        description: >-
          Name is unique within a namespace to reference a secret resource.
        type: string
        required: false
      namespace:
        description: >-
          Namespace defines the space within which the secret name must be unique.
        type: string
        required: false

  SecretVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Adapts a Secret into a volume.

      The contents of the target Secret's Data field will be presented in a volume as
      files using the keys in the Data field as the file names. Secret volumes support
      ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: >-
          Optional: mode bits used to set permissions on created files by default. Must be
          an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML
          accepts both octal and decimal values, JSON requires decimal values for mode
          bits. Defaults to 0644. Directories within the path are not affected by this
          setting. This might be in conflict with other options that affect the file mode,
          like fsGroup, and the result can be other mode bits set.
        type: FileMode
        required: false
      items:
        description: >-
          If unspecified, each key-value pair in the Data field of the referenced Secret
          will be projected into the volume as a file whose name is the key and content is
          the value. If specified, the listed keys will be projected into the specified
          paths, and unlisted keys will not be present. If a key is specified which is not
          present in the Secret, the volume setup will error unless it is marked optional.
          Paths must be relative and may not contain the '..' path or start with '..'.
        type: list
        entry_schema: KeyToPath
        required: false
      optional:
        description: >-
          Specify whether the Secret or its keys must be defined
        type: boolean
        required: false
      secretName:
        description: >-
          Name of the secret in the pod's namespace to use. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#secret
        type: string
        required: false

  SecurityContext:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SecurityContext holds security configuration that will be applied to a
      container. Some fields are present in both SecurityContext and
      PodSecurityContext. When both are set, the values in SecurityContext take
      precedence.
    properties:
      allowPrivilegeEscalation:
        description: >-
          AllowPrivilegeEscalation controls whether a process can gain more privileges
          than its parent process. This bool directly controls if the no_new_privs flag
          will be set on the container process. AllowPrivilegeEscalation is true always
          when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        type: boolean
        required: false
      capabilities:
        description: >-
          The capabilities to add/drop when running containers. Defaults to the default
          set of capabilities granted by the container runtime.
        type: Capabilities
        required: false
      privileged:
        description: >-
          Run container in privileged mode. Processes in privileged containers are
          essentially equivalent to root on the host. Defaults to false.
        type: boolean
        required: false
      procMount:
        description: >-
          procMount denotes the type of proc mount to use for the containers. The default
          is DefaultProcMount which uses the container runtime defaults for readonly paths
          and masked paths. This requires the ProcMountType feature flag to be enabled.
        type: string
        required: false
      readOnlyRootFilesystem:
        description: >-
          Whether this container has a read-only root filesystem. Default is false.
        type: boolean
        required: false
      runAsGroup:
        description: >-
          The GID to run the entrypoint of the container process. Uses runtime default if
          unset. May also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
        type: integer
        required: false
      runAsNonRoot:
        description: >-
          Indicates that the container must run as a non-root user. If true, the Kubelet
          will validate the image at runtime to ensure that it does not run as UID 0
          (root) and fail to start the container if it does. If unset or false, no such
          validation will be performed. May also be set in PodSecurityContext. If set in
          both SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence.
        type: boolean
        required: false
      runAsUser:
        description: >-
          The UID to run the entrypoint of the container process. Defaults to user
          specified in image metadata if unspecified. May also be set in
          PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the
          value specified in SecurityContext takes precedence.
        type: integer
        required: false
      seLinuxOptions:
        description: >-
          The SELinux context to be applied to the container. If unspecified, the
          container runtime will allocate a random SELinux context for each container. May
          also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
        type: SELinuxOptions
        required: false
      seccompProfile:
        description: >-
          The seccomp options to use by this container. If seccomp options are provided at
          both the pod & container level, the container options override the pod options.
        type: SeccompProfile
        required: false
      windowsOptions:
        description: >-
          The Windows specific settings applied to all containers. If unspecified, the
          options from the PodSecurityContext will be used. If set in both SecurityContext
          and PodSecurityContext, the value specified in SecurityContext takes precedence.
        type: WindowsSecurityContextOptions
        required: false

  SelfSubjectAccessReviewSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SelfSubjectAccessReviewSpec is a description of the access request. Exactly one
      of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must
      be set
    properties:
      nonResourceAttributes:
        description: >-
          NonResourceAttributes describes information for a non-resource access request
        type: NonResourceAttributes
        required: false
      resourceAttributes:
        description: >-
          ResourceAuthorizationAttributes describes information for a resource access
          request
        type: ResourceAttributes
        required: false

  SelfSubjectRulesReviewSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.
    properties:
      namespace:
        description: >-
          Namespace to evaluate rules for. Required.
        type: string
        required: false

  ServerAddressByClientCIDR:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ServerAddressByClientCIDR helps the client to determine the server address that
      they should use, depending on the clientCIDR that they match.
    properties:
      clientCIDR:
        description: >-
          The CIDR with which clients can match their IP to figure out the server address
          that they should use.
        type: string
      serverAddress:
        description: >-
          Address of this server, suitable for a client that matches the above CIDR. This
          can be a hostname, hostname:port, IP or IP:port.
        type: string

  ServerStorageVersion:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      An API server instance reports the version it can decode and the version it
      encodes objects to when persisting objects in the backend.
    properties:
      apiServerID:
        description: >-
          The ID of the reporting API server.
        type: string
        required: false
      decodableVersions:
        description: >-
          The API server can decode objects encoded in these versions. The encodingVersion
          must be included in the decodableVersions.
        type: list
        entry_schema: string
        required: false
      encodingVersion:
        description: >-
          The API server encodes the object to this version when persisting it in the
          backend (e.g., etcd).
        type: string
        required: false

  ServiceAccountSubject:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ServiceAccountSubject holds detailed information for service-account-kind
      subject.
    properties:
      name:
        description: >-
          `name` is the name of matching ServiceAccount objects, or "*" to match
          regardless of name. Required.
        type: string
      namespace:
        description: >-
          `namespace` is the namespace of matching ServiceAccount objects. Required.
        type: string

  ServiceAccountTokenProjection:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ServiceAccountTokenProjection represents a projected service account token
      volume. This projection can be used to insert a service account token into the
      pods runtime filesystem for use against APIs (Kubernetes API Server or
      otherwise).
    properties:
      audience:
        description: >-
          Audience is the intended audience of the token. A recipient of a token must
          identify itself with an identifier specified in the audience of the token, and
          otherwise should reject the token. The audience defaults to the identifier of
          the apiserver.
        type: string
        required: false
      expirationSeconds:
        description: >-
          ExpirationSeconds is the requested duration of validity of the service account
          token. As the token approaches expiration, the kubelet volume plugin will
          proactively rotate the service account token. The kubelet will start trying to
          rotate the token if the token is older than 80 percent of its time to live or if
          the token is older than 24 hours.Defaults to 1 hour and must be at least 10
          minutes.
        type: integer
        required: false
      path:
        description: >-
          Path is the path relative to the mount point of the file to project the token
          into.
        type: string

  ServiceBackendPort:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ServiceBackendPort is the service port being referenced.
    properties:
      name:
        description: >-
          Name is the name of the port on the Service. This is a mutually exclusive
          setting with "Number".
        type: string
        required: false
      number:
        description: >-
          Number is the numerical port number (e.g. 80) on the Service. This is a mutually
          exclusive setting with "Name".
        type: integer
        required: false

  ServicePort:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ServicePort contains information on service's port.
    properties:
      appProtocol:
        description: >-
          The application protocol for this port. This field follows standard Kubernetes
          label syntax. Un-prefixed names are reserved for IANA standard service names (as
          per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard
          protocols should use prefixed names such as mycompany.com/my-custom-protocol.
        type: string
        required: false
      name:
        description: >-
          The name of this port within the service. This must be a DNS_LABEL. All ports
          within a ServiceSpec must have unique names. When considering the endpoints for
          a Service, this must match the 'name' field in the EndpointPort. Optional if
          only one ServicePort is defined on this service.
        type: string
        required: false
      nodePort:
        description: >-
          The port on each node on which this service is exposed when type is NodePort or
          LoadBalancer. Usually assigned by the system. If a value is specified, in-range,
          and not in use it will be used, otherwise the operation will fail. If not
          specified, a port will be allocated if this Service requires one. If this field
          is specified when creating a Service which does not need it, creation will fail.
          This field will be wiped when updating a Service to no longer need it (e.g.
          changing type from NodePort to ClusterIP). More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
        type: integer
        required: false
      port:
        description: >-
          The port that will be exposed by this service.
        type: integer
      protocol:
        description: >-
          The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is
          TCP.
        type: string
        required: false
      targetPort:
        description: >-
          Number or name of the port to access on the pods targeted by the service. Number
          must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a
          string, it will be looked up as a named port in the target Pod's container
          ports. If this is not specified, the value of the 'port' field is used (an
          identity map). This field is ignored for services with clusterIP=None, and
          should be omitted or set equal to the 'port' field. More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
        type: PortOrServiceName
        required: false

  ServiceSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ServiceSpec describes the attributes that a user creates on a service.
    properties:
      clusterIP:
        description: >-
          clusterIP is the IP address of the service and is usually assigned randomly. If
          an address is specified manually, is in-range (as per system configuration), and
          is not in use, it will be allocated to the service; otherwise creation of the
          service will fail. This field may not be changed through updates unless the type
          field is also being changed to ExternalName (which requires this field to be
          blank) or the type field is being changed from ExternalName (in which case this
          field may optionally be specified, as describe above). Valid values are "None",
          empty string (""), or a valid IP address. Setting this to "None" makes a
          "headless service" (no virtual IP), which is useful when direct endpoint
          connections are preferred and proxying is not required. Only applies to types
          ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating
          a Service of type ExternalName, creation will fail. This field will be wiped
          when updating a Service to type ExternalName. More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        type: IPAddress
        required: false
      clusterIPs:
        description: >-
          ClusterIPs is a list of IP addresses assigned to this service, and are usually
          assigned randomly. If an address is specified manually, is in-range (as per
          system configuration), and is not in use, it will be allocated to the service;
          otherwise creation of the service will fail. This field may not be changed
          through updates unless the type field is also being changed to ExternalName
          (which requires this field to be empty) or the type field is being changed from
          ExternalName (in which case this field may optionally be specified, as describe
          above). Valid values are "None", empty string (""), or a valid IP address.
          Setting this to "None" makes a "headless service" (no virtual IP), which is
          useful when direct endpoint connections are preferred and proxying is not
          required. Only applies to types ClusterIP, NodePort, and LoadBalancer. If this
          field is specified when creating a Service of type ExternalName, creation will
          fail. This field will be wiped when updating a Service to type ExternalName. If
          this field is not specified, it will be initialized from the clusterIP field. If
          this field is specified, clients must ensure that clusterIPs[0] and clusterIP
          have the same value.

          Unless the "IPv6DualStack" feature gate is enabled, this field is limited to one
          value, which must be the same as the clusterIP field. If the feature gate is
          enabled, this field may hold a maximum of two entries (dual-stack IPs, in either
          order). These IPs must correspond to the values of the ipFamilies field. Both
          clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        type: list
        entry_schema: IPAddress
        required: false
      externalIPs:
        description: >-
          externalIPs is a list of IP addresses for which nodes in the cluster will also
          accept traffic for this service. These IPs are not managed by Kubernetes. The
          user is responsible for ensuring that traffic arrives at a node with this IP. A
          common example is external load-balancers that are not part of the Kubernetes
          system.
        type: list
        entry_schema: IPAddress
        required: false
      externalTrafficPolicy:
        description: >-
          externalTrafficPolicy denotes if this Service desires to route external traffic
          to node-local or cluster-wide endpoints. "Local" preserves the client source IP
          and avoids a second hop for LoadBalancer and Nodeport type services, but risks
          potentially imbalanced traffic spreading. "Cluster" obscures the client source
          IP and may cause a second hop to another node, but should have good overall
          load-spreading.
        type: string
        required: false
        constraints:
          - valid_values: [ Local, Cluster ]
      healthCheckNodePort:
        description: >-
          healthCheckNodePort specifies the healthcheck nodePort for the service. This
          only applies when type is set to LoadBalancer and externalTrafficPolicy is set
          to Local. If a value is specified, is in-range, and is not in use, it will be
          used. If not specified, a value will be automatically allocated. External
          systems (e.g. load-balancers) can use this port to determine if a given node
          holds endpoints for this service or not. If this field is specified when
          creating a Service which does not need it, creation will fail. This field will
          be wiped when updating a Service to no longer need it (e.g. changing type).
        type: Port
        required: false
      internalTrafficPolicy:
        description: >-
          InternalTrafficPolicy specifies if the cluster internal traffic should be routed
          to all endpoints or node-local endpoints only. "Cluster" routes internal traffic
          to a Service to all endpoints. "Local" routes traffic to node-local endpoints
          only, traffic is dropped if no node-local endpoints are ready. The default value
          is "Cluster".
        type: string
        required: false
        constraints:
          - valid_values: [ Local, Cluster ]
      ipFamilies:
        description: >-
          IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service,
          and is gated by the "IPv6DualStack" feature gate. This field is usually assigned
          automatically based on cluster configuration and the ipFamilyPolicy field. If
          this field is specified manually, the requested family is available in the
          cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of
          the service will fail. This field is conditionally mutable: it allows for adding
          or removing a secondary IP family, but it does not allow changing the primary IP
          family of the Service. Valid values are "IPv4" and "IPv6". This field only
          applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does
          apply to "headless" services. This field will be wiped when updating a Service
          to type ExternalName.

          This field may hold a maximum of two entries (dual-stack families, in either
          order). These families must correspond to the values of the clusterIPs field, if
          specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy
          field.
        type: list
        entry_schema: string
        required: false
        constraints:
          - valid_values: [ IPv4, IPv6 ]
      ipFamilyPolicy:
        description: >-
          IPFamilyPolicy represents the dual-stack-ness requested or required by this
          Service, and is gated by the "IPv6DualStack" feature gate. If there is no value
          provided, then this field will be set to SingleStack. Services can be
          "SingleStack" (a single IP family), "PreferDualStack" (two IP families on
          dual-stack configured clusters or a single IP family on single-stack clusters),
          or "RequireDualStack" (two IP families on dual-stack configured clusters,
          otherwise fail). The ipFamilies and clusterIPs fields depend on the value of
          this field. This field will be wiped when updating a service to type
          ExternalName.
        type: string
        required: false
        constraints:
          - valid_values: [ SingleStack, PreferDualStack, RequireDualStack ]
      ports:
        description: >-
          The list of ports that are exposed by this service. More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        type: list
        entry_schema: ServicePort
        required: false
      publishNotReadyAddresses:
        description: >-
          publishNotReadyAddresses indicates that any agent which deals with endpoints for
          this Service should disregard any indications of ready/not-ready. The primary
          use case for setting this field is for a StatefulSet's Headless Service to
          propagate SRV DNS records for its Pods for the purpose of peer discovery. The
          Kubernetes controllers that generate Endpoints and EndpointSlice resources for
          Services interpret this to mean that all endpoints are considered "ready" even
          if the Pods themselves are not. Agents which consume only Kubernetes generated
          endpoints through the Endpoints or EndpointSlice resources can safely assume
          this behavior.
        type: boolean
        required: false
      selector:
        description: >-
          Route service traffic to pods with label keys and values matching this selector.
          If empty or not present, the service is assumed to have an external process
          managing its endpoints, which Kubernetes will not modify. Only applies to types
          ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More
          info: https://kubernetes.io/docs/concepts/services-networking/service/
        type: map
        entry_schema: string
        required: false
      sessionAffinity:
        description: >-
          Supports "ClientIP" and "None". Used to maintain session affinity. Enable client
          IP based session affinity. Must be ClientIP or None. Defaults to None. More
          info:
          https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        type: string
        required: false
        constraints:
          - valid_values: [ ClientIP, None ]
      sessionAffinityConfig:
        description: >-
          sessionAffinityConfig contains the configurations of session affinity.
        type: SessionAffinityConfig
        required: false
      type:
        description: >-
          type determines how the Service is exposed. Defaults to ClusterIP. Valid options
          are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a
          cluster-internal IP address for load-balancing to endpoints. Endpoints are
          determined by the selector or if that is not specified, by manual construction
          of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no
          virtual IP is allocated and the endpoints are published as a set of endpoints
          rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on
          every node which routes to the same endpoints as the clusterIP. "LoadBalancer"
          builds on NodePort and creates an external load-balancer (if supported in the
          current cloud) which routes to the same endpoints as the clusterIP.
          "ExternalName" aliases this service to the specified externalName. Several other
          fields do not apply to ExternalName services. More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
        type: string
        required: false
        constraints:
          - valid_values: [ ExternalName, ClusterIP, NodePort, LoadBalancer ]

  ServiceStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ServiceStatus represents the current status of a service.
    properties:
      conditions:
        description: >-
          Current service state
        type: list
        entry_schema: Condition
        required: false
      loadBalancer:
        description: >-
          LoadBalancer contains the current status of the load-balancer, if one is
          present.
        type: LoadBalancerStatus
        required: false

  SessionAffinityConfig:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SessionAffinityConfig represents the configurations of session affinity.
    properties:
      clientIP:
        description: >-
          clientIP contains the configurations of Client IP based session affinity.
        type: ClientIPConfig
        required: false

  StatefulSetCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      StatefulSetCondition describes the state of a statefulset at a certain point.
    properties:
      lastTransitionTime:
        description: >-
          Last time the condition transitioned from one status to another.
        type: timestamp
        required: false
      message:
        description: >-
          A human readable message indicating details about the transition.
        type: string
        required: false
      reason:
        description: >-
          The reason for the condition's last transition.
        type: string
        required: false
      status:
        description: >-
          Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: >-
          Type of statefulset condition.
        type: string

  StatefulSetSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A StatefulSetSpec is the specification of a StatefulSet.
    derived_from: PodTemplateOwner
    properties:
      minReadySeconds:
        description: >-
          Minimum number of seconds for which a newly created pod should be ready without
          any of its container crashing for it to be considered available. Defaults to 0
          (pod will be considered available as soon as it is ready) This is an alpha field
          and requires enabling StatefulSetMinReadySeconds feature gate.
        type: integer
        required: false
      podManagementPolicy:
        description: >-
          podManagementPolicy controls how pods are created during initial scale up, when
          replacing pods on nodes, or when scaling down. The default policy is
          `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1,
          etc) and the controller will wait until each pod is ready before continuing.
          When scaling down, the pods are removed in the opposite order. The alternative
          policy is `Parallel` which will create pods in parallel to match the desired
          scale without waiting, and on scale down will delete all pods at once.
        type: string
        required: false
      replicas:
        description: >-
          replicas is the desired number of replicas of the given Template. These are
          replicas in the sense that they are instantiations of the same Template, but
          individual replicas also have a consistent identity. If unspecified, defaults to
          1.
        type: integer
        required: false
      revisionHistoryLimit:
        description: >-
          revisionHistoryLimit is the maximum number of revisions that will be maintained
          in the StatefulSet's revision history. The revision history consists of all
          revisions not represented by a currently applied StatefulSetSpec version. The
          default value is 10.
        type: integer
        required: false
      selector:
        description: >-
          selector is a label query over pods that should match the replica count. It must
          match the pod template's labels. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        type: LabelSelector
      serviceName:
        description: >-
          serviceName is the name of the service that governs this StatefulSet. This
          service must exist before the StatefulSet, and is responsible for the network
          identity of the set. Pods get DNS/hostnames that follow the pattern:
          pod-specific-string.serviceName.default.svc.cluster.local where
          "pod-specific-string" is managed by the StatefulSet controller.
        type: string
      template:
        description: >-
          template is the object that describes the pod that will be created if
          insufficient replicas are detected. Each pod stamped out by the StatefulSet will
          fulfill this Template, but have a unique identity from the rest of the
          StatefulSet.
        type: PodTemplateSpec
      updateStrategy:
        description: >-
          updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to
          update Pods in the StatefulSet when a revision is made to Template.
        type: StatefulSetUpdateStrategy
        required: false
      volumeClaimTemplates:
        description: >-
          volumeClaimTemplates is a list of claims that pods are allowed to reference. The
          StatefulSet controller is responsible for mapping network identities to claims
          in a way that maintains the identity of a pod. Every claim in this list must
          have at least one matching (by name) volumeMount in one container in the
          template. A claim in this list takes precedence over any volumes in the
          template, with the same name.
        type: list
        entry_schema: PersistentVolumeClaim
        required: false

  StatefulSetStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      StatefulSetStatus represents the current state of a StatefulSet.
    properties:
      availableReplicas:
        description: >-
          Total number of available pods (ready for at least minReadySeconds) targeted by
          this statefulset. This is an alpha field and requires enabling
          StatefulSetMinReadySeconds feature gate. Remove omitempty when graduating to
          beta
        type: integer
        required: false
      collisionCount:
        description: >-
          collisionCount is the count of hash collisions for the StatefulSet. The
          StatefulSet controller uses this field as a collision avoidance mechanism when
          it needs to create the name for the newest ControllerRevision.
        type: integer
        required: false
      conditions:
        description: >-
          Represents the latest available observations of a statefulset's current state.
        type: list
        entry_schema: StatefulSetCondition
        required: false
      currentReplicas:
        description: >-
          currentReplicas is the number of Pods created by the StatefulSet controller from
          the StatefulSet version indicated by currentRevision.
        type: integer
        required: false
      currentRevision:
        description: >-
          currentRevision, if not empty, indicates the version of the StatefulSet used to
          generate Pods in the sequence [0,currentReplicas).
        type: string
        required: false
      observedGeneration:
        description: >-
          observedGeneration is the most recent generation observed for this StatefulSet.
          It corresponds to the StatefulSet's generation, which is updated on mutation by
          the API Server.
        type: integer
        required: false
      readyReplicas:
        description: >-
          readyReplicas is the number of Pods created by the StatefulSet controller that
          have a Ready Condition.
        type: integer
        required: false
      replicas:
        description: >-
          replicas is the number of Pods created by the StatefulSet controller.
        type: integer
      updateRevision:
        description: >-
          updateRevision, if not empty, indicates the version of the StatefulSet used to
          generate Pods in the sequence [replicas-updatedReplicas,replicas)
        type: string
        required: false
      updatedReplicas:
        description: >-
          updatedReplicas is the number of Pods created by the StatefulSet controller from
          the StatefulSet version indicated by updateRevision.
        type: integer
        required: false

  StatefulSetUpdateStrategy:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller
      will use to perform updates. It includes any additional parameters necessary to
      perform the update for the indicated strategy.
    properties:
      rollingUpdate:
        description: >-
          RollingUpdate is used to communicate parameters when Type is
          RollingUpdateStatefulSetStrategyType.
        type: RollingUpdateStatefulSetStrategy
        required: false
      type:
        description: >-
          Type indicates the type of the StatefulSetUpdateStrategy. Default is
          RollingUpdate.
        type: string
        required: false

  StatusCause:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      StatusCause provides more information about an api.Status failure, including
      cases when multiple errors are encountered.
    properties:
      field:
        description: >-
          The field of the resource that has caused this error, as named by its JSON
          serialization. May include dot and postfix notation for nested attributes.
          Arrays are zero-indexed. Fields may appear more than once in an array of causes
          due to fields having multiple errors. Optional.

          Examples:
           "name" - the field "name" on the current resource
           "items[0].name" - the field "name" on the first array entry in "items"
        type: string
        required: false
      message:
        description: >-
          A human-readable description of the cause of the error. This field may be
          presented as-is to a reader.
        type: string
        required: false
      reason:
        description: >-
          A machine-readable description of the cause of the error. If this value is empty
          there is no information available.
        type: string
        required: false

  StatusDetails:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      StatusDetails is a set of additional properties that MAY be set by the server to
      provide additional information about a response. The Reason field of a Status
      object defines what attributes will be set. Clients must ignore fields that do
      not match the defined type of each attribute, and should assume that any
      attribute may be empty, invalid, or under defined.
    properties:
      causes:
        description: >-
          The Causes array includes more details associated with the StatusReason failure.
          Not all StatusReasons may provide detailed causes.
        type: list
        entry_schema: StatusCause
        required: false
      group:
        description: >-
          The group attribute of the resource associated with the status StatusReason.
        type: string
        required: false
      kind:
        description: >-
          The kind attribute of the resource associated with the status StatusReason. On
          some operations may differ from the requested resource Kind. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
        required: false
      name:
        description: >-
          The name attribute of the resource associated with the status StatusReason (when
          there is a single name which can be described).
        type: string
        required: false
      retryAfterSeconds:
        description: >-
          If specified, the time in seconds before the operation should be retried. Some
          errors may indicate the client must take an alternate action - for those errors
          this field may indicate how long to wait before taking the alternate action.
        type: integer
        required: false
      uid:
        description: >-
          UID of the resource. (when there is a single resource which can be described).
          More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string
        required: false

  StorageOSPersistentVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a StorageOS persistent volume resource.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.
        type: string
        required: false
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
          VolumeMounts.
        type: boolean
        required: false
      secretRef:
        description: >-
          SecretRef specifies the secret to use for obtaining the StorageOS API
          credentials. If not specified, default values will be attempted.
        type: ObjectReference
        required: false
      volumeName:
        description: >-
          VolumeName is the human-readable name of the StorageOS volume. Volume names are
          only unique within a namespace.
        type: string
        required: false
      volumeNamespace:
        description: >-
          VolumeNamespace specifies the scope of the volume within StorageOS. If no
          namespace is specified then the Pod's namespace will be used. This allows the
          Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
          Set VolumeName to any name to override the default behaviour. Set to "default"
          if you are not using namespaces within StorageOS. Namespaces that do not
          pre-exist within StorageOS will be created.
        type: string
        required: false

  StorageOSVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a StorageOS persistent volume resource.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.
        type: string
        required: false
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
          VolumeMounts.
        type: boolean
        required: false
      secretRef:
        description: >-
          SecretRef specifies the secret to use for obtaining the StorageOS API
          credentials. If not specified, default values will be attempted.
        type: LocalObjectReference
        required: false
      volumeName:
        description: >-
          VolumeName is the human-readable name of the StorageOS volume. Volume names are
          only unique within a namespace.
        type: string
        required: false
      volumeNamespace:
        description: >-
          VolumeNamespace specifies the scope of the volume within StorageOS. If no
          namespace is specified then the Pod's namespace will be used. This allows the
          Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
          Set VolumeName to any name to override the default behaviour. Set to "default"
          if you are not using namespaces within StorageOS. Namespaces that do not
          pre-exist within StorageOS will be created.
        type: string
        required: false

  StorageVersionCondition:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Describes the state of the storageVersion at a certain point.
    properties:
      lastTransitionTime:
        description: >-
          Last time the condition transitioned from one status to another.
        type: timestamp
        required: false
      message:
        description: >-
          A human readable message indicating details about the transition.
        type: string
        required: false
      observedGeneration:
        description: >-
          If set, this represents the .metadata.generation that the condition was set
          based upon.
        type: integer
        required: false
      reason:
        description: >-
          The reason for the condition's last transition.
        type: string
      status:
        description: >-
          Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: >-
          Type of the condition.
        type: string

  StorageVersionSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      StorageVersionSpec is an empty spec.

  StorageVersionStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      API server instances report the versions they can decode and the version they
      encode objects to when persisting objects in the backend.
    properties:
      commonEncodingVersion:
        description: >-
          If all API server instances agree on the same encoding storage version, then
          this field is set to that version. Otherwise this field is left empty. API
          servers should finish updating its storageVersionStatus entry before serving
          write operations, so that this field will be in sync with the reality.
        type: string
        required: false
      conditions:
        description: >-
          The latest available observations of the storageVersion's state.
        type: list
        entry_schema: StorageVersionCondition
        required: false
      storageVersions:
        description: >-
          The reported versions per API server instance.
        type: list
        entry_schema: ServerStorageVersion
        required: false

  Subject:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Subject contains a reference to the object or user identities a role binding
      applies to. This can either hold a direct API object reference, or a value for
      non-objects such as user and group names.
    properties:
      apiGroup:
        description: >-
          APIGroup holds the API group of the referenced subject. Defaults to "" for
          ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and
          Group subjects.
        type: string
        required: false
      kind:
        description: >-
          Kind of object being referenced. Values defined by this API group are "User",
          "Group", and "ServiceAccount". If the Authorizer does not recognized the kind
          value, the Authorizer should report an error.
        type: string
      name:
        description: >-
          Name of the object being referenced.
        type: string
      namespace:
        description: >-
          Namespace of the referenced object. If the object kind is non-namespace, such as
          "User" or "Group", and this value is not empty the Authorizer should report an
          error.
        type: string
        required: false

  SubjectAccessReviewSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SubjectAccessReviewSpec is a description of the access request. Exactly one of
      ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be
      set
    properties:
      extra:
        description: >-
          Extra corresponds to the user.Info.GetExtra() method from the authenticator.
          Since that is input to the authorizer it needs a reflection here.
        type: map
        entry_schema: StringList
        required: false
      groups:
        description: >-
          Groups is the groups you're testing for.
        type: list
        entry_schema: string
        required: false
      nonResourceAttributes:
        description: >-
          NonResourceAttributes describes information for a non-resource access request
        type: NonResourceAttributes
        required: false
      resourceAttributes:
        description: >-
          ResourceAuthorizationAttributes describes information for a resource access
          request
        type: ResourceAttributes
        required: false
      uid:
        description: >-
          UID information about the requesting user.
        type: string
        required: false
      user:
        description: >-
          User is the user you're testing for. If you specify "User" but not "Groups",
          then is it interpreted as "What if User were not a member of any groups
        type: string
        required: false

  SubjectAccessReviewStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SubjectAccessReviewStatus
    properties:
      allowed:
        description: >-
          Allowed is required. True if the action would be allowed, false otherwise.
        type: boolean
      denied:
        description: >-
          Denied is optional. True if the action would be denied, otherwise false. If both
          allowed is false and denied is false, then the authorizer has no opinion on
          whether to authorize the action. Denied may not be true if Allowed is true.
        type: boolean
        required: false
      evaluationError:
        description: >-
          EvaluationError is an indication that some error occurred during the
          authorization check. It is entirely possible to get an error and be able to
          continue determine authorization status in spite of it. For instance, RBAC can
          be missing a role, but enough roles are still present and bound to reason about
          the request.
        type: string
        required: false
      reason:
        description: >-
          Reason is optional. It indicates why a request was allowed or denied.
        type: string
        required: false

  SubjectRulesReviewStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SubjectRulesReviewStatus contains the result of a rules check. This check can be
      incomplete depending on the set of authorizers the server is configured with and
      any errors experienced during evaluation. Because authorization rules are
      additive, if a rule appears in a list it's safe to assume the subject has that
      permission, even if that list is incomplete.
    properties:
      evaluationError:
        description: >-
          EvaluationError can appear in combination with Rules. It indicates an error
          occurred during rule evaluation, such as an authorizer that doesn't support rule
          evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
        type: string
        required: false
      incomplete:
        description: >-
          Incomplete is true when the rules returned by this call are incomplete. This is
          most commonly encountered when an authorizer, such as an external authorizer,
          doesn't support rules evaluation.
        type: boolean
      nonResourceRules:
        description: >-
          NonResourceRules is the list of actions the subject is allowed to perform on
          non-resources. The list ordering isn't significant, may contain duplicates, and
          possibly be incomplete.
        type: list
        entry_schema: NonResourceRule
      resourceRules:
        description: >-
          ResourceRules is the list of actions the subject is allowed to perform on
          resources. The list ordering isn't significant, may contain duplicates, and
          possibly be incomplete.
        type: list
        entry_schema: ResourceRule

  SupplementalGroupsStrategyOptions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      SupplementalGroupsStrategyOptions defines the strategy type and options used to
      create the strategy.
    properties:
      ranges:
        description: >-
          ranges are the allowed ranges of supplemental groups. If you would like to force
          a single supplemental group then supply a single range with the same start and
          end. Required for MustRunAs.
        type: list
        entry_schema: IDRange
        required: false
      rule:
        description: >-
          rule is the strategy that will dictate what supplemental groups is used in the
          SecurityContext.
        type: string
        required: false

  Sysctl:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Sysctl defines a kernel parameter to be set
    properties:
      name:
        description: >-
          Name of a property to set
        type: string
      value:
        description: >-
          Value of a property to set
        type: string

  TCPSocketAction:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      TCPSocketAction describes an action based on opening a socket
    properties:
      host:
        description: >-
          Optional: Host name to connect to, defaults to the pod IP.
        type: string
        required: false
      port:
        description: >-
          Number or name of the port to access on the container. Number must be in the
          range 1 to 65535. Name must be an IANA_SVC_NAME.
        type: IntOrString

  Taint:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      The node this Taint is attached to has the "effect" on any pod that does not
      tolerate the Taint.
    properties:
      effect:
        description: >-
          Required. The effect of the taint on pods that do not tolerate the taint. Valid
          effects are NoSchedule, PreferNoSchedule and NoExecute.
        type: string
      key:
        description: >-
          Required. The taint key to be applied to a node.
        type: string
      timeAdded:
        description: >-
          TimeAdded represents the time at which the taint was added. It is only written
          for NoExecute taints.
        type: timestamp
        required: false
      value:
        description: >-
          The taint value corresponding to the taint key.
        type: string
        required: false

  TokenRequest:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      TokenRequest contains parameters of a service account token.
    properties:
      audience:
        description: >-
          Audience is the intended audience of the token in "TokenRequestSpec". It will
          default to the audiences of kube apiserver.
        type: string
      expirationSeconds:
        description: >-
          ExpirationSeconds is the duration of validity of the token in
          "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in
          "TokenRequestSpec".
        type: integer
        required: false

  TokenRequestSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      TokenRequestSpec contains client provided parameters of a token request.
    properties:
      audiences:
        description: >-
          Audiences are the intendend audiences of the token. A recipient of a token must
          identitfy themself with an identifier in the list of audiences of the token, and
          otherwise should reject the token. A token issued for multiple audiences may be
          used to authenticate against any of the audiences listed but implies a high
          degree of trust between the target audiences.
        type: list
        entry_schema: string
      boundObjectRef:
        description: >-
          BoundObjectRef is a reference to an object that the token will be bound to. The
          token will only be valid for as long as the bound object exists. NOTE: The API
          server's TokenReview endpoint will validate the BoundObjectRef, but other
          audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
        type: BoundObjectReference
        required: false
      expirationSeconds:
        description: >-
          ExpirationSeconds is the requested duration of validity of the request. The
          token issuer may return a token with a different validity duration so a client
          needs to check the 'expiration' field in a response.
        type: integer
        required: false

  TokenRequestStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      TokenRequestStatus is the result of a token request.
    properties:
      expirationTimestamp:
        description: >-
          ExpirationTimestamp is the time of expiration of the returned token.
        type: timestamp
      token:
        description: >-
          Token is the opaque bearer token.
        type: string

  TokenReviewSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      TokenReviewSpec is a description of the token authentication request.
    properties:
      audiences:
        description: >-
          Audiences is a list of the identifiers that the resource server presented with
          the token identifies as. Audience-aware token authenticators will verify that
          the token was intended for at least one of the audiences in this list. If no
          audiences are provided, the audience will default to the audience of the
          Kubernetes apiserver.
        type: list
        entry_schema: string
        required: false
      token:
        description: >-
          Token is the opaque bearer token.
        type: string
        required: false

  TokenReviewStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      TokenReviewStatus is the result of the token authentication request.
    properties:
      audiences:
        description: >-
          Audiences are audience identifiers chosen by the authenticator that are
          compatible with both the TokenReview and token. An identifier is any identifier
          in the intersection of the TokenReviewSpec audiences and the token's audiences.
          A client of the TokenReview API that sets the spec.audiences field should
          validate that a compatible audience identifier is returned in the
          status.audiences field to ensure that the TokenReview server is audience aware.
          If a TokenReview returns an empty status.audience field where
          status.authenticated is "true", the token is valid against the audience of the
          Kubernetes API server.
        type: list
        entry_schema: string
        required: false
      authenticated:
        description: >-
          Authenticated indicates that the token was associated with a known user.
        type: boolean
        required: false
      error:
        description: >-
          Error indicates that the token couldn't be checked
        type: string
        required: false
      user:
        description: >-
          User is the UserInfo associated with the provided token.
        type: UserInfo
        required: false

  Toleration:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      The pod this Toleration is attached to tolerates any taint that matches the
      triple <key,value,effect> using the matching operator <operator>.
    properties:
      effect:
        description: >-
          Effect indicates the taint effect to match. Empty means match all taint effects.
          When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        type: string
        required: false
        constraints:
          - valid_values: [ NoSchedule, PreferNoSchedule, NoExecute ]
      key:
        description: >-
          Key is the taint key that the toleration applies to. Empty means match all taint
          keys. If the key is empty, operator must be Exists; this combination means to
          match all values and all keys.
        type: string
        required: false
      operator:
        description: >-
          Operator represents a key's relationship to the value. Valid operators are
          Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value,
          so that a pod can tolerate all taints of a particular category.
        type: string
        required: false
        constraints:
          - valid_values: [ Exists, Equal ]
      tolerationSeconds:
        description: >-
          TolerationSeconds represents the period of time the toleration (which must be of
          effect NoExecute, otherwise this field is ignored) tolerates the taint. By
          default, it is not set, which means tolerate the taint forever (do not evict).
          Zero and negative values will be treated as 0 (evict immediately) by the system.
        type: integer
        required: false
      value:
        description: >-
          Value is the taint value the toleration matches to. If the operator is Exists,
          the value should be empty, otherwise just a regular string.
        type: string
        required: false

  TopologySelectorLabelRequirement:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A topology selector requirement is a selector that matches given label. This is
      an alpha feature and may change in the future.
    properties:
      key:
        description: >-
          The label key that the selector applies to.
        type: string
      values:
        description: >-
          An array of string values. One value must match the label to be selected. Each
          entry in Values is ORed.
        type: list
        entry_schema: string

  TopologySelectorTerm:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      A topology selector term represents the result of label queries. A null or empty
      topology selector term matches no objects. The requirements of them are ANDed.
      It provides a subset of functionality as NodeSelectorTerm. This is an alpha
      feature and may change in the future.
    properties:
      matchLabelExpressions:
        description: >-
          A list of topology selector requirements by labels.
        type: list
        entry_schema: TopologySelectorLabelRequirement
        required: false

  TopologySpreadConstraint:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      TopologySpreadConstraint specifies how to spread matching pods among the given
      topology.
    properties:
      labelSelector:
        description: >-
          LabelSelector is used to find matching pods. Pods that match this label selector
          are counted to determine the number of pods in their corresponding topology
          domain.
        type: LabelSelector
        required: false
      maxSkew:
        description: >-
          MaxSkew describes the degree to which pods may be unevenly distributed. When
          `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
          between the number of matching pods in the target topology and the global
          minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with
          the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | | P | P | | -
          if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1;
          scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2)
          violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any
          zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher
          precedence to topologies that satisfy it. It's a required field. Default value
          is 1 and 0 is not allowed.
        type: integer
      topologyKey:
        description: >-
          TopologyKey is the key of node labels. Nodes that have a label with this key and
          identical values are considered to be in the same topology. We consider each
          <key, value> as a "bucket", and try to put balanced number of pods into each
          bucket. It's a required field.
        type: string
      whenUnsatisfiable:
        description: >-
          WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the
          spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule
          it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
           but giving higher precedence to topologies that would help reduce the
           skew.
          A constraint is considered "Unsatisfiable" for an incoming pod if and only if
          every possible node assigment for that pod would violate "MaxSkew" on some
          topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with
          the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P | P |
          P | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be
          scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on
          zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be
          imbalanced, but scheduler won't make it *more* imbalanced. It's a required
          field.
        type: string

  TypedLocalObjectReference:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      TypedLocalObjectReference contains enough information to let you locate the
      typed referenced object inside the same namespace.
    properties:
      apiGroup:
        description: >-
          APIGroup is the group for the resource being referenced. If APIGroup is not
          specified, the specified Kind must be in the core API group. For any other
          third-party types, APIGroup is required.
        type: string
        required: false
      kind:
        description: >-
          Kind is the type of resource being referenced
        type: string
      name:
        description: >-
          Name is the name of resource being referenced
        type: string

  UncountedTerminatedPods:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been
      accounted in Job status counters.
    properties:
      failed:
        description: >-
          Failed holds UIDs of failed Pods.
        type: list
        entry_schema: string
        required: false
      succeeded:
        description: >-
          Succeeded holds UIDs of succeeded Pods.
        type: list
        entry_schema: string
        required: false

  UserInfo:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      UserInfo holds the information about the user needed to implement the user.Info
      interface.
    properties:
      extra:
        description: >-
          Any additional information provided by the authenticator.
        type: map
        entry_schema: StringList
        required: false
      groups:
        description: >-
          The names of groups this user is a part of.
        type: list
        entry_schema: string
        required: false
      uid:
        description: >-
          A unique value that identifies this user across time. If this user is deleted
          and another user by the same name is added, they will have different UIDs.
        type: string
        required: false
      username:
        description: >-
          The name that uniquely identifies this user among all active users.
        type: string
        required: false

  UserSubject:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      UserSubject holds detailed information for user-kind subject.
    properties:
      name:
        description: >-
          `name` is the username that matches, or "*" to match all usernames. Required.
        type: string

  ValidatingWebhook:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      ValidatingWebhook describes an admission webhook and the resources and
      operations it applies to.
    properties:
      admissionReviewVersions:
        description: >-
          AdmissionReviewVersions is an ordered list of preferred `AdmissionReview`
          versions the Webhook expects. API server will try to use first version in the
          list which it supports. If none of the versions specified in this list supported
          by API server, validation will fail for this object. If a persisted webhook
          configuration specifies allowed versions and does not include any versions known
          to the API Server, calls to the webhook will fail and be subject to the failure
          policy.
        type: list
        entry_schema: string
      clientConfig:
        description: >-
          ClientConfig defines how to communicate with the hook. Required
        type: AdmissionRegistrationWebhookClientConfig
      failurePolicy:
        description: >-
          FailurePolicy defines how unrecognized errors from the admission endpoint are
          handled - allowed values are Ignore or Fail. Defaults to Fail.
        type: string
        required: false
        constraints:
          - valid_values: [ Ignore, Fail ]
      matchPolicy:
        description: >-
          matchPolicy defines how the "rules" list is used to match incoming requests.
          Allowed values are "Exact" or "Equivalent".

          - Exact: match a request only if it exactly matches a specified rule. For
          example, if deployments can be modified via apps/v1, apps/v1beta1, and
          extensions/v1beta1, but "rules" only included `apiGroups:["apps"],
          apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or
          extensions/v1beta1 would not be sent to the webhook.

          - Equivalent: match a request if modifies a resource listed in rules, even via
          another API group or version. For example, if deployments can be modified via
          apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included
          `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request
          to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to
          the webhook.

          Defaults to "Equivalent"
        type: string
        required: false
        constraints:
          - valid_values: [ Exact, Equivalent ]
      name:
        description: >-
          The name of the admission webhook. Name should be fully qualified, e.g.,
          imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and
          kubernetes.io is the name of the organization. Required.
        type: string
      namespaceSelector:
        description: >-
          NamespaceSelector decides whether to run the webhook on an object based on
          whether the namespace for that object matches the selector. If the object itself
          is a namespace, the matching is performed on object.metadata.labels. If the
          object is another cluster scoped resource, it never skips the webhook.

          For example, to run the webhook on any objects whose namespace is not associated
          with "runlevel" of "0" or "1"; you will set the selector as follows:
          "namespaceSelector": {
           "matchExpressions": [
           {
           "key": "runlevel",
           "operator": "NotIn",
           "values": [
           "0",
           "1"
           ]
           }
           ]
          }

          If instead you want to only run the webhook on any objects whose namespace is
          associated with the "environment" of "prod" or "staging"; you will set the
          selector as follows: "namespaceSelector": {
           "matchExpressions": [
           {
           "key": "environment",
           "operator": "In",
           "values": [
           "prod",
           "staging"
           ]
           }
           ]
          }

          See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for
          more examples of label selectors.

          Default to the empty LabelSelector, which matches everything.
        type: LabelSelector
        required: false
      objectSelector:
        description: >-
          ObjectSelector decides whether to run the webhook based on if the object has
          matching labels. objectSelector is evaluated against both the oldObject and
          newObject that would be sent to the webhook, and is considered to match if
          either object matches the selector. A null object (oldObject in the case of
          create, or newObject in the case of delete) or an object that cannot have labels
          (like a DeploymentRollback or a PodProxyOptions object) is not considered to
          match. Use the object selector only if the webhook is opt-in, because end users
          may skip the admission webhook by setting the labels. Default to the empty
          LabelSelector, which matches everything.
        type: LabelSelector
        required: false
      rules:
        description: >-
          Rules describes what operations on what resources/subresources the webhook cares
          about. The webhook cares about an operation if it matches _any_ Rule. However,
          in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks
          from putting the cluster in a state which cannot be recovered from without
          completely disabling the plugin, ValidatingAdmissionWebhooks and
          MutatingAdmissionWebhooks are never called on admission requests for
          ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
        type: list
        entry_schema: RuleWithOperations
        required: false
      sideEffects:
        description: >-
          SideEffects states whether this webhook has side effects. Acceptable values are:
          None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or
          Unknown). Webhooks with side effects MUST implement a reconciliation system,
          since a request may be rejected by a future step in the admission chain and the
          side effects therefore need to be undone. Requests with the dryRun attribute
          will be auto-rejected if they match a webhook with sideEffects == Unknown or
          Some.
        type: string
        constraints:
          - valid_values: [ None, NoneOnDryRun ]
      timeoutSeconds:
        description: >-
          TimeoutSeconds specifies the timeout for this webhook. After the timeout passes,
          the webhook call will be ignored or the API call will fail based on the failure
          policy. The timeout value must be between 1 and 30 seconds. Default to 10
          seconds.
        type: integer
        required: false
        constraints:
          - in_range: [ 1, 30 ]

  Volume:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Volume represents a named volume in a pod that may be accessed by any container
      in the pod.
    properties:
      awsElasticBlockStore:
        description: >-
          AWSElasticBlockStore represents an AWS Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        type: AWSElasticBlockStoreVolumeSource
        required: false
      azureDisk:
        description: >-
          AzureDisk represents an Azure Data Disk mount on the host and bind mount to the
          pod.
        type: AzureDiskVolumeSource
        required: false
      azureFile:
        description: >-
          AzureFile represents an Azure File Service mount on the host and bind mount to
          the pod.
        type: AzureFileVolumeSource
        required: false
      cephfs:
        description: >-
          CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        type: CephFSVolumeSource
        required: false
      cinder:
        description: >-
          Cinder represents a cinder volume attached and mounted on kubelets host machine.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        type: CinderVolumeSource
        required: false
      configMap:
        description: >-
          ConfigMap represents a configMap that should populate this volume
        type: ConfigMapVolumeSource
        required: false
      csi:
        description: >-
          CSI (Container Storage Interface) represents ephemeral storage that is handled
          by certain external CSI drivers (Beta feature).
        type: CSIVolumeSource
        required: false
      downwardAPI:
        description: >-
          DownwardAPI represents downward API about the pod that should populate this
          volume
        type: DownwardAPIVolumeSource
        required: false
      emptyDir:
        description: >-
          EmptyDir represents a temporary directory that shares a pod's lifetime. More
          info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        type: EmptyDirVolumeSource
        required: false
      ephemeral:
        description: >-
          Ephemeral represents a volume that is handled by a cluster storage driver. The
          volume's lifecycle is tied to the pod that defines it - it will be created
          before the pod starts, and deleted when the pod is removed.

          Use this if: a) the volume is only needed while the pod runs, b) features of
          normal volumes like restoring from snapshot or capacity
           tracking are needed,
          c) the storage driver is specified through a storage class, and d) the storage
          driver supports dynamic volume provisioning through
           a PersistentVolumeClaim (see EphemeralVolumeSource for more
           information on the connection between this volume type
           and PersistentVolumeClaim).

          Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that
          persist for longer than the lifecycle of an individual pod.

          Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
          be used that way - see the documentation of the driver for more information.

          A pod can use both types of ephemeral volumes and persistent volumes at the same
          time.

          This is a beta feature and only available when the GenericEphemeralVolume
          feature gate is enabled.
        type: EphemeralVolumeSource
        required: false
      fc:
        description: >-
          FC represents a Fibre Channel resource that is attached to a kubelet's host
          machine and then exposed to the pod.
        type: FCVolumeSource
        required: false
      flexVolume:
        description: >-
          FlexVolume represents a generic volume resource that is provisioned/attached
          using an exec based plugin.
        type: FlexVolumeSource
        required: false
      flocker:
        description: >-
          Flocker represents a Flocker volume attached to a kubelet's host machine. This
          depends on the Flocker control service being running
        type: FlockerVolumeSource
        required: false
      gcePersistentDisk:
        description: >-
          GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's
          host machine and then exposed to the pod. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: GCEPersistentDiskVolumeSource
        required: false
      gitRepo:
        description: >-
          GitRepo represents a git repository at a particular revision. DEPRECATED:
          GitRepo is deprecated. To provision a container with a git repo, mount an
          EmptyDir into an InitContainer that clones the repo using git, then mount the
          EmptyDir into the Pod's container.
        type: GitRepoVolumeSource
        required: false
      glusterfs:
        description: >-
          Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md
        type: GlusterfsVolumeSource
        required: false
      hostPath:
        description: >-
          HostPath represents a pre-existing file or directory on the host machine that is
          directly exposed to the container. This is generally used for system agents or
          other privileged things that are allowed to see the host machine. Most
          containers will NOT need this. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type: HostPathVolumeSource
        required: false
      iscsi:
        description: >-
          ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host
          machine and then exposed to the pod. More info:
          https://examples.k8s.io/volumes/iscsi/README.md
        type: ISCSIVolumeSource
        required: false
      name:
        description: >-
          Volume's name. Must be a DNS_LABEL and unique within the pod. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
      nfs:
        description: >-
          NFS represents an NFS mount on the host that shares a pod's lifetime More info:
          https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: NFSVolumeSource
        required: false
      persistentVolumeClaim:
        description: >-
          PersistentVolumeClaimVolumeSource represents a reference to a
          PersistentVolumeClaim in the same namespace. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: PersistentVolumeClaimVolumeSource
        required: false
      photonPersistentDisk:
        description: >-
          PhotonPersistentDisk represents a PhotonController persistent disk attached and
          mounted on kubelets host machine
        type: PhotonPersistentDiskVolumeSource
        required: false
      portworxVolume:
        description: >-
          PortworxVolume represents a portworx volume attached and mounted on kubelets
          host machine
        type: PortworxVolumeSource
        required: false
      projected:
        description: >-
          Items for all in one resources secrets, configmaps, and downward API
        type: ProjectedVolumeSource
        required: false
      quobyte:
        description: >-
          Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        type: QuobyteVolumeSource
        required: false
      rbd:
        description: >-
          RBD represents a Rados Block Device mount on the host that shares a pod's
          lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        type: RBDVolumeSource
        required: false
      scaleIO:
        description: >-
          ScaleIO represents a ScaleIO persistent volume attached and mounted on
          Kubernetes nodes.
        type: ScaleIOVolumeSource
        required: false
      secret:
        description: >-
          Secret represents a secret that should populate this volume. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#secret
        type: SecretVolumeSource
        required: false
      storageos:
        description: >-
          StorageOS represents a StorageOS volume attached and mounted on Kubernetes
          nodes.
        type: StorageOSVolumeSource
        required: false
      vsphereVolume:
        description: >-
          VsphereVolume represents a vSphere volume attached and mounted on kubelets host
          machine
        type: VsphereVirtualDiskVolumeSource
        required: false

  VolumeAttachmentSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      VolumeAttachmentSource represents a volume that should be attached. Right now
      only PersistenVolumes can be attached via external attacher, in future we may
      allow also inline volumes in pods. Exactly one member can be set.
    properties:
      inlineVolumeSpec:
        description: >-
          inlineVolumeSpec contains all the information necessary to attach a persistent
          volume defined by a pod's inline VolumeSource. This field is populated only for
          the CSIMigration feature. It contains translated fields from a pod's inline
          VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only
          honored by servers that enabled the CSIMigration feature.
        type: PersistentVolumeSpec
        required: false
      persistentVolumeName:
        description: >-
          Name of the persistent volume to attach.
        type: string
        required: false

  VolumeAttachmentSpec:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      VolumeAttachmentSpec is the specification of a VolumeAttachment request.
    properties:
      attacher:
        description: >-
          Attacher indicates the name of the volume driver that MUST handle this request.
          This is the name returned by GetPluginName().
        type: string
      nodeName:
        description: >-
          The node that the volume should be attached to.
        type: string
      source:
        description: >-
          Source represents the volume that should be attached.
        type: VolumeAttachmentSource

  VolumeAttachmentStatus:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      VolumeAttachmentStatus is the status of a VolumeAttachment request.
    properties:
      attachError:
        description: >-
          The last error encountered during attach operation, if any. This field must only
          be set by the entity completing the attach operation, i.e. the
          external-attacher.
        type: VolumeError
        required: false
      attached:
        description: >-
          Indicates the volume is successfully attached. This field must only be set by
          the entity completing the attach operation, i.e. the external-attacher.
        type: boolean
      attachmentMetadata:
        description: >-
          Upon successful attach, this field is populated with any information returned by
          the attach operation that must be passed into subsequent WaitForAttach or Mount
          calls. This field must only be set by the entity completing the attach
          operation, i.e. the external-attacher.
        type: map
        entry_schema: string
        required: false
      detachError:
        description: >-
          The last error encountered during detach operation, if any. This field must only
          be set by the entity completing the detach operation, i.e. the
          external-attacher.
        type: VolumeError
        required: false

  VolumeDevice:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      volumeDevice describes a mapping of a raw block device within a container.
    properties:
      devicePath:
        description: >-
          devicePath is the path inside of the container that the device will be mapped
          to.
        type: string
      name:
        description: >-
          name must match the name of a persistentVolumeClaim in the pod
        type: string

  VolumeError:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      VolumeError captures an error encountered during a volume operation.
    properties:
      message:
        description: >-
          String detailing the error encountered during Attach or Detach operation. This
          string may be logged, so it should not contain sensitive information.
        type: string
        required: false
      time:
        description: >-
          Time the error was encountered.
        type: timestamp
        required: false

  VolumeMount:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      VolumeMount describes a mounting of a Volume within a container.
    properties:
      mountPath:
        description: >-
          Path within the container at which the volume should be mounted. Must not
          contain ':'.
        type: string
      mountPropagation:
        description: >-
          mountPropagation determines how mounts are propagated from the host to container
          and the other way around. When not set, MountPropagationNone is used. This field
          is beta in 1.10.
        type: string
        required: false
      name:
        description: >-
          This must match the Name of a Volume.
        type: string
      readOnly:
        description: >-
          Mounted read-only if true, read-write otherwise (false or unspecified). Defaults
          to false.
        type: boolean
        required: false
      subPath:
        description: >-
          Path within the volume from which the container's volume should be mounted.
          Defaults to "" (volume's root).
        type: string
        required: false
      subPathExpr:
        description: >-
          Expanded path within the volume from which the container's volume should be
          mounted. Behaves similarly to SubPath but environment variable references
          $(VAR_NAME) are expanded using the container's environment. Defaults to ""
          (volume's root). SubPathExpr and SubPath are mutually exclusive.
        type: string
        required: false

  VolumeNodeAffinity:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      VolumeNodeAffinity defines constraints that limit what nodes this volume can be
      accessed from.
    properties:
      required:
        description: >-
          Required specifies hard node constraints that must be met.
        type: NodeSelector
        required: false

  VolumeNodeResources:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      VolumeNodeResources is a set of resource limits for scheduling of volumes.
    properties:
      count:
        description: >-
          Maximum number of unique volumes managed by the CSI driver that can be used on a
          node. A volume that is both attached and mounted on a node is considered to be
          used once, not twice. The same rule applies for a unique volume that is shared
          among multiple pods on the same node. If this field is not specified, then the
          supported number of volumes on this node is unbounded.
        type: integer
        required: false

  VolumeProjection:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Projection that may be projected along with other supported volume types
    properties:
      configMap:
        description: >-
          information about the configMap data to project
        type: ConfigMapProjection
        required: false
      downwardAPI:
        description: >-
          information about the downwardAPI data to project
        type: DownwardAPIProjection
        required: false
      secret:
        description: >-
          information about the secret data to project
        type: SecretProjection
        required: false
      serviceAccountToken:
        description: >-
          information about the serviceAccountToken data to project
        type: ServiceAccountTokenProjection
        required: false

  VsphereVirtualDiskVolumeSource:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Represents a vSphere volume resource.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the host
          operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified.
        type: string
        required: false
      storagePolicyID:
        description: >-
          Storage Policy Based Management (SPBM) profile ID associated with the
          StoragePolicyName.
        type: string
        required: false
      storagePolicyName:
        description: >-
          Storage Policy Based Management (SPBM) profile name.
        type: string
        required: false
      volumePath:
        description: >-
          Path that identifies vSphere volume vmdk
        type: string

  WatchEvent:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      Event represents a single event to a watched resource.
    properties:
      object:
        description: >-
          Object is:
           * If Type is Added or Modified: the new state of the object.
           * If Type is Deleted: the state of the object immediately before deletion.
           * If Type is Error: *Status is recommended; other types may make sense
           depending on context.
        type: RawExtension
      type:
        type: string

  WebhookClientConfig:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      WebhookClientConfig contains the information to make a TLS connection with the
      webhook.
    properties:
      caBundle:
        description: >-
          caBundle is a PEM encoded CA bundle which will be used to validate the webhook's
          server certificate. If unspecified, system trust roots on the apiserver are
          used.
        type: string
        required: false
      service:
        description: >-
          service is a reference to the service for this webhook. Either service or url
          must be specified.

          If the webhook is running within the cluster, then you should use `service`.
        type: APIExtensionsServiceReference
        required: false
      url:
        description: >-
          url gives the location of the webhook, in standard URL form
          (`scheme://host:port/path`). Exactly one of `url` or `service` must be
          specified.

          The `host` should not refer to a service running in the cluster; use the
          `service` field instead. The host might be resolved via external DNS in some
          apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would
          be a layering violation). `host` may also be an IP address.

          Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless
          you take great care to run this webhook on all hosts which run an apiserver
          which might need to make calls to this webhook. Such installs are likely to be
          non-portable, i.e., not easy to turn up in a new cluster.

          The scheme must be "https"; the URL must begin with "https://".

          A path is optional, and if present may be any string permissible in a URL. You
          may use the path to pass an arbitrary string to the webhook, for example, a
          cluster identifier.

          Attempting to use a user or basic auth e.g. "user:password@" is not allowed.
          Fragments ("#...") and query parameters ("?...") are not allowed, either.
        type: string
        required: false

  WebhookConversion:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      WebhookConversion describes how to call a conversion webhook
    properties:
      clientConfig:
        description: >-
          clientConfig is the instructions for how to call the webhook if strategy is
          `Webhook`.
        type: WebhookClientConfig
        required: false
      conversionReviewVersions:
        description: >-
          conversionReviewVersions is an ordered list of preferred `ConversionReview`
          versions the Webhook expects. The API server will use the first version in the
          list which it supports. If none of the versions specified in this list are
          supported by API server, conversion will fail for the custom resource. If a
          persisted Webhook configuration specifies allowed versions and does not include
          any versions known to the API Server, calls to the webhook will fail.
        type: list
        entry_schema: string

  WeightedPodAffinityTerm:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      The weights of all of the matched WeightedPodAffinityTerm fields are added
      per-node to find the most preferred node(s)
    properties:
      podAffinityTerm:
        description: >-
          Required. A pod affinity term, associated with the corresponding weight.
        type: PodAffinityTerm
      weight:
        description: >-
          weight associated with matching the corresponding podAffinityTerm, in the range
          1-100.
        type: integer

  WindowsSecurityContextOptions:
    metadata:
      specification.name: Kubernetes
      specification.version: 1.22.1
    description: >-
      WindowsSecurityContextOptions contain Windows-specific options and credentials.
    properties:
      gmsaCredentialSpec:
        description: >-
          GMSACredentialSpec is where the GMSA admission webhook
          (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
          GMSA credential spec named by the GMSACredentialSpecName field.
        type: string
        required: false
      gmsaCredentialSpecName:
        description: >-
          GMSACredentialSpecName is the name of the GMSA credential spec to use.
        type: string
        required: false
      hostProcess:
        description: >-
          HostProcess determines if a container should be run as a 'Host Process'
          container. This field is alpha-level and will only be honored by components that
          enable the WindowsHostProcessContainers feature flag. Setting this field without
          the feature flag will result in errors when validating the Pod. All of a Pod's
          containers must have the same effective HostProcess value (it is not allowed to
          have a mix of HostProcess containers and non-HostProcess containers). In
          addition, if HostProcess is true then HostNetwork must also be set to true.
        type: boolean
        required: false
      runAsUserName:
        description: >-
          The UserName in Windows to run the entrypoint of the container process. Defaults
          to the user specified in image metadata if unspecified. May also be set in
          PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the
          value specified in SecurityContext takes precedence.
        type: string
        required: false
